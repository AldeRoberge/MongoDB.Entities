### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.Many`1
  commentId: T:MongoDB.Entities.Many`1
  id: Many`1
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.Many`1.#ctor
  - MongoDB.Entities.Many`1.AddAsync(`0,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Many`1.AddAsync(IEnumerable{`0},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Many`1.AddAsync(IEnumerable{System.String},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Many`1.AddAsync(System.String,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Many`1.ChildrenCountAsync(IClientSessionHandle,CountOptions,CancellationToken)
  - MongoDB.Entities.Many`1.ChildrenFluent(IClientSessionHandle,AggregateOptions)
  - MongoDB.Entities.Many`1.ChildrenQueryable(IClientSessionHandle,AggregateOptions)
  - MongoDB.Entities.Many`1.GetEnumerator
  - MongoDB.Entities.Many`1.JoinCollection
  - MongoDB.Entities.Many`1.JoinFluent(IClientSessionHandle,AggregateOptions)
  - MongoDB.Entities.Many`1.JoinQueryable(IClientSessionHandle,AggregateOptions)
  - MongoDB.Entities.Many`1.ParentsFluent``1(IAggregateFluent{`0})
  - MongoDB.Entities.Many`1.ParentsFluent``1(IEnumerable{System.String},IClientSessionHandle,AggregateOptions)
  - MongoDB.Entities.Many`1.ParentsFluent``1(System.String,IClientSessionHandle,AggregateOptions)
  - MongoDB.Entities.Many`1.ParentsQueryable``1(IEnumerable{System.String},IClientSessionHandle,AggregateOptions)
  - MongoDB.Entities.Many`1.ParentsQueryable``1(IMongoQueryable{`0},IClientSessionHandle,AggregateOptions)
  - MongoDB.Entities.Many`1.ParentsQueryable``1(System.String,IClientSessionHandle,AggregateOptions)
  - MongoDB.Entities.Many`1.RemoveAsync(`0,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Many`1.RemoveAsync(IEnumerable{`0},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Many`1.RemoveAsync(IEnumerable{System.String},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Many`1.RemoveAsync(System.String,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Many`1.VB_InitManyToMany``1(``0,Expression{Func{``0,System.Object}},Expression{Func{`0,System.Object}},System.Boolean)
  - MongoDB.Entities.Many`1.VB_InitOneToMany``1(``0,Expression{Func{``0,System.Object}})
  langs:
  - csharp
  - vb
  name: Many<TChild>
  nameWithType: Many<TChild>
  fullName: MongoDB.Entities.Many<TChild>
  type: Class
  source:
    id: Many
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Remove.cs
    startLine: 8
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents a one-to-many/many-to-many relationship between two Entities.\n<p>WARNING: You have to initialize all instances of this class before accessing any of it&apos;s members.</p>\n<p>Initialize from the constructor of the parent entity as follows:</p>\n<p><code>this.InitOneToMany(() => Property);</code></p>\n<p><code>this.InitManyToMany(() => Property, x => x.OtherProperty);</code></p>\n"
  example: []
  syntax:
    content: 'public class Many<TChild> : ManyBase where TChild : IEntity'
    typeParameters:
    - id: TChild
      description: Type of the child IEntity.
    content.vb: >-
      Public Class Many(Of TChild As IEntity)

          Inherits ManyBase
  inheritance:
  - System.Object
  - MongoDB.Entities.ManyBase
  nameWithType.vb: Many(Of TChild)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MongoDB.Entities.Many(Of TChild)
  name.vb: Many(Of TChild)
- uid: MongoDB.Entities.Many`1.AddAsync(`0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.AddAsync(`0,IClientSessionHandle,CancellationToken)
  id: AddAsync(`0,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: AddAsync(TChild, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.AddAsync(TChild, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.AddAsync(TChild, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: AddAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Add.cs
    startLine: 17
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAdds a new child reference.\n<p>WARNING: Make sure to save the parent and child Entities before calling this method.</p>\n"
  example: []
  syntax:
    content: public Task AddAsync(TChild child, IClientSessionHandle session = null, CancellationToken cancellation = null)
    parameters:
    - id: child
      type: '{TChild}'
      description: The child Entity to add.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task
    content.vb: Public Function AddAsync(child As TChild, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.AddAsync*
  nameWithType.vb: Many(Of TChild).AddAsync(TChild, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).AddAsync(TChild, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Many`1.AddAsync(IEnumerable{`0},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.AddAsync(IEnumerable{`0},IClientSessionHandle,CancellationToken)
  id: AddAsync(IEnumerable{`0},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: AddAsync(IEnumerable<TChild>, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.AddAsync(IEnumerable<TChild>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.AddAsync(IEnumerable<TChild>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: AddAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Add.cs
    startLine: 29
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAdds multiple child references in a single bulk operation\n<p>WARNING: Make sure to save the parent and child Entities before calling this method.</p>\n"
  example: []
  syntax:
    content: public Task AddAsync(IEnumerable<TChild> children, IClientSessionHandle session = null, CancellationToken cancellation = null)
    parameters:
    - id: children
      type: IEnumerable{{TChild}}
      description: The child Entities to add
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task
    content.vb: Public Function AddAsync(children As IEnumerable(Of TChild), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.AddAsync*
  nameWithType.vb: Many(Of TChild).AddAsync(IEnumerable(Of TChild), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).AddAsync(IEnumerable(Of TChild), IClientSessionHandle, CancellationToken)
  name.vb: AddAsync(IEnumerable(Of TChild), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Many`1.AddAsync(System.String,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.AddAsync(System.String,IClientSessionHandle,CancellationToken)
  id: AddAsync(System.String,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: AddAsync(String, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.AddAsync(String, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.AddAsync(System.String, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: AddAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Add.cs
    startLine: 41
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAdds a new child reference.\n<p>WARNING: Make sure to save the parent and child Entities before calling this method.</p>\n"
  example: []
  syntax:
    content: public Task AddAsync(string childID, IClientSessionHandle session = null, CancellationToken cancellation = null)
    parameters:
    - id: childID
      type: System.String
      description: The ID of the child Entity to add.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task
    content.vb: Public Function AddAsync(childID As String, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.AddAsync*
  nameWithType.vb: Many(Of TChild).AddAsync(String, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).AddAsync(System.String, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Many`1.AddAsync(IEnumerable{System.String},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.AddAsync(IEnumerable{System.String},IClientSessionHandle,CancellationToken)
  id: AddAsync(IEnumerable{System.String},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: AddAsync(IEnumerable<String>, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.AddAsync(IEnumerable<String>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.AddAsync(IEnumerable<System.String>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: AddAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Add.cs
    startLine: 53
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAdds multiple child references in a single bulk operation\n<p>WARNING: Make sure to save the parent and child Entities before calling this method.</p>\n"
  example: []
  syntax:
    content: public Task AddAsync(IEnumerable<string> childIDs, IClientSessionHandle session = null, CancellationToken cancellation = null)
    parameters:
    - id: childIDs
      type: IEnumerable{System.String}
      description: The IDs of the child Entities to add.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task
    content.vb: Public Function AddAsync(childIDs As IEnumerable(Of String), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.AddAsync*
  nameWithType.vb: Many(Of TChild).AddAsync(IEnumerable(Of String), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).AddAsync(IEnumerable(Of System.String), IClientSessionHandle, CancellationToken)
  name.vb: AddAsync(IEnumerable(Of String), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Many`1.JoinCollection
  commentId: P:MongoDB.Entities.Many`1.JoinCollection
  id: JoinCollection
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: JoinCollection
  nameWithType: Many<TChild>.JoinCollection
  fullName: MongoDB.Entities.Many<TChild>.JoinCollection
  type: Property
  source:
    id: JoinCollection
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 38
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets the IMongoCollection of JoinRecords for this relationship.\n<p>TIP: Try never to use this unless really neccessary.</p>\n"
  example: []
  syntax:
    content: public IMongoCollection<JoinRecord> JoinCollection { get; }
    parameters: []
    return:
      type: IMongoCollection{MongoDB.Entities.JoinRecord}
    content.vb: Public ReadOnly Property JoinCollection As IMongoCollection(Of JoinRecord)
  overload: MongoDB.Entities.Many`1.JoinCollection*
  nameWithType.vb: Many(Of TChild).JoinCollection
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MongoDB.Entities.Many(Of TChild).JoinCollection
- uid: MongoDB.Entities.Many`1.ChildrenCountAsync(IClientSessionHandle,CountOptions,CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.ChildrenCountAsync(IClientSessionHandle,CountOptions,CancellationToken)
  id: ChildrenCountAsync(IClientSessionHandle,CountOptions,CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ChildrenCountAsync(IClientSessionHandle, CountOptions, CancellationToken)
  nameWithType: Many<TChild>.ChildrenCountAsync(IClientSessionHandle, CountOptions, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.ChildrenCountAsync(IClientSessionHandle, CountOptions, CancellationToken)
  type: Method
  source:
    id: ChildrenCountAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 46
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet the number of children for a relationship\n"
  example: []
  syntax:
    content: public Task<long> ChildrenCountAsync(IClientSessionHandle session = null, CountOptions options = null, CancellationToken cancellation = null)
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: CountOptions
      description: An optional AggregateOptions object
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task{System.Int64}
    content.vb: Public Function ChildrenCountAsync(session As IClientSessionHandle = Nothing, options As CountOptions = Nothing, cancellation As CancellationToken = Nothing) As Task(Of Long)
  overload: MongoDB.Entities.Many`1.ChildrenCountAsync*
  nameWithType.vb: Many(Of TChild).ChildrenCountAsync(IClientSessionHandle, CountOptions, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ChildrenCountAsync(IClientSessionHandle, CountOptions, CancellationToken)
- uid: MongoDB.Entities.Many`1.#ctor
  commentId: M:MongoDB.Entities.Many`1.#ctor
  id: '#ctor'
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: Many()
  nameWithType: Many<TChild>.Many()
  fullName: MongoDB.Entities.Many<TChild>.Many()
  type: Constructor
  source:
    id: .ctor
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 68
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nCreates an instance of Many&lt;TChild> \nThis is only needed in VB.Net\n"
  example: []
  syntax:
    content: public Many()
    content.vb: Public Sub New
  overload: MongoDB.Entities.Many`1.#ctor*
  nameWithType.vb: Many(Of TChild).Many()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).Many()
- uid: MongoDB.Entities.Many`1.VB_InitOneToMany``1(``0,Expression{Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Many`1.VB_InitOneToMany``1(``0,Expression{Func{``0,System.Object}})
  id: VB_InitOneToMany``1(``0,Expression{Func{``0,System.Object}})
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: VB_InitOneToMany<TParent>(TParent, Expression<Func<TParent, Object>>)
  nameWithType: Many<TChild>.VB_InitOneToMany<TParent>(TParent, Expression<Func<TParent, Object>>)
  fullName: MongoDB.Entities.Many<TChild>.VB_InitOneToMany<TParent>(TParent, Expression<Func<TParent, System.Object>>)
  type: Method
  source:
    id: VB_InitOneToMany
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 93
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nUse this method to initialize the Many&lt;TChild> properties with VB.Net\n"
  example: []
  syntax:
    content: >-
      public void VB_InitOneToMany<TParent>(TParent parent, Expression<Func<TParent, object>> property)

          where TParent : IEntity
    parameters:
    - id: parent
      type: '{TParent}'
      description: The parent entity instance
    - id: property
      type: Expression{Func{{TParent},System.Object}}
      description: Function(x) x.PropName
    typeParameters:
    - id: TParent
      description: The type of the parent
    content.vb: Public Sub VB_InitOneToMany(Of TParent As IEntity)(parent As TParent, property As Expression(Of Func(Of TParent, Object)))
  overload: MongoDB.Entities.Many`1.VB_InitOneToMany*
  nameWithType.vb: Many(Of TChild).VB_InitOneToMany(Of TParent)(TParent, Expression(Of Func(Of TParent, Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).VB_InitOneToMany(Of TParent)(TParent, Expression(Of Func(Of TParent, System.Object)))
  name.vb: VB_InitOneToMany(Of TParent)(TParent, Expression(Of Func(Of TParent, Object)))
- uid: MongoDB.Entities.Many`1.VB_InitManyToMany``1(``0,Expression{Func{``0,System.Object}},Expression{Func{`0,System.Object}},System.Boolean)
  commentId: M:MongoDB.Entities.Many`1.VB_InitManyToMany``1(``0,Expression{Func{``0,System.Object}},Expression{Func{`0,System.Object}},System.Boolean)
  id: VB_InitManyToMany``1(``0,Expression{Func{``0,System.Object}},Expression{Func{`0,System.Object}},System.Boolean)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: VB_InitManyToMany<TParent>(TParent, Expression<Func<TParent, Object>>, Expression<Func<TChild, Object>>, Boolean)
  nameWithType: Many<TChild>.VB_InitManyToMany<TParent>(TParent, Expression<Func<TParent, Object>>, Expression<Func<TChild, Object>>, Boolean)
  fullName: MongoDB.Entities.Many<TChild>.VB_InitManyToMany<TParent>(TParent, Expression<Func<TParent, System.Object>>, Expression<Func<TChild, System.Object>>, System.Boolean)
  type: Method
  source:
    id: VB_InitManyToMany
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 125
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nUse this method to initialize the Many&lt;TChild> properties with VB.Net\n"
  example: []
  syntax:
    content: >-
      public void VB_InitManyToMany<TParent>(TParent parent, Expression<Func<TParent, object>> propertyParent, Expression<Func<TChild, object>> propertyChild, bool isInverse)

          where TParent : IEntity
    parameters:
    - id: parent
      type: '{TParent}'
      description: The parent entity instance
    - id: propertyParent
      type: Expression{Func{{TParent},System.Object}}
      description: Function(x) x.ParentProp
    - id: propertyChild
      type: Expression{Func{{TChild},System.Object}}
      description: Function(x) x.ChildProp
    - id: isInverse
      type: System.Boolean
      description: Specify if this is the inverse side of the relationship or not
    typeParameters:
    - id: TParent
      description: The type of the parent
    content.vb: Public Sub VB_InitManyToMany(Of TParent As IEntity)(parent As TParent, propertyParent As Expression(Of Func(Of TParent, Object)), propertyChild As Expression(Of Func(Of TChild, Object)), isInverse As Boolean)
  overload: MongoDB.Entities.Many`1.VB_InitManyToMany*
  nameWithType.vb: Many(Of TChild).VB_InitManyToMany(Of TParent)(TParent, Expression(Of Func(Of TParent, Object)), Expression(Of Func(Of TChild, Object)), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).VB_InitManyToMany(Of TParent)(TParent, Expression(Of Func(Of TParent, System.Object)), Expression(Of Func(Of TChild, System.Object)), System.Boolean)
  name.vb: VB_InitManyToMany(Of TParent)(TParent, Expression(Of Func(Of TParent, Object)), Expression(Of Func(Of TChild, Object)), Boolean)
- uid: MongoDB.Entities.Many`1.JoinFluent(IClientSessionHandle,AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.JoinFluent(IClientSessionHandle,AggregateOptions)
  id: JoinFluent(IClientSessionHandle,AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: JoinFluent(IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.JoinFluent(IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.JoinFluent(IClientSessionHandle, AggregateOptions)
  type: Method
  source:
    id: JoinFluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Fluent.cs
    startLine: 13
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAn IAggregateFluent of JoinRecords for this relationship\n"
  example: []
  syntax:
    content: public IAggregateFluent<JoinRecord> JoinFluent(IClientSessionHandle session = null, AggregateOptions options = null)
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: AggregateOptions
      description: An optional AggregateOptions object
    return:
      type: IAggregateFluent{MongoDB.Entities.JoinRecord}
    content.vb: Public Function JoinFluent(session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IAggregateFluent(Of JoinRecord)
  overload: MongoDB.Entities.Many`1.JoinFluent*
  nameWithType.vb: Many(Of TChild).JoinFluent(IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).JoinFluent(IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.ParentsFluent``1(IAggregateFluent{`0})
  commentId: M:MongoDB.Entities.Many`1.ParentsFluent``1(IAggregateFluent{`0})
  id: ParentsFluent``1(IAggregateFluent{`0})
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ParentsFluent<TParent>(IAggregateFluent<TChild>)
  nameWithType: Many<TChild>.ParentsFluent<TParent>(IAggregateFluent<TChild>)
  fullName: MongoDB.Entities.Many<TChild>.ParentsFluent<TParent>(IAggregateFluent<TChild>)
  type: Method
  source:
    id: ParentsFluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Fluent.cs
    startLine: 25
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet an IAggregateFluent of parents matching a supplied IAggregateFluent of children for this relationship.\n"
  example: []
  syntax:
    content: >-
      public IAggregateFluent<TParent> ParentsFluent<TParent>(IAggregateFluent<TChild> children)

          where TParent : IEntity
    parameters:
    - id: children
      type: IAggregateFluent{{TChild}}
      description: An IAggregateFluent of children
    typeParameters:
    - id: TParent
      description: The type of the parent IEntity
    return:
      type: IAggregateFluent{{TParent}}
    content.vb: Public Function ParentsFluent(Of TParent As IEntity)(children As IAggregateFluent(Of TChild)) As IAggregateFluent(Of TParent)
  overload: MongoDB.Entities.Many`1.ParentsFluent*
  nameWithType.vb: Many(Of TChild).ParentsFluent(Of TParent)(IAggregateFluent(Of TChild))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsFluent(Of TParent)(IAggregateFluent(Of TChild))
  name.vb: ParentsFluent(Of TParent)(IAggregateFluent(Of TChild))
- uid: MongoDB.Entities.Many`1.ParentsFluent``1(System.String,IClientSessionHandle,AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ParentsFluent``1(System.String,IClientSessionHandle,AggregateOptions)
  id: ParentsFluent``1(System.String,IClientSessionHandle,AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ParentsFluent<TParent>(String, IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ParentsFluent<TParent>(String, IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ParentsFluent<TParent>(System.String, IClientSessionHandle, AggregateOptions)
  type: Method
  source:
    id: ParentsFluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Fluent.cs
    startLine: 72
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet an IAggregateFluent of parents matching a single child ID for this relationship.\n"
  example: []
  syntax:
    content: >-
      public IAggregateFluent<TParent> ParentsFluent<TParent>(string childID, IClientSessionHandle session = null, AggregateOptions options = null)

          where TParent : IEntity
    parameters:
    - id: childID
      type: System.String
      description: An child ID
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: AggregateOptions
      description: An optional AggregateOptions object
    typeParameters:
    - id: TParent
      description: The type of the parent IEntity
    return:
      type: IAggregateFluent{{TParent}}
    content.vb: Public Function ParentsFluent(Of TParent As IEntity)(childID As String, session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IAggregateFluent(Of TParent)
  overload: MongoDB.Entities.Many`1.ParentsFluent*
  nameWithType.vb: Many(Of TChild).ParentsFluent(Of TParent)(String, IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsFluent(Of TParent)(System.String, IClientSessionHandle, AggregateOptions)
  name.vb: ParentsFluent(Of TParent)(String, IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.ParentsFluent``1(IEnumerable{System.String},IClientSessionHandle,AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ParentsFluent``1(IEnumerable{System.String},IClientSessionHandle,AggregateOptions)
  id: ParentsFluent``1(IEnumerable{System.String},IClientSessionHandle,AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ParentsFluent<TParent>(IEnumerable<String>, IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ParentsFluent<TParent>(IEnumerable<String>, IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ParentsFluent<TParent>(IEnumerable<System.String>, IClientSessionHandle, AggregateOptions)
  type: Method
  source:
    id: ParentsFluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Fluent.cs
    startLine: 84
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet an IAggregateFluent of parents matching multiple child IDs for this relationship.\n"
  example: []
  syntax:
    content: >-
      public IAggregateFluent<TParent> ParentsFluent<TParent>(IEnumerable<string> childIDs, IClientSessionHandle session = null, AggregateOptions options = null)

          where TParent : IEntity
    parameters:
    - id: childIDs
      type: IEnumerable{System.String}
      description: An IEnumerable of child IDs
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: AggregateOptions
      description: An optional AggregateOptions object
    typeParameters:
    - id: TParent
      description: The type of the parent IEntity
    return:
      type: IAggregateFluent{{TParent}}
    content.vb: Public Function ParentsFluent(Of TParent As IEntity)(childIDs As IEnumerable(Of String), session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IAggregateFluent(Of TParent)
  overload: MongoDB.Entities.Many`1.ParentsFluent*
  nameWithType.vb: Many(Of TChild).ParentsFluent(Of TParent)(IEnumerable(Of String), IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsFluent(Of TParent)(IEnumerable(Of System.String), IClientSessionHandle, AggregateOptions)
  name.vb: ParentsFluent(Of TParent)(IEnumerable(Of String), IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.ChildrenFluent(IClientSessionHandle,AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ChildrenFluent(IClientSessionHandle,AggregateOptions)
  id: ChildrenFluent(IClientSessionHandle,AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ChildrenFluent(IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ChildrenFluent(IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ChildrenFluent(IClientSessionHandle, AggregateOptions)
  type: Method
  source:
    id: ChildrenFluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Fluent.cs
    startLine: 119
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAn IAggregateFluent of child Entities for the parent.\n"
  example: []
  syntax:
    content: public IAggregateFluent<TChild> ChildrenFluent(IClientSessionHandle session = null, AggregateOptions options = null)
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: AggregateOptions
      description: An optional AggregateOptions object
    return:
      type: IAggregateFluent{{TChild}}
    content.vb: Public Function ChildrenFluent(session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IAggregateFluent(Of TChild)
  overload: MongoDB.Entities.Many`1.ChildrenFluent*
  nameWithType.vb: Many(Of TChild).ChildrenFluent(IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ChildrenFluent(IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.JoinQueryable(IClientSessionHandle,AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.JoinQueryable(IClientSessionHandle,AggregateOptions)
  id: JoinQueryable(IClientSessionHandle,AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: JoinQueryable(IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.JoinQueryable(IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.JoinQueryable(IClientSessionHandle, AggregateOptions)
  type: Method
  source:
    id: JoinQueryable
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Queryable.cs
    startLine: 16
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAn IQueryable of JoinRecords for this relationship\n"
  example: []
  syntax:
    content: public IMongoQueryable<JoinRecord> JoinQueryable(IClientSessionHandle session = null, AggregateOptions options = null)
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: AggregateOptions
      description: An optional AggregateOptions object
    return:
      type: IMongoQueryable{MongoDB.Entities.JoinRecord}
    content.vb: Public Function JoinQueryable(session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IMongoQueryable(Of JoinRecord)
  overload: MongoDB.Entities.Many`1.JoinQueryable*
  nameWithType.vb: Many(Of TChild).JoinQueryable(IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).JoinQueryable(IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.ParentsQueryable``1(System.String,IClientSessionHandle,AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ParentsQueryable``1(System.String,IClientSessionHandle,AggregateOptions)
  id: ParentsQueryable``1(System.String,IClientSessionHandle,AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ParentsQueryable<TParent>(String, IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ParentsQueryable<TParent>(String, IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ParentsQueryable<TParent>(System.String, IClientSessionHandle, AggregateOptions)
  type: Method
  source:
    id: ParentsQueryable
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Queryable.cs
    startLine: 30
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet an IQueryable of parents matching a single child ID for this relationship.\n"
  example: []
  syntax:
    content: >-
      public IMongoQueryable<TParent> ParentsQueryable<TParent>(string childID, IClientSessionHandle session = null, AggregateOptions options = null)

          where TParent : IEntity
    parameters:
    - id: childID
      type: System.String
      description: A child ID
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: AggregateOptions
      description: An optional AggregateOptions object
    typeParameters:
    - id: TParent
      description: The type of the parent IEntity
    return:
      type: IMongoQueryable{{TParent}}
    content.vb: Public Function ParentsQueryable(Of TParent As IEntity)(childID As String, session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IMongoQueryable(Of TParent)
  overload: MongoDB.Entities.Many`1.ParentsQueryable*
  nameWithType.vb: Many(Of TChild).ParentsQueryable(Of TParent)(String, IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsQueryable(Of TParent)(System.String, IClientSessionHandle, AggregateOptions)
  name.vb: ParentsQueryable(Of TParent)(String, IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.ParentsQueryable``1(IEnumerable{System.String},IClientSessionHandle,AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ParentsQueryable``1(IEnumerable{System.String},IClientSessionHandle,AggregateOptions)
  id: ParentsQueryable``1(IEnumerable{System.String},IClientSessionHandle,AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ParentsQueryable<TParent>(IEnumerable<String>, IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ParentsQueryable<TParent>(IEnumerable<String>, IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ParentsQueryable<TParent>(IEnumerable<System.String>, IClientSessionHandle, AggregateOptions)
  type: Method
  source:
    id: ParentsQueryable
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Queryable.cs
    startLine: 42
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet an IQueryable of parents matching multiple child IDs for this relationship.\n"
  example: []
  syntax:
    content: >-
      public IMongoQueryable<TParent> ParentsQueryable<TParent>(IEnumerable<string> childIDs, IClientSessionHandle session = null, AggregateOptions options = null)

          where TParent : IEntity
    parameters:
    - id: childIDs
      type: IEnumerable{System.String}
      description: An IEnumerable of child IDs
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: AggregateOptions
      description: An optional AggregateOptions object
    typeParameters:
    - id: TParent
      description: The type of the parent IEntity
    return:
      type: IMongoQueryable{{TParent}}
    content.vb: Public Function ParentsQueryable(Of TParent As IEntity)(childIDs As IEnumerable(Of String), session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IMongoQueryable(Of TParent)
  overload: MongoDB.Entities.Many`1.ParentsQueryable*
  nameWithType.vb: Many(Of TChild).ParentsQueryable(Of TParent)(IEnumerable(Of String), IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsQueryable(Of TParent)(IEnumerable(Of System.String), IClientSessionHandle, AggregateOptions)
  name.vb: ParentsQueryable(Of TParent)(IEnumerable(Of String), IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.ParentsQueryable``1(IMongoQueryable{`0},IClientSessionHandle,AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ParentsQueryable``1(IMongoQueryable{`0},IClientSessionHandle,AggregateOptions)
  id: ParentsQueryable``1(IMongoQueryable{`0},IClientSessionHandle,AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ParentsQueryable<TParent>(IMongoQueryable<TChild>, IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ParentsQueryable<TParent>(IMongoQueryable<TChild>, IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ParentsQueryable<TParent>(IMongoQueryable<TChild>, IClientSessionHandle, AggregateOptions)
  type: Method
  source:
    id: ParentsQueryable
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Queryable.cs
    startLine: 77
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet an IQueryable of parents matching a supplied IQueryable of children for this relationship.\n"
  example: []
  syntax:
    content: >-
      public IMongoQueryable<TParent> ParentsQueryable<TParent>(IMongoQueryable<TChild> children, IClientSessionHandle session = null, AggregateOptions options = null)

          where TParent : IEntity
    parameters:
    - id: children
      type: IMongoQueryable{{TChild}}
      description: An IQueryable of children
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: AggregateOptions
      description: An optional AggregateOptions object
    typeParameters:
    - id: TParent
      description: The type of the parent IEntity
    return:
      type: IMongoQueryable{{TParent}}
    content.vb: Public Function ParentsQueryable(Of TParent As IEntity)(children As IMongoQueryable(Of TChild), session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IMongoQueryable(Of TParent)
  overload: MongoDB.Entities.Many`1.ParentsQueryable*
  nameWithType.vb: Many(Of TChild).ParentsQueryable(Of TParent)(IMongoQueryable(Of TChild), IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsQueryable(Of TParent)(IMongoQueryable(Of TChild), IClientSessionHandle, AggregateOptions)
  name.vb: ParentsQueryable(Of TParent)(IMongoQueryable(Of TChild), IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.ChildrenQueryable(IClientSessionHandle,AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ChildrenQueryable(IClientSessionHandle,AggregateOptions)
  id: ChildrenQueryable(IClientSessionHandle,AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ChildrenQueryable(IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ChildrenQueryable(IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ChildrenQueryable(IClientSessionHandle, AggregateOptions)
  type: Method
  source:
    id: ChildrenQueryable
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Queryable.cs
    startLine: 118
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAn IQueryable of child Entities for the parent.\n"
  example: []
  syntax:
    content: public IMongoQueryable<TChild> ChildrenQueryable(IClientSessionHandle session = null, AggregateOptions options = null)
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: AggregateOptions
      description: An optional AggregateOptions object
    return:
      type: IMongoQueryable{{TChild}}
    content.vb: Public Function ChildrenQueryable(session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IMongoQueryable(Of TChild)
  overload: MongoDB.Entities.Many`1.ChildrenQueryable*
  nameWithType.vb: Many(Of TChild).ChildrenQueryable(IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ChildrenQueryable(IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.GetEnumerator
  commentId: M:MongoDB.Entities.Many`1.GetEnumerator
  id: GetEnumerator
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Many<TChild>.GetEnumerator()
  fullName: MongoDB.Entities.Many<TChild>.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Queryable.cs
    startLine: 145
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  example: []
  syntax:
    content: public IEnumerator<TChild> GetEnumerator()
    return:
      type: IEnumerator{{TChild}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of TChild)
  overload: MongoDB.Entities.Many`1.GetEnumerator*
  nameWithType.vb: Many(Of TChild).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).GetEnumerator()
- uid: MongoDB.Entities.Many`1.RemoveAsync(`0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.RemoveAsync(`0,IClientSessionHandle,CancellationToken)
  id: RemoveAsync(`0,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: RemoveAsync(TChild, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.RemoveAsync(TChild, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.RemoveAsync(TChild, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: RemoveAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Remove.cs
    startLine: 16
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRemoves a child reference.\n"
  example: []
  syntax:
    content: public Task RemoveAsync(TChild child, IClientSessionHandle session = null, CancellationToken cancellation = null)
    parameters:
    - id: child
      type: '{TChild}'
      description: The child IEntity to remove the reference of.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task
    content.vb: Public Function RemoveAsync(child As TChild, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.RemoveAsync*
  nameWithType.vb: Many(Of TChild).RemoveAsync(TChild, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).RemoveAsync(TChild, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Many`1.RemoveAsync(System.String,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.RemoveAsync(System.String,IClientSessionHandle,CancellationToken)
  id: RemoveAsync(System.String,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: RemoveAsync(String, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.RemoveAsync(String, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.RemoveAsync(System.String, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: RemoveAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Remove.cs
    startLine: 27
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRemoves a child reference.\n"
  example: []
  syntax:
    content: public Task RemoveAsync(string childID, IClientSessionHandle session = null, CancellationToken cancellation = null)
    parameters:
    - id: childID
      type: System.String
      description: The ID of the child Entity to remove the reference of.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task
    content.vb: Public Function RemoveAsync(childID As String, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.RemoveAsync*
  nameWithType.vb: Many(Of TChild).RemoveAsync(String, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).RemoveAsync(System.String, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Many`1.RemoveAsync(IEnumerable{`0},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.RemoveAsync(IEnumerable{`0},IClientSessionHandle,CancellationToken)
  id: RemoveAsync(IEnumerable{`0},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: RemoveAsync(IEnumerable<TChild>, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.RemoveAsync(IEnumerable<TChild>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.RemoveAsync(IEnumerable<TChild>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: RemoveAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Remove.cs
    startLine: 38
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRemoves child references.\n"
  example: []
  syntax:
    content: public Task RemoveAsync(IEnumerable<TChild> children, IClientSessionHandle session = null, CancellationToken cancellation = null)
    parameters:
    - id: children
      type: IEnumerable{{TChild}}
      description: The child Entities to remove the references of.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task
    content.vb: Public Function RemoveAsync(children As IEnumerable(Of TChild), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.RemoveAsync*
  nameWithType.vb: Many(Of TChild).RemoveAsync(IEnumerable(Of TChild), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).RemoveAsync(IEnumerable(Of TChild), IClientSessionHandle, CancellationToken)
  name.vb: RemoveAsync(IEnumerable(Of TChild), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Many`1.RemoveAsync(IEnumerable{System.String},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.RemoveAsync(IEnumerable{System.String},IClientSessionHandle,CancellationToken)
  id: RemoveAsync(IEnumerable{System.String},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: RemoveAsync(IEnumerable<String>, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.RemoveAsync(IEnumerable<String>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.RemoveAsync(IEnumerable<System.String>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: RemoveAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.Remove.cs
    startLine: 49
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRemoves child references.\n"
  example: []
  syntax:
    content: public Task RemoveAsync(IEnumerable<string> childIDs, IClientSessionHandle session = null, CancellationToken cancellation = null)
    parameters:
    - id: childIDs
      type: IEnumerable{System.String}
      description: The IDs of the child Entities to remove the references of
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task
    content.vb: Public Function RemoveAsync(childIDs As IEnumerable(Of String), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.RemoveAsync*
  nameWithType.vb: Many(Of TChild).RemoveAsync(IEnumerable(Of String), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).RemoveAsync(IEnumerable(Of System.String), IClientSessionHandle, CancellationToken)
  name.vb: RemoveAsync(IEnumerable(Of String), IClientSessionHandle, CancellationToken)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: MongoDB.Entities.ManyBase
  commentId: T:MongoDB.Entities.ManyBase
  parent: MongoDB.Entities
  name: ManyBase
  nameWithType: ManyBase
  fullName: MongoDB.Entities.ManyBase
- uid: MongoDB.Entities.Many`1.AddAsync*
  commentId: Overload:MongoDB.Entities.Many`1.AddAsync
  name: AddAsync
  nameWithType: Many<TChild>.AddAsync
  fullName: MongoDB.Entities.Many<TChild>.AddAsync
  nameWithType.vb: Many(Of TChild).AddAsync
  fullName.vb: MongoDB.Entities.Many(Of TChild).AddAsync
- uid: '{TChild}'
  commentId: '!:TChild'
  definition: TChild
  name: TChild
  nameWithType: TChild
  fullName: TChild
- uid: IClientSessionHandle
  isExternal: true
  name: IClientSessionHandle
  nameWithType: IClientSessionHandle
  fullName: IClientSessionHandle
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: TChild
  name: TChild
  nameWithType: TChild
  fullName: TChild
- uid: IEnumerable{{TChild}}
  commentId: '!:IEnumerable{`0}'
  definition: IEnumerable`1
  name: IEnumerable<TChild>
  nameWithType: IEnumerable<TChild>
  fullName: IEnumerable<TChild>
  nameWithType.vb: IEnumerable(Of TChild)
  fullName.vb: IEnumerable(Of TChild)
  name.vb: IEnumerable(Of TChild)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: IEnumerable{System.String}
  commentId: '!:IEnumerable{System.String}'
  definition: IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.JoinCollection*
  commentId: Overload:MongoDB.Entities.Many`1.JoinCollection
  name: JoinCollection
  nameWithType: Many<TChild>.JoinCollection
  fullName: MongoDB.Entities.Many<TChild>.JoinCollection
  nameWithType.vb: Many(Of TChild).JoinCollection
  fullName.vb: MongoDB.Entities.Many(Of TChild).JoinCollection
- uid: IMongoCollection{MongoDB.Entities.JoinRecord}
  commentId: '!:IMongoCollection{MongoDB.Entities.JoinRecord}'
  definition: IMongoCollection`1
  name: IMongoCollection<JoinRecord>
  nameWithType: IMongoCollection<JoinRecord>
  fullName: IMongoCollection<MongoDB.Entities.JoinRecord>
  nameWithType.vb: IMongoCollection(Of JoinRecord)
  fullName.vb: IMongoCollection(Of MongoDB.Entities.JoinRecord)
  name.vb: IMongoCollection(Of JoinRecord)
  spec.csharp:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: IMongoCollection`1
  isExternal: true
  name: IMongoCollection<>
  nameWithType: IMongoCollection<>
  fullName: IMongoCollection<>
  nameWithType.vb: IMongoCollection(Of )
  fullName.vb: IMongoCollection(Of )
  name.vb: IMongoCollection(Of )
  spec.csharp:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.ChildrenCountAsync*
  commentId: Overload:MongoDB.Entities.Many`1.ChildrenCountAsync
  name: ChildrenCountAsync
  nameWithType: Many<TChild>.ChildrenCountAsync
  fullName: MongoDB.Entities.Many<TChild>.ChildrenCountAsync
  nameWithType.vb: Many(Of TChild).ChildrenCountAsync
  fullName.vb: MongoDB.Entities.Many(Of TChild).ChildrenCountAsync
- uid: CountOptions
  isExternal: true
  name: CountOptions
  nameWithType: CountOptions
  fullName: CountOptions
- uid: Task{System.Int64}
  commentId: '!:Task{System.Int64}'
  definition: Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.#ctor*
  commentId: Overload:MongoDB.Entities.Many`1.#ctor
  name: Many
  nameWithType: Many<TChild>.Many
  fullName: MongoDB.Entities.Many<TChild>.Many
  nameWithType.vb: Many(Of TChild).Many
  fullName.vb: MongoDB.Entities.Many(Of TChild).Many
- uid: MongoDB.Entities.Many`1.VB_InitOneToMany*
  commentId: Overload:MongoDB.Entities.Many`1.VB_InitOneToMany
  name: VB_InitOneToMany
  nameWithType: Many<TChild>.VB_InitOneToMany
  fullName: MongoDB.Entities.Many<TChild>.VB_InitOneToMany
  nameWithType.vb: Many(Of TChild).VB_InitOneToMany
  fullName.vb: MongoDB.Entities.Many(Of TChild).VB_InitOneToMany
- uid: '{TParent}'
  commentId: '!:TParent'
  definition: TParent
  name: TParent
  nameWithType: TParent
  fullName: TParent
- uid: Expression{Func{{TParent},System.Object}}
  commentId: '!:Expression{Func{``0,System.Object}}'
  definition: Expression`1
  name: Expression<Func<TParent, Object>>
  nameWithType: Expression<Func<TParent, Object>>
  fullName: Expression<Func<TParent, System.Object>>
  nameWithType.vb: Expression(Of Func(Of TParent, Object))
  fullName.vb: Expression(Of Func(Of TParent, System.Object))
  name.vb: Expression(Of Func(Of TParent, Object))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParent
    nameWithType: TParent
    fullName: TParent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParent
    nameWithType: TParent
    fullName: TParent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TParent
  name: TParent
  nameWithType: TParent
  fullName: TParent
- uid: Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.VB_InitManyToMany*
  commentId: Overload:MongoDB.Entities.Many`1.VB_InitManyToMany
  name: VB_InitManyToMany
  nameWithType: Many<TChild>.VB_InitManyToMany
  fullName: MongoDB.Entities.Many<TChild>.VB_InitManyToMany
  nameWithType.vb: Many(Of TChild).VB_InitManyToMany
  fullName.vb: MongoDB.Entities.Many(Of TChild).VB_InitManyToMany
- uid: Expression{Func{{TChild},System.Object}}
  commentId: '!:Expression{Func{``0,System.Object}}'
  definition: Expression`1
  name: Expression<Func<TChild, Object>>
  nameWithType: Expression<Func<TChild, Object>>
  fullName: Expression<Func<TChild, System.Object>>
  nameWithType.vb: Expression(Of Func(Of TChild, Object))
  fullName.vb: Expression(Of Func(Of TChild, System.Object))
  name.vb: Expression(Of Func(Of TChild, Object))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MongoDB.Entities.Many`1.JoinFluent*
  commentId: Overload:MongoDB.Entities.Many`1.JoinFluent
  name: JoinFluent
  nameWithType: Many<TChild>.JoinFluent
  fullName: MongoDB.Entities.Many<TChild>.JoinFluent
  nameWithType.vb: Many(Of TChild).JoinFluent
  fullName.vb: MongoDB.Entities.Many(Of TChild).JoinFluent
- uid: AggregateOptions
  isExternal: true
  name: AggregateOptions
  nameWithType: AggregateOptions
  fullName: AggregateOptions
- uid: IAggregateFluent{MongoDB.Entities.JoinRecord}
  commentId: '!:IAggregateFluent{MongoDB.Entities.JoinRecord}'
  definition: IAggregateFluent`1
  name: IAggregateFluent<JoinRecord>
  nameWithType: IAggregateFluent<JoinRecord>
  fullName: IAggregateFluent<MongoDB.Entities.JoinRecord>
  nameWithType.vb: IAggregateFluent(Of JoinRecord)
  fullName.vb: IAggregateFluent(Of MongoDB.Entities.JoinRecord)
  name.vb: IAggregateFluent(Of JoinRecord)
  spec.csharp:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: IAggregateFluent`1
  isExternal: true
  name: IAggregateFluent<>
  nameWithType: IAggregateFluent<>
  fullName: IAggregateFluent<>
  nameWithType.vb: IAggregateFluent(Of )
  fullName.vb: IAggregateFluent(Of )
  name.vb: IAggregateFluent(Of )
  spec.csharp:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.ParentsFluent*
  commentId: Overload:MongoDB.Entities.Many`1.ParentsFluent
  name: ParentsFluent
  nameWithType: Many<TChild>.ParentsFluent
  fullName: MongoDB.Entities.Many<TChild>.ParentsFluent
  nameWithType.vb: Many(Of TChild).ParentsFluent
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsFluent
- uid: IAggregateFluent{{TChild}}
  commentId: '!:IAggregateFluent{`0}'
  definition: IAggregateFluent`1
  name: IAggregateFluent<TChild>
  nameWithType: IAggregateFluent<TChild>
  fullName: IAggregateFluent<TChild>
  nameWithType.vb: IAggregateFluent(Of TChild)
  fullName.vb: IAggregateFluent(Of TChild)
  name.vb: IAggregateFluent(Of TChild)
  spec.csharp:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
- uid: IAggregateFluent{{TParent}}
  commentId: '!:IAggregateFluent{``0}'
  definition: IAggregateFluent`1
  name: IAggregateFluent<TParent>
  nameWithType: IAggregateFluent<TParent>
  fullName: IAggregateFluent<TParent>
  nameWithType.vb: IAggregateFluent(Of TParent)
  fullName.vb: IAggregateFluent(Of TParent)
  name.vb: IAggregateFluent(Of TParent)
  spec.csharp:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParent
    nameWithType: TParent
    fullName: TParent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParent
    nameWithType: TParent
    fullName: TParent
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.ChildrenFluent*
  commentId: Overload:MongoDB.Entities.Many`1.ChildrenFluent
  name: ChildrenFluent
  nameWithType: Many<TChild>.ChildrenFluent
  fullName: MongoDB.Entities.Many<TChild>.ChildrenFluent
  nameWithType.vb: Many(Of TChild).ChildrenFluent
  fullName.vb: MongoDB.Entities.Many(Of TChild).ChildrenFluent
- uid: MongoDB.Entities.Many`1.JoinQueryable*
  commentId: Overload:MongoDB.Entities.Many`1.JoinQueryable
  name: JoinQueryable
  nameWithType: Many<TChild>.JoinQueryable
  fullName: MongoDB.Entities.Many<TChild>.JoinQueryable
  nameWithType.vb: Many(Of TChild).JoinQueryable
  fullName.vb: MongoDB.Entities.Many(Of TChild).JoinQueryable
- uid: IMongoQueryable{MongoDB.Entities.JoinRecord}
  commentId: '!:IMongoQueryable{MongoDB.Entities.JoinRecord}'
  definition: IMongoQueryable`1
  name: IMongoQueryable<JoinRecord>
  nameWithType: IMongoQueryable<JoinRecord>
  fullName: IMongoQueryable<MongoDB.Entities.JoinRecord>
  nameWithType.vb: IMongoQueryable(Of JoinRecord)
  fullName.vb: IMongoQueryable(Of MongoDB.Entities.JoinRecord)
  name.vb: IMongoQueryable(Of JoinRecord)
  spec.csharp:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: IMongoQueryable`1
  isExternal: true
  name: IMongoQueryable<>
  nameWithType: IMongoQueryable<>
  fullName: IMongoQueryable<>
  nameWithType.vb: IMongoQueryable(Of )
  fullName.vb: IMongoQueryable(Of )
  name.vb: IMongoQueryable(Of )
  spec.csharp:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.ParentsQueryable*
  commentId: Overload:MongoDB.Entities.Many`1.ParentsQueryable
  name: ParentsQueryable
  nameWithType: Many<TChild>.ParentsQueryable
  fullName: MongoDB.Entities.Many<TChild>.ParentsQueryable
  nameWithType.vb: Many(Of TChild).ParentsQueryable
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsQueryable
- uid: IMongoQueryable{{TParent}}
  commentId: '!:IMongoQueryable{``0}'
  definition: IMongoQueryable`1
  name: IMongoQueryable<TParent>
  nameWithType: IMongoQueryable<TParent>
  fullName: IMongoQueryable<TParent>
  nameWithType.vb: IMongoQueryable(Of TParent)
  fullName.vb: IMongoQueryable(Of TParent)
  name.vb: IMongoQueryable(Of TParent)
  spec.csharp:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParent
    nameWithType: TParent
    fullName: TParent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParent
    nameWithType: TParent
    fullName: TParent
  - name: )
    nameWithType: )
    fullName: )
- uid: IMongoQueryable{{TChild}}
  commentId: '!:IMongoQueryable{`0}'
  definition: IMongoQueryable`1
  name: IMongoQueryable<TChild>
  nameWithType: IMongoQueryable<TChild>
  fullName: IMongoQueryable<TChild>
  nameWithType.vb: IMongoQueryable(Of TChild)
  fullName.vb: IMongoQueryable(Of TChild)
  name.vb: IMongoQueryable(Of TChild)
  spec.csharp:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.ChildrenQueryable*
  commentId: Overload:MongoDB.Entities.Many`1.ChildrenQueryable
  name: ChildrenQueryable
  nameWithType: Many<TChild>.ChildrenQueryable
  fullName: MongoDB.Entities.Many<TChild>.ChildrenQueryable
  nameWithType.vb: Many(Of TChild).ChildrenQueryable
  fullName.vb: MongoDB.Entities.Many(Of TChild).ChildrenQueryable
- uid: MongoDB.Entities.Many`1.GetEnumerator*
  commentId: Overload:MongoDB.Entities.Many`1.GetEnumerator
  name: GetEnumerator
  nameWithType: Many<TChild>.GetEnumerator
  fullName: MongoDB.Entities.Many<TChild>.GetEnumerator
  nameWithType.vb: Many(Of TChild).GetEnumerator
  fullName.vb: MongoDB.Entities.Many(Of TChild).GetEnumerator
- uid: IEnumerator{{TChild}}
  commentId: '!:IEnumerator{`0}'
  definition: IEnumerator`1
  name: IEnumerator<TChild>
  nameWithType: IEnumerator<TChild>
  fullName: IEnumerator<TChild>
  nameWithType.vb: IEnumerator(Of TChild)
  fullName.vb: IEnumerator(Of TChild)
  name.vb: IEnumerator(Of TChild)
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  commentId: '!:IEnumerator`1'
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullName.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.RemoveAsync*
  commentId: Overload:MongoDB.Entities.Many`1.RemoveAsync
  name: RemoveAsync
  nameWithType: Many<TChild>.RemoveAsync
  fullName: MongoDB.Entities.Many<TChild>.RemoveAsync
  nameWithType.vb: Many(Of TChild).RemoveAsync
  fullName.vb: MongoDB.Entities.Many(Of TChild).RemoveAsync
