### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.Many`1
  commentId: T:MongoDB.Entities.Many`1
  id: Many`1
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.Many`1.#ctor
  - MongoDB.Entities.Many`1.AddAsync(`0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - MongoDB.Entities.Many`1.AddAsync(System.Collections.Generic.IEnumerable{`0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - MongoDB.Entities.Many`1.AddAsync(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - MongoDB.Entities.Many`1.AddAsync(System.String,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - MongoDB.Entities.Many`1.ChildrenCountAsync(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.CountOptions,System.Threading.CancellationToken)
  - MongoDB.Entities.Many`1.ChildrenFluent(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  - MongoDB.Entities.Many`1.ChildrenQueryable(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  - MongoDB.Entities.Many`1.GetEnumerator
  - MongoDB.Entities.Many`1.JoinCollection
  - MongoDB.Entities.Many`1.JoinFluent(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  - MongoDB.Entities.Many`1.JoinQueryable(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  - MongoDB.Entities.Many`1.ParentsFluent``1(MongoDB.Driver.IAggregateFluent{`0})
  - MongoDB.Entities.Many`1.ParentsFluent``1(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  - MongoDB.Entities.Many`1.ParentsFluent``1(System.String,MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  - MongoDB.Entities.Many`1.ParentsQueryable``1(MongoDB.Driver.Linq.IMongoQueryable{`0},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  - MongoDB.Entities.Many`1.ParentsQueryable``1(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  - MongoDB.Entities.Many`1.ParentsQueryable``1(System.String,MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  - MongoDB.Entities.Many`1.RemoveAsync(`0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - MongoDB.Entities.Many`1.RemoveAsync(System.Collections.Generic.IEnumerable{`0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - MongoDB.Entities.Many`1.RemoveAsync(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - MongoDB.Entities.Many`1.RemoveAsync(System.String,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - MongoDB.Entities.Many`1.System#Collections#IEnumerable#GetEnumerator
  - MongoDB.Entities.Many`1.VB_InitManyToMany``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)
  - MongoDB.Entities.Many`1.VB_InitOneToMany``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  langs:
  - csharp
  - vb
  name: Many<TChild>
  nameWithType: Many<TChild>
  fullName: MongoDB.Entities.Many<TChild>
  type: Class
  source:
    id: Many
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 31
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents a one-to-many/many-to-many relationship between two Entities.\n<p>WARNING: You have to initialize all instances of this class before accessing any of it&apos;s members.</p>\n<p>Initialize from the constructor of the parent entity as follows:</p>\n<code>this.InitOneToMany(() => Property)</code>\n<code>this.InitManyToMany(() => Property, x => x.OtherProperty)</code>\n"
  example: []
  syntax:
    content: 'public class Many<TChild> : ManyBase, IEnumerable<TChild>, IEnumerable where TChild : IEntity'
    typeParameters:
    - id: TChild
      description: Type of the child IEntity.
    content.vb: >-
      Public Class Many(Of TChild As IEntity)
          Inherits ManyBase
          Implements IEnumerable(Of TChild), IEnumerable
  inheritance:
  - System.Object
  - MongoDB.Entities.ManyBase
  implements:
  - System.Collections.Generic.IEnumerable{{TChild}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.ToBatches``1(System.Int32)
  - System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.ToDocuments``1
  - System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.SaveAsync``1(MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.SaveOnlyAsync``1(System.Linq.Expressions.Expression{System.Func{{TChild},System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.SaveExceptAsync``1(System.Linq.Expressions.Expression{System.Func{{TChild},System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.DeleteAllAsync``1(MongoDB.Driver.IClientSessionHandle)
  - System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.SortByRelevance``1(System.String,System.Func{{TChild},System.String},System.Nullable{System.Int32})
  nameWithType.vb: Many(Of TChild)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MongoDB.Entities.Many(Of TChild)
  name.vb: Many(Of TChild)
- uid: MongoDB.Entities.Many`1.GetEnumerator
  commentId: M:MongoDB.Entities.Many`1.GetEnumerator
  id: GetEnumerator
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Many<TChild>.GetEnumerator()
  fullName: MongoDB.Entities.Many<TChild>.GetEnumerator()
  type: Method
  source:
    id: GetEnumerator
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 39
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  example: []
  syntax:
    content: public IEnumerator<TChild> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{{TChild}}
    content.vb: Public Function GetEnumerator As IEnumerator(Of TChild)
  overload: MongoDB.Entities.Many`1.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{{TChild}}.GetEnumerator
  nameWithType.vb: Many(Of TChild).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).GetEnumerator()
- uid: MongoDB.Entities.Many`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:MongoDB.Entities.Many`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: Many<TChild>.IEnumerable.GetEnumerator()
  fullName: MongoDB.Entities.Many<TChild>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    id: System.Collections.IEnumerable.GetEnumerator
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 42
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: MongoDB.Entities.Many`1.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Many(Of TChild).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: MongoDB.Entities.Many(Of TChild).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: MongoDB.Entities.Many`1.JoinCollection
  commentId: P:MongoDB.Entities.Many`1.JoinCollection
  id: JoinCollection
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: JoinCollection
  nameWithType: Many<TChild>.JoinCollection
  fullName: MongoDB.Entities.Many<TChild>.JoinCollection
  type: Property
  source:
    id: JoinCollection
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 48
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets the IMongoCollection of JoinRecords for this relationship.\n<p>TIP: Try never to use this unless really neccessary.</p>\n"
  example: []
  syntax:
    content: public IMongoCollection<JoinRecord> JoinCollection { get; }
    parameters: []
    return:
      type: MongoDB.Driver.IMongoCollection{MongoDB.Entities.JoinRecord}
    content.vb: Public ReadOnly Property JoinCollection As IMongoCollection(Of JoinRecord)
  overload: MongoDB.Entities.Many`1.JoinCollection*
  nameWithType.vb: Many(Of TChild).JoinCollection
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MongoDB.Entities.Many(Of TChild).JoinCollection
- uid: MongoDB.Entities.Many`1.JoinQueryable(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.JoinQueryable(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  id: JoinQueryable(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: JoinQueryable(IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.JoinQueryable(IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.JoinQueryable(MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  type: Method
  source:
    id: JoinQueryable
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 55
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAn IQueryable of JoinRecords for this relationship\n"
  example: []
  syntax:
    content: public IMongoQueryable<JoinRecord> JoinQueryable(IClientSessionHandle session = null, AggregateOptions options = null)
    parameters:
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: MongoDB.Driver.AggregateOptions
      description: An optional AggregateOptions object
    return:
      type: MongoDB.Driver.Linq.IMongoQueryable{MongoDB.Entities.JoinRecord}
    content.vb: Public Function JoinQueryable(session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IMongoQueryable(Of JoinRecord)
  overload: MongoDB.Entities.Many`1.JoinQueryable*
  nameWithType.vb: Many(Of TChild).JoinQueryable(IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).JoinQueryable(MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
- uid: MongoDB.Entities.Many`1.JoinFluent(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.JoinFluent(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  id: JoinFluent(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: JoinFluent(IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.JoinFluent(IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.JoinFluent(MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  type: Method
  source:
    id: JoinFluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 67
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAn IAggregateFluent of JoinRecords for this relationship\n"
  example: []
  syntax:
    content: public IAggregateFluent<JoinRecord> JoinFluent(IClientSessionHandle session = null, AggregateOptions options = null)
    parameters:
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: MongoDB.Driver.AggregateOptions
      description: An optional AggregateOptions object
    return:
      type: MongoDB.Driver.IAggregateFluent{MongoDB.Entities.JoinRecord}
    content.vb: Public Function JoinFluent(session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IAggregateFluent(Of JoinRecord)
  overload: MongoDB.Entities.Many`1.JoinFluent*
  nameWithType.vb: Many(Of TChild).JoinFluent(IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).JoinFluent(MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
- uid: MongoDB.Entities.Many`1.ParentsQueryable``1(System.String,MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ParentsQueryable``1(System.String,MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  id: ParentsQueryable``1(System.String,MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ParentsQueryable<TParent>(String, IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ParentsQueryable<TParent>(String, IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ParentsQueryable<TParent>(System.String, MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  type: Method
  source:
    id: ParentsQueryable
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 81
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet an IQueryable of parents matching a single child ID for this relationship.\n"
  example: []
  syntax:
    content: >-
      public IMongoQueryable<TParent> ParentsQueryable<TParent>(string childID, IClientSessionHandle session = null, AggregateOptions options = null)
          where TParent : IEntity
    parameters:
    - id: childID
      type: System.String
      description: A child ID
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: MongoDB.Driver.AggregateOptions
      description: An optional AggregateOptions object
    typeParameters:
    - id: TParent
      description: The type of the parent IEntity
    return:
      type: MongoDB.Driver.Linq.IMongoQueryable{{TParent}}
    content.vb: Public Function ParentsQueryable(Of TParent As IEntity)(childID As String, session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IMongoQueryable(Of TParent)
  overload: MongoDB.Entities.Many`1.ParentsQueryable*
  nameWithType.vb: Many(Of TChild).ParentsQueryable(Of TParent)(String, IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsQueryable(Of TParent)(System.String, MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  name.vb: ParentsQueryable(Of TParent)(String, IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.ParentsQueryable``1(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ParentsQueryable``1(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  id: ParentsQueryable``1(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ParentsQueryable<TParent>(IEnumerable<String>, IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ParentsQueryable<TParent>(IEnumerable<String>, IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ParentsQueryable<TParent>(System.Collections.Generic.IEnumerable<System.String>, MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  type: Method
  source:
    id: ParentsQueryable
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 93
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet an IQueryable of parents matching multiple child IDs for this relationship.\n"
  example: []
  syntax:
    content: >-
      public IMongoQueryable<TParent> ParentsQueryable<TParent>(IEnumerable<string> childIDs, IClientSessionHandle session = null, AggregateOptions options = null)
          where TParent : IEntity
    parameters:
    - id: childIDs
      type: System.Collections.Generic.IEnumerable{System.String}
      description: An IEnumerable of child IDs
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: MongoDB.Driver.AggregateOptions
      description: An optional AggregateOptions object
    typeParameters:
    - id: TParent
      description: The type of the parent IEntity
    return:
      type: MongoDB.Driver.Linq.IMongoQueryable{{TParent}}
    content.vb: Public Function ParentsQueryable(Of TParent As IEntity)(childIDs As IEnumerable(Of String), session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IMongoQueryable(Of TParent)
  overload: MongoDB.Entities.Many`1.ParentsQueryable*
  nameWithType.vb: Many(Of TChild).ParentsQueryable(Of TParent)(IEnumerable(Of String), IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsQueryable(Of TParent)(System.Collections.Generic.IEnumerable(Of System.String), MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  name.vb: ParentsQueryable(Of TParent)(IEnumerable(Of String), IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.ParentsQueryable``1(MongoDB.Driver.Linq.IMongoQueryable{`0},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ParentsQueryable``1(MongoDB.Driver.Linq.IMongoQueryable{`0},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  id: ParentsQueryable``1(MongoDB.Driver.Linq.IMongoQueryable{`0},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ParentsQueryable<TParent>(IMongoQueryable<TChild>, IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ParentsQueryable<TParent>(IMongoQueryable<TChild>, IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ParentsQueryable<TParent>(MongoDB.Driver.Linq.IMongoQueryable<TChild>, MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  type: Method
  source:
    id: ParentsQueryable
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 128
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet an IQueryable of parents matching a supplied IQueryable of children for this relationship.\n"
  example: []
  syntax:
    content: >-
      public IMongoQueryable<TParent> ParentsQueryable<TParent>(IMongoQueryable<TChild> children, IClientSessionHandle session = null, AggregateOptions options = null)
          where TParent : IEntity
    parameters:
    - id: children
      type: MongoDB.Driver.Linq.IMongoQueryable{{TChild}}
      description: An IQueryable of children
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: MongoDB.Driver.AggregateOptions
      description: An optional AggregateOptions object
    typeParameters:
    - id: TParent
      description: The type of the parent IEntity
    return:
      type: MongoDB.Driver.Linq.IMongoQueryable{{TParent}}
    content.vb: Public Function ParentsQueryable(Of TParent As IEntity)(children As IMongoQueryable(Of TChild), session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IMongoQueryable(Of TParent)
  overload: MongoDB.Entities.Many`1.ParentsQueryable*
  nameWithType.vb: Many(Of TChild).ParentsQueryable(Of TParent)(IMongoQueryable(Of TChild), IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsQueryable(Of TParent)(MongoDB.Driver.Linq.IMongoQueryable(Of TChild), MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  name.vb: ParentsQueryable(Of TParent)(IMongoQueryable(Of TChild), IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.ParentsFluent``1(MongoDB.Driver.IAggregateFluent{`0})
  commentId: M:MongoDB.Entities.Many`1.ParentsFluent``1(MongoDB.Driver.IAggregateFluent{`0})
  id: ParentsFluent``1(MongoDB.Driver.IAggregateFluent{`0})
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ParentsFluent<TParent>(IAggregateFluent<TChild>)
  nameWithType: Many<TChild>.ParentsFluent<TParent>(IAggregateFluent<TChild>)
  fullName: MongoDB.Entities.Many<TChild>.ParentsFluent<TParent>(MongoDB.Driver.IAggregateFluent<TChild>)
  type: Method
  source:
    id: ParentsFluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 169
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet an IAggregateFluent of parents matching a supplied IAggregateFluent of children for this relationship.\n"
  example: []
  syntax:
    content: >-
      public IAggregateFluent<TParent> ParentsFluent<TParent>(IAggregateFluent<TChild> children)
          where TParent : IEntity
    parameters:
    - id: children
      type: MongoDB.Driver.IAggregateFluent{{TChild}}
      description: An IAggregateFluent of children
    typeParameters:
    - id: TParent
      description: The type of the parent IEntity
    return:
      type: MongoDB.Driver.IAggregateFluent{{TParent}}
    content.vb: Public Function ParentsFluent(Of TParent As IEntity)(children As IAggregateFluent(Of TChild)) As IAggregateFluent(Of TParent)
  overload: MongoDB.Entities.Many`1.ParentsFluent*
  nameWithType.vb: Many(Of TChild).ParentsFluent(Of TParent)(IAggregateFluent(Of TChild))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsFluent(Of TParent)(MongoDB.Driver.IAggregateFluent(Of TChild))
  name.vb: ParentsFluent(Of TParent)(IAggregateFluent(Of TChild))
- uid: MongoDB.Entities.Many`1.ParentsFluent``1(System.String,MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ParentsFluent``1(System.String,MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  id: ParentsFluent``1(System.String,MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ParentsFluent<TParent>(String, IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ParentsFluent<TParent>(String, IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ParentsFluent<TParent>(System.String, MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  type: Method
  source:
    id: ParentsFluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 216
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet an IAggregateFluent of parents matching a single child ID for this relationship.\n"
  example: []
  syntax:
    content: >-
      public IAggregateFluent<TParent> ParentsFluent<TParent>(string childID, IClientSessionHandle session = null, AggregateOptions options = null)
          where TParent : IEntity
    parameters:
    - id: childID
      type: System.String
      description: An child ID
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: MongoDB.Driver.AggregateOptions
      description: An optional AggregateOptions object
    typeParameters:
    - id: TParent
      description: The type of the parent IEntity
    return:
      type: MongoDB.Driver.IAggregateFluent{{TParent}}
    content.vb: Public Function ParentsFluent(Of TParent As IEntity)(childID As String, session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IAggregateFluent(Of TParent)
  overload: MongoDB.Entities.Many`1.ParentsFluent*
  nameWithType.vb: Many(Of TChild).ParentsFluent(Of TParent)(String, IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsFluent(Of TParent)(System.String, MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  name.vb: ParentsFluent(Of TParent)(String, IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.ParentsFluent``1(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ParentsFluent``1(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  id: ParentsFluent``1(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ParentsFluent<TParent>(IEnumerable<String>, IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ParentsFluent<TParent>(IEnumerable<String>, IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ParentsFluent<TParent>(System.Collections.Generic.IEnumerable<System.String>, MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  type: Method
  source:
    id: ParentsFluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 228
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet an IAggregateFluent of parents matching multiple child IDs for this relationship.\n"
  example: []
  syntax:
    content: >-
      public IAggregateFluent<TParent> ParentsFluent<TParent>(IEnumerable<string> childIDs, IClientSessionHandle session = null, AggregateOptions options = null)
          where TParent : IEntity
    parameters:
    - id: childIDs
      type: System.Collections.Generic.IEnumerable{System.String}
      description: An IEnumerable of child IDs
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: MongoDB.Driver.AggregateOptions
      description: An optional AggregateOptions object
    typeParameters:
    - id: TParent
      description: The type of the parent IEntity
    return:
      type: MongoDB.Driver.IAggregateFluent{{TParent}}
    content.vb: Public Function ParentsFluent(Of TParent As IEntity)(childIDs As IEnumerable(Of String), session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IAggregateFluent(Of TParent)
  overload: MongoDB.Entities.Many`1.ParentsFluent*
  nameWithType.vb: Many(Of TChild).ParentsFluent(Of TParent)(IEnumerable(Of String), IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsFluent(Of TParent)(System.Collections.Generic.IEnumerable(Of System.String), MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  name.vb: ParentsFluent(Of TParent)(IEnumerable(Of String), IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Many`1.ChildrenCountAsync(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.CountOptions,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.ChildrenCountAsync(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.CountOptions,System.Threading.CancellationToken)
  id: ChildrenCountAsync(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.CountOptions,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ChildrenCountAsync(IClientSessionHandle, CountOptions, CancellationToken)
  nameWithType: Many<TChild>.ChildrenCountAsync(IClientSessionHandle, CountOptions, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.ChildrenCountAsync(MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.CountOptions, System.Threading.CancellationToken)
  type: Method
  source:
    id: ChildrenCountAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 264
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGet the number of children for a relationship\n"
  example: []
  syntax:
    content: public Task<long> ChildrenCountAsync(IClientSessionHandle session = null, CountOptions options = null, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: MongoDB.Driver.CountOptions
      description: An optional AggregateOptions object
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Int64}
    content.vb: Public Function ChildrenCountAsync(session As IClientSessionHandle = Nothing, options As CountOptions = Nothing, cancellation As CancellationToken = Nothing) As Task(Of Long)
  overload: MongoDB.Entities.Many`1.ChildrenCountAsync*
  nameWithType.vb: Many(Of TChild).ChildrenCountAsync(IClientSessionHandle, CountOptions, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ChildrenCountAsync(MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.CountOptions, System.Threading.CancellationToken)
- uid: MongoDB.Entities.Many`1.ChildrenQueryable(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ChildrenQueryable(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  id: ChildrenQueryable(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ChildrenQueryable(IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ChildrenQueryable(IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ChildrenQueryable(MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  type: Method
  source:
    id: ChildrenQueryable
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 287
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAn IQueryable of child Entities for the parent.\n"
  example: []
  syntax:
    content: public IMongoQueryable<TChild> ChildrenQueryable(IClientSessionHandle session = null, AggregateOptions options = null)
    parameters:
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: MongoDB.Driver.AggregateOptions
      description: An optional AggregateOptions object
    return:
      type: MongoDB.Driver.Linq.IMongoQueryable{{TChild}}
    content.vb: Public Function ChildrenQueryable(session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IMongoQueryable(Of TChild)
  overload: MongoDB.Entities.Many`1.ChildrenQueryable*
  nameWithType.vb: Many(Of TChild).ChildrenQueryable(IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ChildrenQueryable(MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
- uid: MongoDB.Entities.Many`1.ChildrenFluent(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  commentId: M:MongoDB.Entities.Many`1.ChildrenFluent(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  id: ChildrenFluent(MongoDB.Driver.IClientSessionHandle,MongoDB.Driver.AggregateOptions)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: ChildrenFluent(IClientSessionHandle, AggregateOptions)
  nameWithType: Many<TChild>.ChildrenFluent(IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Many<TChild>.ChildrenFluent(MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
  type: Method
  source:
    id: ChildrenFluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 318
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAn IAggregateFluent of child Entities for the parent.\n"
  example: []
  syntax:
    content: public IAggregateFluent<TChild> ChildrenFluent(IClientSessionHandle session = null, AggregateOptions options = null)
    parameters:
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: MongoDB.Driver.AggregateOptions
      description: An optional AggregateOptions object
    return:
      type: MongoDB.Driver.IAggregateFluent{{TChild}}
    content.vb: Public Function ChildrenFluent(session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IAggregateFluent(Of TChild)
  overload: MongoDB.Entities.Many`1.ChildrenFluent*
  nameWithType.vb: Many(Of TChild).ChildrenFluent(IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).ChildrenFluent(MongoDB.Driver.IClientSessionHandle, MongoDB.Driver.AggregateOptions)
- uid: MongoDB.Entities.Many`1.#ctor
  commentId: M:MongoDB.Entities.Many`1.#ctor
  id: '#ctor'
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: Many()
  nameWithType: Many<TChild>.Many()
  fullName: MongoDB.Entities.Many<TChild>.Many()
  type: Constructor
  source:
    id: .ctor
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 350
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nCreates an instance of Many&lt;TChild> \nThis is only needed in VB.Net\n"
  example: []
  syntax:
    content: public Many()
    content.vb: Public Sub New
  overload: MongoDB.Entities.Many`1.#ctor*
  nameWithType.vb: Many(Of TChild).Many()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).Many()
- uid: MongoDB.Entities.Many`1.VB_InitOneToMany``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Many`1.VB_InitOneToMany``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: VB_InitOneToMany``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: VB_InitOneToMany<TParent>(TParent, Expression<Func<TParent, Object>>)
  nameWithType: Many<TChild>.VB_InitOneToMany<TParent>(TParent, Expression<Func<TParent, Object>>)
  fullName: MongoDB.Entities.Many<TChild>.VB_InitOneToMany<TParent>(TParent, System.Linq.Expressions.Expression<System.Func<TParent, System.Object>>)
  type: Method
  source:
    id: VB_InitOneToMany
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 374
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nUse this method to initialize the Many&lt;TChild> properties with VB.Net\n"
  example: []
  syntax:
    content: >-
      public void VB_InitOneToMany<TParent>(TParent parent, Expression<Func<TParent, object>> property)
          where TParent : IEntity
    parameters:
    - id: parent
      type: '{TParent}'
      description: The parent entity instance
    - id: property
      type: System.Linq.Expressions.Expression{System.Func{{TParent},System.Object}}
      description: Function(x) x.PropName
    typeParameters:
    - id: TParent
      description: The type of the parent
    content.vb: Public Sub VB_InitOneToMany(Of TParent As IEntity)(parent As TParent, property As Expression(Of Func(Of TParent, Object)))
  overload: MongoDB.Entities.Many`1.VB_InitOneToMany*
  nameWithType.vb: Many(Of TChild).VB_InitOneToMany(Of TParent)(TParent, Expression(Of Func(Of TParent, Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).VB_InitOneToMany(Of TParent)(TParent, System.Linq.Expressions.Expression(Of System.Func(Of TParent, System.Object)))
  name.vb: VB_InitOneToMany(Of TParent)(TParent, Expression(Of Func(Of TParent, Object)))
- uid: MongoDB.Entities.Many`1.VB_InitManyToMany``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)
  commentId: M:MongoDB.Entities.Many`1.VB_InitManyToMany``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)
  id: VB_InitManyToMany``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: VB_InitManyToMany<TParent>(TParent, Expression<Func<TParent, Object>>, Expression<Func<TChild, Object>>, Boolean)
  nameWithType: Many<TChild>.VB_InitManyToMany<TParent>(TParent, Expression<Func<TParent, Object>>, Expression<Func<TChild, Object>>, Boolean)
  fullName: MongoDB.Entities.Many<TChild>.VB_InitManyToMany<TParent>(TParent, System.Linq.Expressions.Expression<System.Func<TParent, System.Object>>, System.Linq.Expressions.Expression<System.Func<TChild, System.Object>>, System.Boolean)
  type: Method
  source:
    id: VB_InitManyToMany
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 409
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nUse this method to initialize the Many&lt;TChild> properties with VB.Net\n"
  example: []
  syntax:
    content: >-
      public void VB_InitManyToMany<TParent>(TParent parent, Expression<Func<TParent, object>> propertyParent, Expression<Func<TChild, object>> propertyChild, bool isInverse)
          where TParent : IEntity
    parameters:
    - id: parent
      type: '{TParent}'
      description: The parent entity instance
    - id: propertyParent
      type: System.Linq.Expressions.Expression{System.Func{{TParent},System.Object}}
      description: Function(x) x.ParentProp
    - id: propertyChild
      type: System.Linq.Expressions.Expression{System.Func{{TChild},System.Object}}
      description: Function(x) x.ChildProp
    - id: isInverse
      type: System.Boolean
      description: Specify if this is the inverse side of the relationship or not
    typeParameters:
    - id: TParent
      description: The type of the parent
    content.vb: Public Sub VB_InitManyToMany(Of TParent As IEntity)(parent As TParent, propertyParent As Expression(Of Func(Of TParent, Object)), propertyChild As Expression(Of Func(Of TChild, Object)), isInverse As Boolean)
  overload: MongoDB.Entities.Many`1.VB_InitManyToMany*
  nameWithType.vb: Many(Of TChild).VB_InitManyToMany(Of TParent)(TParent, Expression(Of Func(Of TParent, Object)), Expression(Of Func(Of TChild, Object)), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).VB_InitManyToMany(Of TParent)(TParent, System.Linq.Expressions.Expression(Of System.Func(Of TParent, System.Object)), System.Linq.Expressions.Expression(Of System.Func(Of TChild, System.Object)), System.Boolean)
  name.vb: VB_InitManyToMany(Of TParent)(TParent, Expression(Of Func(Of TParent, Object)), Expression(Of Func(Of TChild, Object)), Boolean)
- uid: MongoDB.Entities.Many`1.AddAsync(`0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.AddAsync(`0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  id: AddAsync(`0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: AddAsync(TChild, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.AddAsync(TChild, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.AddAsync(TChild, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  type: Method
  source:
    id: AddAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 453
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAdds a new child reference.\n<p>WARNING: Make sure to save the parent and child Entities before calling this method.</p>\n"
  example: []
  syntax:
    content: public Task AddAsync(TChild child, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: child
      type: '{TChild}'
      description: The child Entity to add.
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function AddAsync(child As TChild, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.AddAsync*
  nameWithType.vb: Many(Of TChild).AddAsync(TChild, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).AddAsync(TChild, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
- uid: MongoDB.Entities.Many`1.AddAsync(System.Collections.Generic.IEnumerable{`0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.AddAsync(System.Collections.Generic.IEnumerable{`0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  id: AddAsync(System.Collections.Generic.IEnumerable{`0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: AddAsync(IEnumerable<TChild>, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.AddAsync(IEnumerable<TChild>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.AddAsync(System.Collections.Generic.IEnumerable<TChild>, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  type: Method
  source:
    id: AddAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 465
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAdds multiple child references in a single bulk operation\n<p>WARNING: Make sure to save the parent and child Entities before calling this method.</p>\n"
  example: []
  syntax:
    content: public Task AddAsync(IEnumerable<TChild> children, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: children
      type: System.Collections.Generic.IEnumerable{{TChild}}
      description: The child Entities to add
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function AddAsync(children As IEnumerable(Of TChild), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.AddAsync*
  nameWithType.vb: Many(Of TChild).AddAsync(IEnumerable(Of TChild), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).AddAsync(System.Collections.Generic.IEnumerable(Of TChild), MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  name.vb: AddAsync(IEnumerable(Of TChild), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Many`1.AddAsync(System.String,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.AddAsync(System.String,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  id: AddAsync(System.String,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: AddAsync(String, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.AddAsync(String, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.AddAsync(System.String, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  type: Method
  source:
    id: AddAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 477
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAdds a new child reference.\n<p>WARNING: Make sure to save the parent and child Entities before calling this method.</p>\n"
  example: []
  syntax:
    content: public Task AddAsync(string childID, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: childID
      type: System.String
      description: The ID of the child Entity to add.
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function AddAsync(childID As String, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.AddAsync*
  nameWithType.vb: Many(Of TChild).AddAsync(String, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).AddAsync(System.String, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
- uid: MongoDB.Entities.Many`1.AddAsync(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.AddAsync(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  id: AddAsync(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: AddAsync(IEnumerable<String>, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.AddAsync(IEnumerable<String>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.AddAsync(System.Collections.Generic.IEnumerable<System.String>, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  type: Method
  source:
    id: AddAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 489
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAdds multiple child references in a single bulk operation\n<p>WARNING: Make sure to save the parent and child Entities before calling this method.</p>\n"
  example: []
  syntax:
    content: public Task AddAsync(IEnumerable<string> childIDs, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: childIDs
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The IDs of the child Entities to add.
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function AddAsync(childIDs As IEnumerable(Of String), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.AddAsync*
  nameWithType.vb: Many(Of TChild).AddAsync(IEnumerable(Of String), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).AddAsync(System.Collections.Generic.IEnumerable(Of System.String), MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  name.vb: AddAsync(IEnumerable(Of String), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Many`1.RemoveAsync(`0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.RemoveAsync(`0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  id: RemoveAsync(`0,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: RemoveAsync(TChild, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.RemoveAsync(TChild, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.RemoveAsync(TChild, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  type: Method
  source:
    id: RemoveAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 523
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRemoves a child reference.\n"
  example: []
  syntax:
    content: public Task RemoveAsync(TChild child, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: child
      type: '{TChild}'
      description: The child IEntity to remove the reference of.
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RemoveAsync(child As TChild, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.RemoveAsync*
  nameWithType.vb: Many(Of TChild).RemoveAsync(TChild, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).RemoveAsync(TChild, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
- uid: MongoDB.Entities.Many`1.RemoveAsync(System.String,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.RemoveAsync(System.String,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  id: RemoveAsync(System.String,MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: RemoveAsync(String, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.RemoveAsync(String, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.RemoveAsync(System.String, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  type: Method
  source:
    id: RemoveAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 534
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRemoves a child reference.\n"
  example: []
  syntax:
    content: public Task RemoveAsync(string childID, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: childID
      type: System.String
      description: The ID of the child Entity to remove the reference of.
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RemoveAsync(childID As String, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.RemoveAsync*
  nameWithType.vb: Many(Of TChild).RemoveAsync(String, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).RemoveAsync(System.String, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
- uid: MongoDB.Entities.Many`1.RemoveAsync(System.Collections.Generic.IEnumerable{`0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.RemoveAsync(System.Collections.Generic.IEnumerable{`0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  id: RemoveAsync(System.Collections.Generic.IEnumerable{`0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: RemoveAsync(IEnumerable<TChild>, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.RemoveAsync(IEnumerable<TChild>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.RemoveAsync(System.Collections.Generic.IEnumerable<TChild>, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  type: Method
  source:
    id: RemoveAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 545
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRemoves child references.\n"
  example: []
  syntax:
    content: public Task RemoveAsync(IEnumerable<TChild> children, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: children
      type: System.Collections.Generic.IEnumerable{{TChild}}
      description: The child Entities to remove the references of.
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RemoveAsync(children As IEnumerable(Of TChild), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.RemoveAsync*
  nameWithType.vb: Many(Of TChild).RemoveAsync(IEnumerable(Of TChild), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).RemoveAsync(System.Collections.Generic.IEnumerable(Of TChild), MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  name.vb: RemoveAsync(IEnumerable(Of TChild), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Many`1.RemoveAsync(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Many`1.RemoveAsync(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  id: RemoveAsync(System.Collections.Generic.IEnumerable{System.String},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Many`1
  langs:
  - csharp
  - vb
  name: RemoveAsync(IEnumerable<String>, IClientSessionHandle, CancellationToken)
  nameWithType: Many<TChild>.RemoveAsync(IEnumerable<String>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Many<TChild>.RemoveAsync(System.Collections.Generic.IEnumerable<System.String>, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  type: Method
  source:
    id: RemoveAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\Many.cs
    startLine: 556
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRemoves child references.\n"
  example: []
  syntax:
    content: public Task RemoveAsync(IEnumerable<string> childIDs, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: childIDs
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The IDs of the child Entities to remove the references of
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RemoveAsync(childIDs As IEnumerable(Of String), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Many`1.RemoveAsync*
  nameWithType.vb: Many(Of TChild).RemoveAsync(IEnumerable(Of String), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Many(Of TChild).RemoveAsync(System.Collections.Generic.IEnumerable(Of System.String), MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  name.vb: RemoveAsync(IEnumerable(Of String), IClientSessionHandle, CancellationToken)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MongoDB.Entities.ManyBase
  commentId: T:MongoDB.Entities.ManyBase
  parent: MongoDB.Entities
  name: ManyBase
  nameWithType: ManyBase
  fullName: MongoDB.Entities.ManyBase
- uid: System.Collections.Generic.IEnumerable{{TChild}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TChild>
  nameWithType: IEnumerable<TChild>
  fullName: System.Collections.Generic.IEnumerable<TChild>
  nameWithType.vb: IEnumerable(Of TChild)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TChild)
  name.vb: IEnumerable(Of TChild)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.ToBatches``1(System.Int32)
  commentId: M:MongoDB.Entities.Extensions.ToBatches``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.ToBatches``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: ToBatches<TChild>(Int32)
  nameWithType: Extensions.ToBatches<TChild>(Int32)
  fullName: MongoDB.Entities.Extensions.ToBatches<TChild>(System.Int32)
  nameWithType.vb: Extensions.ToBatches(Of TChild)(Int32)
  fullName.vb: MongoDB.Entities.Extensions.ToBatches(Of TChild)(System.Int32)
  name.vb: ToBatches(Of TChild)(Int32)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.ToBatches``1(System.Int32)
    name: ToBatches<TChild>
    nameWithType: Extensions.ToBatches<TChild>
    fullName: MongoDB.Entities.Extensions.ToBatches<TChild>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.ToBatches``1(System.Int32)
    name: ToBatches(Of TChild)
    nameWithType: Extensions.ToBatches(Of TChild)
    fullName: MongoDB.Entities.Extensions.ToBatches(Of TChild)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.ToDocuments``1
  commentId: M:MongoDB.Entities.Extensions.ToDocuments``1(System.Collections.Generic.IEnumerable{``0})
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.ToDocuments``1(System.Collections.Generic.IEnumerable{``0})
  name: ToDocuments<TChild>()
  nameWithType: Extensions.ToDocuments<TChild>()
  fullName: MongoDB.Entities.Extensions.ToDocuments<TChild>()
  nameWithType.vb: Extensions.ToDocuments(Of TChild)()
  fullName.vb: MongoDB.Entities.Extensions.ToDocuments(Of TChild)()
  name.vb: ToDocuments(Of TChild)()
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.ToDocuments``1
    name: ToDocuments<TChild>
    nameWithType: Extensions.ToDocuments<TChild>
    fullName: MongoDB.Entities.Extensions.ToDocuments<TChild>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.ToDocuments``1
    name: ToDocuments(Of TChild)
    nameWithType: Extensions.ToDocuments(Of TChild)
    fullName: MongoDB.Entities.Extensions.ToDocuments(Of TChild)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.SaveAsync``1(MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.SaveAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  name: SaveAsync<TChild>(IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveAsync<TChild>(IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveAsync<TChild>(MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SaveAsync(Of TChild)(IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SaveAsync(Of TChild)(MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  name.vb: SaveAsync(Of TChild)(IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SaveAsync``1(MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
    name: SaveAsync<TChild>
    nameWithType: Extensions.SaveAsync<TChild>
    fullName: MongoDB.Entities.Extensions.SaveAsync<TChild>
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SaveAsync``1(MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
    name: SaveAsync(Of TChild)
    nameWithType: Extensions.SaveAsync(Of TChild)
    fullName: MongoDB.Entities.Extensions.SaveAsync(Of TChild)
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.SaveOnlyAsync``1(System.Linq.Expressions.Expression{System.Func{{TChild},System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveOnlyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.SaveOnlyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  name: SaveOnlyAsync<TChild>(Expression<Func<TChild, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveOnlyAsync<TChild>(Expression<Func<TChild, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveOnlyAsync<TChild>(System.Linq.Expressions.Expression<System.Func<TChild, System.Object>>, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SaveOnlyAsync(Of TChild)(Expression(Of Func(Of TChild, Object)), IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SaveOnlyAsync(Of TChild)(System.Linq.Expressions.Expression(Of System.Func(Of TChild, System.Object)), MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  name.vb: SaveOnlyAsync(Of TChild)(Expression(Of Func(Of TChild, Object)), IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SaveOnlyAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
    name: SaveOnlyAsync<TChild>
    nameWithType: Extensions.SaveOnlyAsync<TChild>
    fullName: MongoDB.Entities.Extensions.SaveOnlyAsync<TChild>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SaveOnlyAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
    name: SaveOnlyAsync(Of TChild)
    nameWithType: Extensions.SaveOnlyAsync(Of TChild)
    fullName: MongoDB.Entities.Extensions.SaveOnlyAsync(Of TChild)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.SaveExceptAsync``1(System.Linq.Expressions.Expression{System.Func{{TChild},System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveExceptAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.SaveExceptAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  name: SaveExceptAsync<TChild>(Expression<Func<TChild, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveExceptAsync<TChild>(Expression<Func<TChild, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveExceptAsync<TChild>(System.Linq.Expressions.Expression<System.Func<TChild, System.Object>>, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SaveExceptAsync(Of TChild)(Expression(Of Func(Of TChild, Object)), IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SaveExceptAsync(Of TChild)(System.Linq.Expressions.Expression(Of System.Func(Of TChild, System.Object)), MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  name.vb: SaveExceptAsync(Of TChild)(Expression(Of Func(Of TChild, Object)), IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SaveExceptAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
    name: SaveExceptAsync<TChild>
    nameWithType: Extensions.SaveExceptAsync<TChild>
    fullName: MongoDB.Entities.Extensions.SaveExceptAsync<TChild>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SaveExceptAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
    name: SaveExceptAsync(Of TChild)
    nameWithType: Extensions.SaveExceptAsync(Of TChild)
    fullName: MongoDB.Entities.Extensions.SaveExceptAsync(Of TChild)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.DeleteAllAsync``1(MongoDB.Driver.IClientSessionHandle)
  commentId: M:MongoDB.Entities.Extensions.DeleteAllAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.DeleteAllAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle)
  name: DeleteAllAsync<TChild>(IClientSessionHandle)
  nameWithType: Extensions.DeleteAllAsync<TChild>(IClientSessionHandle)
  fullName: MongoDB.Entities.Extensions.DeleteAllAsync<TChild>(MongoDB.Driver.IClientSessionHandle)
  nameWithType.vb: Extensions.DeleteAllAsync(Of TChild)(IClientSessionHandle)
  fullName.vb: MongoDB.Entities.Extensions.DeleteAllAsync(Of TChild)(MongoDB.Driver.IClientSessionHandle)
  name.vb: DeleteAllAsync(Of TChild)(IClientSessionHandle)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.DeleteAllAsync``1(MongoDB.Driver.IClientSessionHandle)
    name: DeleteAllAsync<TChild>
    nameWithType: Extensions.DeleteAllAsync<TChild>
    fullName: MongoDB.Entities.Extensions.DeleteAllAsync<TChild>
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.DeleteAllAsync``1(MongoDB.Driver.IClientSessionHandle)
    name: DeleteAllAsync(Of TChild)
    nameWithType: Extensions.DeleteAllAsync(Of TChild)
    fullName: MongoDB.Entities.Extensions.DeleteAllAsync(Of TChild)
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{`0}.MongoDB.Entities.Extensions.SortByRelevance``1(System.String,System.Func{{TChild},System.String},System.Nullable{System.Int32})
  commentId: M:MongoDB.Entities.Extensions.SortByRelevance``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String},System.Nullable{System.Int32})
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.SortByRelevance``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String},System.Nullable{System.Int32})
  name: SortByRelevance<TChild>(String, Func<TChild, String>, Nullable<Int32>)
  nameWithType: Extensions.SortByRelevance<TChild>(String, Func<TChild, String>, Nullable<Int32>)
  fullName: MongoDB.Entities.Extensions.SortByRelevance<TChild>(System.String, System.Func<TChild, System.String>, System.Nullable<System.Int32>)
  nameWithType.vb: Extensions.SortByRelevance(Of TChild)(String, Func(Of TChild, String), Nullable(Of Int32))
  fullName.vb: MongoDB.Entities.Extensions.SortByRelevance(Of TChild)(System.String, System.Func(Of TChild, System.String), System.Nullable(Of System.Int32))
  name.vb: SortByRelevance(Of TChild)(String, Func(Of TChild, String), Nullable(Of Int32))
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SortByRelevance``1(System.String,System.Func{``0,System.String},System.Nullable{System.Int32})
    name: SortByRelevance<TChild>
    nameWithType: Extensions.SortByRelevance<TChild>
    fullName: MongoDB.Entities.Extensions.SortByRelevance<TChild>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SortByRelevance``1(System.String,System.Func{``0,System.String},System.Nullable{System.Int32})
    name: SortByRelevance(Of TChild)
    nameWithType: Extensions.SortByRelevance(Of TChild)
    fullName: MongoDB.Entities.Extensions.SortByRelevance(Of TChild)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: MongoDB.Entities.Extensions.ToBatches``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:MongoDB.Entities.Extensions.ToBatches``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: ToBatches<T>(IEnumerable<T>, Int32)
  nameWithType: Extensions.ToBatches<T>(IEnumerable<T>, Int32)
  fullName: MongoDB.Entities.Extensions.ToBatches<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  nameWithType.vb: Extensions.ToBatches(Of T)(IEnumerable(Of T), Int32)
  fullName.vb: MongoDB.Entities.Extensions.ToBatches(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: ToBatches(Of T)(IEnumerable(Of T), Int32)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.ToBatches``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ToBatches<T>
    nameWithType: Extensions.ToBatches<T>
    fullName: MongoDB.Entities.Extensions.ToBatches<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.ToBatches``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ToBatches(Of T)
    nameWithType: Extensions.ToBatches(Of T)
    fullName: MongoDB.Entities.Extensions.ToBatches(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions
  commentId: T:MongoDB.Entities.Extensions
  parent: MongoDB.Entities
  name: Extensions
  nameWithType: Extensions
  fullName: MongoDB.Entities.Extensions
- uid: MongoDB.Entities.Extensions.ToDocuments``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:MongoDB.Entities.Extensions.ToDocuments``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: ToDocuments<T>(IEnumerable<T>)
  nameWithType: Extensions.ToDocuments<T>(IEnumerable<T>)
  fullName: MongoDB.Entities.Extensions.ToDocuments<T>(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: Extensions.ToDocuments(Of T)(IEnumerable(Of T))
  fullName.vb: MongoDB.Entities.Extensions.ToDocuments(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ToDocuments(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.ToDocuments``1(System.Collections.Generic.IEnumerable{``0})
    name: ToDocuments<T>
    nameWithType: Extensions.ToDocuments<T>
    fullName: MongoDB.Entities.Extensions.ToDocuments<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.ToDocuments``1(System.Collections.Generic.IEnumerable{``0})
    name: ToDocuments(Of T)
    nameWithType: Extensions.ToDocuments(Of T)
    fullName: MongoDB.Entities.Extensions.ToDocuments(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.SaveAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  isExternal: true
  name: SaveAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveAsync<T>(System.Collections.Generic.IEnumerable<T>, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SaveAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SaveAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  name.vb: SaveAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SaveAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
    name: SaveAsync<T>
    nameWithType: Extensions.SaveAsync<T>
    fullName: MongoDB.Entities.Extensions.SaveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SaveAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
    name: SaveAsync(Of T)
    nameWithType: Extensions.SaveAsync(Of T)
    fullName: MongoDB.Entities.Extensions.SaveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.SaveOnlyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveOnlyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  isExternal: true
  name: SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveOnlyAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SaveOnlyAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SaveOnlyAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  name.vb: SaveOnlyAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SaveOnlyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
    name: SaveOnlyAsync<T>
    nameWithType: Extensions.SaveOnlyAsync<T>
    fullName: MongoDB.Entities.Extensions.SaveOnlyAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SaveOnlyAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
    name: SaveOnlyAsync(Of T)
    nameWithType: Extensions.SaveOnlyAsync(Of T)
    fullName: MongoDB.Entities.Extensions.SaveOnlyAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.SaveExceptAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveExceptAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  isExternal: true
  name: SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveExceptAsync<T>(System.Collections.Generic.IEnumerable<T>, System.Linq.Expressions.Expression<System.Func<T, System.Object>>, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  nameWithType.vb: Extensions.SaveExceptAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SaveExceptAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  name.vb: SaveExceptAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SaveExceptAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
    name: SaveExceptAsync<T>
    nameWithType: Extensions.SaveExceptAsync<T>
    fullName: MongoDB.Entities.Extensions.SaveExceptAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SaveExceptAsync``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
    name: SaveExceptAsync(Of T)
    nameWithType: Extensions.SaveExceptAsync(Of T)
    fullName: MongoDB.Entities.Extensions.SaveExceptAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.DeleteAllAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle)
  commentId: M:MongoDB.Entities.Extensions.DeleteAllAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle)
  isExternal: true
  name: DeleteAllAsync<T>(IEnumerable<T>, IClientSessionHandle)
  nameWithType: Extensions.DeleteAllAsync<T>(IEnumerable<T>, IClientSessionHandle)
  fullName: MongoDB.Entities.Extensions.DeleteAllAsync<T>(System.Collections.Generic.IEnumerable<T>, MongoDB.Driver.IClientSessionHandle)
  nameWithType.vb: Extensions.DeleteAllAsync(Of T)(IEnumerable(Of T), IClientSessionHandle)
  fullName.vb: MongoDB.Entities.Extensions.DeleteAllAsync(Of T)(System.Collections.Generic.IEnumerable(Of T), MongoDB.Driver.IClientSessionHandle)
  name.vb: DeleteAllAsync(Of T)(IEnumerable(Of T), IClientSessionHandle)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.DeleteAllAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle)
    name: DeleteAllAsync<T>
    nameWithType: Extensions.DeleteAllAsync<T>
    fullName: MongoDB.Entities.Extensions.DeleteAllAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.DeleteAllAsync``1(System.Collections.Generic.IEnumerable{``0},MongoDB.Driver.IClientSessionHandle)
    name: DeleteAllAsync(Of T)
    nameWithType: Extensions.DeleteAllAsync(Of T)
    fullName: MongoDB.Entities.Extensions.DeleteAllAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: MongoDB.Driver.IClientSessionHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.SortByRelevance``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String},System.Nullable{System.Int32})
  commentId: M:MongoDB.Entities.Extensions.SortByRelevance``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String},System.Nullable{System.Int32})
  isExternal: true
  name: SortByRelevance<T>(IEnumerable<T>, String, Func<T, String>, Nullable<Int32>)
  nameWithType: Extensions.SortByRelevance<T>(IEnumerable<T>, String, Func<T, String>, Nullable<Int32>)
  fullName: MongoDB.Entities.Extensions.SortByRelevance<T>(System.Collections.Generic.IEnumerable<T>, System.String, System.Func<T, System.String>, System.Nullable<System.Int32>)
  nameWithType.vb: Extensions.SortByRelevance(Of T)(IEnumerable(Of T), String, Func(Of T, String), Nullable(Of Int32))
  fullName.vb: MongoDB.Entities.Extensions.SortByRelevance(Of T)(System.Collections.Generic.IEnumerable(Of T), System.String, System.Func(Of T, System.String), System.Nullable(Of System.Int32))
  name.vb: SortByRelevance(Of T)(IEnumerable(Of T), String, Func(Of T, String), Nullable(Of Int32))
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SortByRelevance``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String},System.Nullable{System.Int32})
    name: SortByRelevance<T>
    nameWithType: Extensions.SortByRelevance<T>
    fullName: MongoDB.Entities.Extensions.SortByRelevance<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SortByRelevance``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String},System.Nullable{System.Int32})
    name: SortByRelevance(Of T)
    nameWithType: Extensions.SortByRelevance(Of T)
    fullName: MongoDB.Entities.Extensions.SortByRelevance(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.GetEnumerator*
  commentId: Overload:MongoDB.Entities.Many`1.GetEnumerator
  name: GetEnumerator
  nameWithType: Many<TChild>.GetEnumerator
  fullName: MongoDB.Entities.Many<TChild>.GetEnumerator
  nameWithType.vb: Many(Of TChild).GetEnumerator
  fullName.vb: MongoDB.Entities.Many(Of TChild).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{{TChild}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{TChild}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<TChild>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<TChild>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of TChild).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of TChild).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<TChild>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<TChild>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of TChild).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of TChild).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{TChild}}
  commentId: T:System.Collections.Generic.IEnumerator{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TChild>
  nameWithType: IEnumerator<TChild>
  fullName: System.Collections.Generic.IEnumerator<TChild>
  nameWithType.vb: IEnumerator(Of TChild)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TChild)
  name.vb: IEnumerator(Of TChild)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:MongoDB.Entities.Many`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: Many<TChild>.IEnumerable.GetEnumerator
  fullName: MongoDB.Entities.Many<TChild>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: Many(Of TChild).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: MongoDB.Entities.Many(Of TChild).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: MongoDB.Entities.Many`1.JoinCollection*
  commentId: Overload:MongoDB.Entities.Many`1.JoinCollection
  name: JoinCollection
  nameWithType: Many<TChild>.JoinCollection
  fullName: MongoDB.Entities.Many<TChild>.JoinCollection
  nameWithType.vb: Many(Of TChild).JoinCollection
  fullName.vb: MongoDB.Entities.Many(Of TChild).JoinCollection
- uid: MongoDB.Driver.IMongoCollection{MongoDB.Entities.JoinRecord}
  commentId: T:MongoDB.Driver.IMongoCollection{MongoDB.Entities.JoinRecord}
  parent: MongoDB.Driver
  definition: MongoDB.Driver.IMongoCollection`1
  name: IMongoCollection<JoinRecord>
  nameWithType: IMongoCollection<JoinRecord>
  fullName: MongoDB.Driver.IMongoCollection<MongoDB.Entities.JoinRecord>
  nameWithType.vb: IMongoCollection(Of JoinRecord)
  fullName.vb: MongoDB.Driver.IMongoCollection(Of MongoDB.Entities.JoinRecord)
  name.vb: IMongoCollection(Of JoinRecord)
  spec.csharp:
  - uid: MongoDB.Driver.IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: MongoDB.Driver.IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: MongoDB.Driver.IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.IMongoCollection`1
  commentId: T:MongoDB.Driver.IMongoCollection`1
  isExternal: true
  name: IMongoCollection<TDocument>
  nameWithType: IMongoCollection<TDocument>
  fullName: MongoDB.Driver.IMongoCollection<TDocument>
  nameWithType.vb: IMongoCollection(Of TDocument)
  fullName.vb: MongoDB.Driver.IMongoCollection(Of TDocument)
  name.vb: IMongoCollection(Of TDocument)
  spec.csharp:
  - uid: MongoDB.Driver.IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: MongoDB.Driver.IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDocument
    nameWithType: TDocument
    fullName: TDocument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: MongoDB.Driver.IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDocument
    nameWithType: TDocument
    fullName: TDocument
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver
  commentId: N:MongoDB.Driver
  isExternal: true
  name: MongoDB.Driver
  nameWithType: MongoDB.Driver
  fullName: MongoDB.Driver
- uid: MongoDB.Entities.Many`1.JoinQueryable*
  commentId: Overload:MongoDB.Entities.Many`1.JoinQueryable
  name: JoinQueryable
  nameWithType: Many<TChild>.JoinQueryable
  fullName: MongoDB.Entities.Many<TChild>.JoinQueryable
  nameWithType.vb: Many(Of TChild).JoinQueryable
  fullName.vb: MongoDB.Entities.Many(Of TChild).JoinQueryable
- uid: MongoDB.Driver.IClientSessionHandle
  commentId: T:MongoDB.Driver.IClientSessionHandle
  parent: MongoDB.Driver
  isExternal: true
  name: IClientSessionHandle
  nameWithType: IClientSessionHandle
  fullName: MongoDB.Driver.IClientSessionHandle
- uid: MongoDB.Driver.AggregateOptions
  commentId: T:MongoDB.Driver.AggregateOptions
  parent: MongoDB.Driver
  isExternal: true
  name: AggregateOptions
  nameWithType: AggregateOptions
  fullName: MongoDB.Driver.AggregateOptions
- uid: MongoDB.Driver.Linq.IMongoQueryable{MongoDB.Entities.JoinRecord}
  commentId: T:MongoDB.Driver.Linq.IMongoQueryable{MongoDB.Entities.JoinRecord}
  parent: MongoDB.Driver.Linq
  definition: MongoDB.Driver.Linq.IMongoQueryable`1
  name: IMongoQueryable<JoinRecord>
  nameWithType: IMongoQueryable<JoinRecord>
  fullName: MongoDB.Driver.Linq.IMongoQueryable<MongoDB.Entities.JoinRecord>
  nameWithType.vb: IMongoQueryable(Of JoinRecord)
  fullName.vb: MongoDB.Driver.Linq.IMongoQueryable(Of MongoDB.Entities.JoinRecord)
  name.vb: IMongoQueryable(Of JoinRecord)
  spec.csharp:
  - uid: MongoDB.Driver.Linq.IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: MongoDB.Driver.Linq.IMongoQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.Linq.IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: MongoDB.Driver.Linq.IMongoQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.Linq.IMongoQueryable`1
  commentId: T:MongoDB.Driver.Linq.IMongoQueryable`1
  isExternal: true
  name: IMongoQueryable<T>
  nameWithType: IMongoQueryable<T>
  fullName: MongoDB.Driver.Linq.IMongoQueryable<T>
  nameWithType.vb: IMongoQueryable(Of T)
  fullName.vb: MongoDB.Driver.Linq.IMongoQueryable(Of T)
  name.vb: IMongoQueryable(Of T)
  spec.csharp:
  - uid: MongoDB.Driver.Linq.IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: MongoDB.Driver.Linq.IMongoQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.Linq.IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: MongoDB.Driver.Linq.IMongoQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.Linq
  commentId: N:MongoDB.Driver.Linq
  isExternal: true
  name: MongoDB.Driver.Linq
  nameWithType: MongoDB.Driver.Linq
  fullName: MongoDB.Driver.Linq
- uid: MongoDB.Entities.Many`1.JoinFluent*
  commentId: Overload:MongoDB.Entities.Many`1.JoinFluent
  name: JoinFluent
  nameWithType: Many<TChild>.JoinFluent
  fullName: MongoDB.Entities.Many<TChild>.JoinFluent
  nameWithType.vb: Many(Of TChild).JoinFluent
  fullName.vb: MongoDB.Entities.Many(Of TChild).JoinFluent
- uid: MongoDB.Driver.IAggregateFluent{MongoDB.Entities.JoinRecord}
  commentId: T:MongoDB.Driver.IAggregateFluent{MongoDB.Entities.JoinRecord}
  parent: MongoDB.Driver
  definition: MongoDB.Driver.IAggregateFluent`1
  name: IAggregateFluent<JoinRecord>
  nameWithType: IAggregateFluent<JoinRecord>
  fullName: MongoDB.Driver.IAggregateFluent<MongoDB.Entities.JoinRecord>
  nameWithType.vb: IAggregateFluent(Of JoinRecord)
  fullName.vb: MongoDB.Driver.IAggregateFluent(Of MongoDB.Entities.JoinRecord)
  name.vb: IAggregateFluent(Of JoinRecord)
  spec.csharp:
  - uid: MongoDB.Driver.IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: MongoDB.Driver.IAggregateFluent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: MongoDB.Driver.IAggregateFluent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.IAggregateFluent`1
  commentId: T:MongoDB.Driver.IAggregateFluent`1
  isExternal: true
  name: IAggregateFluent<TResult>
  nameWithType: IAggregateFluent<TResult>
  fullName: MongoDB.Driver.IAggregateFluent<TResult>
  nameWithType.vb: IAggregateFluent(Of TResult)
  fullName.vb: MongoDB.Driver.IAggregateFluent(Of TResult)
  name.vb: IAggregateFluent(Of TResult)
  spec.csharp:
  - uid: MongoDB.Driver.IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: MongoDB.Driver.IAggregateFluent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: MongoDB.Driver.IAggregateFluent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.ParentsQueryable*
  commentId: Overload:MongoDB.Entities.Many`1.ParentsQueryable
  name: ParentsQueryable
  nameWithType: Many<TChild>.ParentsQueryable
  fullName: MongoDB.Entities.Many<TChild>.ParentsQueryable
  nameWithType.vb: Many(Of TChild).ParentsQueryable
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsQueryable
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MongoDB.Driver.Linq.IMongoQueryable{{TParent}}
  commentId: T:MongoDB.Driver.Linq.IMongoQueryable{``0}
  parent: MongoDB.Driver.Linq
  definition: MongoDB.Driver.Linq.IMongoQueryable`1
  name: IMongoQueryable<TParent>
  nameWithType: IMongoQueryable<TParent>
  fullName: MongoDB.Driver.Linq.IMongoQueryable<TParent>
  nameWithType.vb: IMongoQueryable(Of TParent)
  fullName.vb: MongoDB.Driver.Linq.IMongoQueryable(Of TParent)
  name.vb: IMongoQueryable(Of TParent)
  spec.csharp:
  - uid: MongoDB.Driver.Linq.IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: MongoDB.Driver.Linq.IMongoQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParent
    nameWithType: TParent
    fullName: TParent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.Linq.IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: MongoDB.Driver.Linq.IMongoQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParent
    nameWithType: TParent
    fullName: TParent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.Linq.IMongoQueryable{{TChild}}
  commentId: T:MongoDB.Driver.Linq.IMongoQueryable{`0}
  parent: MongoDB.Driver.Linq
  definition: MongoDB.Driver.Linq.IMongoQueryable`1
  name: IMongoQueryable<TChild>
  nameWithType: IMongoQueryable<TChild>
  fullName: MongoDB.Driver.Linq.IMongoQueryable<TChild>
  nameWithType.vb: IMongoQueryable(Of TChild)
  fullName.vb: MongoDB.Driver.Linq.IMongoQueryable(Of TChild)
  name.vb: IMongoQueryable(Of TChild)
  spec.csharp:
  - uid: MongoDB.Driver.Linq.IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: MongoDB.Driver.Linq.IMongoQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.Linq.IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: MongoDB.Driver.Linq.IMongoQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.ParentsFluent*
  commentId: Overload:MongoDB.Entities.Many`1.ParentsFluent
  name: ParentsFluent
  nameWithType: Many<TChild>.ParentsFluent
  fullName: MongoDB.Entities.Many<TChild>.ParentsFluent
  nameWithType.vb: Many(Of TChild).ParentsFluent
  fullName.vb: MongoDB.Entities.Many(Of TChild).ParentsFluent
- uid: MongoDB.Driver.IAggregateFluent{{TChild}}
  commentId: T:MongoDB.Driver.IAggregateFluent{`0}
  parent: MongoDB.Driver
  definition: MongoDB.Driver.IAggregateFluent`1
  name: IAggregateFluent<TChild>
  nameWithType: IAggregateFluent<TChild>
  fullName: MongoDB.Driver.IAggregateFluent<TChild>
  nameWithType.vb: IAggregateFluent(Of TChild)
  fullName.vb: MongoDB.Driver.IAggregateFluent(Of TChild)
  name.vb: IAggregateFluent(Of TChild)
  spec.csharp:
  - uid: MongoDB.Driver.IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: MongoDB.Driver.IAggregateFluent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: MongoDB.Driver.IAggregateFluent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.IAggregateFluent{{TParent}}
  commentId: T:MongoDB.Driver.IAggregateFluent{``0}
  parent: MongoDB.Driver
  definition: MongoDB.Driver.IAggregateFluent`1
  name: IAggregateFluent<TParent>
  nameWithType: IAggregateFluent<TParent>
  fullName: MongoDB.Driver.IAggregateFluent<TParent>
  nameWithType.vb: IAggregateFluent(Of TParent)
  fullName.vb: MongoDB.Driver.IAggregateFluent(Of TParent)
  name.vb: IAggregateFluent(Of TParent)
  spec.csharp:
  - uid: MongoDB.Driver.IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: MongoDB.Driver.IAggregateFluent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParent
    nameWithType: TParent
    fullName: TParent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: MongoDB.Driver.IAggregateFluent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParent
    nameWithType: TParent
    fullName: TParent
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Many`1.ChildrenCountAsync*
  commentId: Overload:MongoDB.Entities.Many`1.ChildrenCountAsync
  name: ChildrenCountAsync
  nameWithType: Many<TChild>.ChildrenCountAsync
  fullName: MongoDB.Entities.Many<TChild>.ChildrenCountAsync
  nameWithType.vb: Many(Of TChild).ChildrenCountAsync
  fullName.vb: MongoDB.Entities.Many(Of TChild).ChildrenCountAsync
- uid: MongoDB.Driver.CountOptions
  commentId: T:MongoDB.Driver.CountOptions
  parent: MongoDB.Driver
  isExternal: true
  name: CountOptions
  nameWithType: CountOptions
  fullName: MongoDB.Driver.CountOptions
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: MongoDB.Entities.Many`1.ChildrenQueryable*
  commentId: Overload:MongoDB.Entities.Many`1.ChildrenQueryable
  name: ChildrenQueryable
  nameWithType: Many<TChild>.ChildrenQueryable
  fullName: MongoDB.Entities.Many<TChild>.ChildrenQueryable
  nameWithType.vb: Many(Of TChild).ChildrenQueryable
  fullName.vb: MongoDB.Entities.Many(Of TChild).ChildrenQueryable
- uid: MongoDB.Entities.Many`1.ChildrenFluent*
  commentId: Overload:MongoDB.Entities.Many`1.ChildrenFluent
  name: ChildrenFluent
  nameWithType: Many<TChild>.ChildrenFluent
  fullName: MongoDB.Entities.Many<TChild>.ChildrenFluent
  nameWithType.vb: Many(Of TChild).ChildrenFluent
  fullName.vb: MongoDB.Entities.Many(Of TChild).ChildrenFluent
- uid: MongoDB.Entities.Many`1.#ctor*
  commentId: Overload:MongoDB.Entities.Many`1.#ctor
  name: Many
  nameWithType: Many<TChild>.Many
  fullName: MongoDB.Entities.Many<TChild>.Many
  nameWithType.vb: Many(Of TChild).Many
  fullName.vb: MongoDB.Entities.Many(Of TChild).Many
- uid: MongoDB.Entities.Many`1.VB_InitOneToMany*
  commentId: Overload:MongoDB.Entities.Many`1.VB_InitOneToMany
  name: VB_InitOneToMany
  nameWithType: Many<TChild>.VB_InitOneToMany
  fullName: MongoDB.Entities.Many<TChild>.VB_InitOneToMany
  nameWithType.vb: Many(Of TChild).VB_InitOneToMany
  fullName.vb: MongoDB.Entities.Many(Of TChild).VB_InitOneToMany
- uid: '{TParent}'
  commentId: '!:TParent'
  definition: TParent
  name: TParent
  nameWithType: TParent
  fullName: TParent
- uid: System.Linq.Expressions.Expression{System.Func{{TParent},System.Object}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Object}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TParent, Object>>
  nameWithType: Expression<Func<TParent, Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<TParent, System.Object>>
  nameWithType.vb: Expression(Of Func(Of TParent, Object))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TParent, System.Object))
  name.vb: Expression(Of Func(Of TParent, Object))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParent
    nameWithType: TParent
    fullName: TParent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParent
    nameWithType: TParent
    fullName: TParent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TParent
  name: TParent
  nameWithType: TParent
  fullName: TParent
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: MongoDB.Entities.Many`1.VB_InitManyToMany*
  commentId: Overload:MongoDB.Entities.Many`1.VB_InitManyToMany
  name: VB_InitManyToMany
  nameWithType: Many<TChild>.VB_InitManyToMany
  fullName: MongoDB.Entities.Many<TChild>.VB_InitManyToMany
  nameWithType.vb: Many(Of TChild).VB_InitManyToMany
  fullName.vb: MongoDB.Entities.Many(Of TChild).VB_InitManyToMany
- uid: System.Linq.Expressions.Expression{System.Func{{TChild},System.Object}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,System.Object}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TChild, Object>>
  nameWithType: Expression<Func<TChild, Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<TChild, System.Object>>
  nameWithType.vb: Expression(Of Func(Of TChild, Object))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of TChild, System.Object))
  name.vb: Expression(Of Func(Of TChild, Object))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MongoDB.Entities.Many`1.AddAsync*
  commentId: Overload:MongoDB.Entities.Many`1.AddAsync
  name: AddAsync
  nameWithType: Many<TChild>.AddAsync
  fullName: MongoDB.Entities.Many<TChild>.AddAsync
  nameWithType.vb: Many(Of TChild).AddAsync
  fullName.vb: MongoDB.Entities.Many(Of TChild).AddAsync
- uid: '{TChild}'
  commentId: '!:TChild'
  definition: TChild
  name: TChild
  nameWithType: TChild
  fullName: TChild
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: TChild
  name: TChild
  nameWithType: TChild
  fullName: TChild
- uid: MongoDB.Entities.Many`1.RemoveAsync*
  commentId: Overload:MongoDB.Entities.Many`1.RemoveAsync
  name: RemoveAsync
  nameWithType: Many<TChild>.RemoveAsync
  fullName: MongoDB.Entities.Many<TChild>.RemoveAsync
  nameWithType.vb: Many(Of TChild).RemoveAsync
  fullName.vb: MongoDB.Entities.Many(Of TChild).RemoveAsync
