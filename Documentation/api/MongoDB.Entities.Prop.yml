### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.Prop
  commentId: T:MongoDB.Entities.Prop
  id: Prop
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.Prop.Collection``1
  - MongoDB.Entities.Prop.Elements``1(Expression{Func{``0,System.Object}})
  - MongoDB.Entities.Prop.Elements``1(System.Int32,Expression{Func{``0,System.Object}})
  - MongoDB.Entities.Prop.Path``1(Expression{Func{``0,System.Object}})
  - MongoDB.Entities.Prop.PosAll``1(Expression{Func{``0,System.Object}})
  - MongoDB.Entities.Prop.PosFiltered``1(Expression{Func{``0,System.Object}})
  - MongoDB.Entities.Prop.PosFirst``1(Expression{Func{``0,System.Object}})
  - MongoDB.Entities.Prop.Property``1(Expression{Func{``0,System.Object}})
  langs:
  - csharp
  - vb
  name: Prop
  nameWithType: Prop
  fullName: MongoDB.Entities.Prop
  type: Class
  source:
    id: Prop
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Prop.cs
    startLine: 9
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThis class provides methods to generate property path strings from lambda expression. \n"
  example: []
  syntax:
    content: 'public static class Prop : object'
    content.vb: >-
      Public Module Prop

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: MongoDB.Entities.Prop.Collection``1
  commentId: M:MongoDB.Entities.Prop.Collection``1
  id: Collection``1
  parent: MongoDB.Entities.Prop
  langs:
  - csharp
  - vb
  name: Collection<T>()
  nameWithType: Prop.Collection<T>()
  fullName: MongoDB.Entities.Prop.Collection<T>()
  type: Method
  source:
    id: Collection
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Prop.cs
    startLine: 62
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns the collection/entity name of a given entity type\n"
  example: []
  syntax:
    content: >-
      public static string Collection<T>()

          where T : IEntity
    typeParameters:
    - id: T
      description: The type of the entity to get the collection name of
    return:
      type: System.String
    content.vb: Public Shared Function Collection(Of T As IEntity) As String
  overload: MongoDB.Entities.Prop.Collection*
  nameWithType.vb: Prop.Collection(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Prop.Collection(Of T)()
  name.vb: Collection(Of T)()
- uid: MongoDB.Entities.Prop.Property``1(Expression{Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Prop.Property``1(Expression{Func{``0,System.Object}})
  id: Property``1(Expression{Func{``0,System.Object}})
  parent: MongoDB.Entities.Prop
  langs:
  - csharp
  - vb
  name: Property<T>(Expression<Func<T, Object>>)
  nameWithType: Prop.Property<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Prop.Property<T>(Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: Property
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Prop.cs
    startLine: 72
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns the name of the property for a given expression.\n<p>EX: Authors[0].Books[0].Title > Title</p>\n"
  example: []
  syntax:
    content: public static string Property<T>(Expression<Func<T, object>> expression)
    parameters:
    - id: expression
      type: Expression{Func{{T},System.Object}}
      description: x => x.SomeList[0].SomeProp
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Shared Function Property(Of T)(expression As Expression(Of Func(Of T, Object))) As String
  overload: MongoDB.Entities.Prop.Property*
  nameWithType.vb: Prop.Property(Of T)(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Prop.Property(Of T)(Expression(Of Func(Of T, System.Object)))
  name.vb: Property(Of T)(Expression(Of Func(Of T, Object)))
- uid: MongoDB.Entities.Prop.Path``1(Expression{Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Prop.Path``1(Expression{Func{``0,System.Object}})
  id: Path``1(Expression{Func{``0,System.Object}})
  parent: MongoDB.Entities.Prop
  langs:
  - csharp
  - vb
  name: Path<T>(Expression<Func<T, Object>>)
  nameWithType: Prop.Path<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Prop.Path<T>(Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: Path
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Prop.cs
    startLine: 83
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns the full dotted path for a given expression.\n<p>EX: Authors[0].Books[0].Title > Authors.Books.Title</p>\n"
  example: []
  syntax:
    content: public static string Path<T>(Expression<Func<T, object>> expression)
    parameters:
    - id: expression
      type: Expression{Func{{T},System.Object}}
      description: x => x.SomeList[0].SomeProp
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Shared Function Path(Of T)(expression As Expression(Of Func(Of T, Object))) As String
  overload: MongoDB.Entities.Prop.Path*
  nameWithType.vb: Prop.Path(Of T)(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Prop.Path(Of T)(Expression(Of Func(Of T, System.Object)))
  name.vb: Path(Of T)(Expression(Of Func(Of T, Object)))
- uid: MongoDB.Entities.Prop.PosFiltered``1(Expression{Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Prop.PosFiltered``1(Expression{Func{``0,System.Object}})
  id: PosFiltered``1(Expression{Func{``0,System.Object}})
  parent: MongoDB.Entities.Prop
  langs:
  - csharp
  - vb
  name: PosFiltered<T>(Expression<Func<T, Object>>)
  nameWithType: Prop.PosFiltered<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Prop.PosFiltered<T>(Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: PosFiltered
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Prop.cs
    startLine: 96
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns a path with filtered positional identifiers $[x] for a given expression.\n<p>EX: Authors[0].Name > Authors.$[a].Name</p>\n<p>EX: Authors[1].Age > Authors.$[b].Age</p>\n<p>EX: Authors[2].Books[3].Title > Authors.$[c].Books.$[d].Title</p>\n<p>TIP: Index positions start from [0] which is converted to $[a] and so on.</p>\n"
  example: []
  syntax:
    content: public static string PosFiltered<T>(Expression<Func<T, object>> expression)
    parameters:
    - id: expression
      type: Expression{Func{{T},System.Object}}
      description: x => x.SomeList[0].SomeProp
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Shared Function PosFiltered(Of T)(expression As Expression(Of Func(Of T, Object))) As String
  overload: MongoDB.Entities.Prop.PosFiltered*
  nameWithType.vb: Prop.PosFiltered(Of T)(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Prop.PosFiltered(Of T)(Expression(Of Func(Of T, System.Object)))
  name.vb: PosFiltered(Of T)(Expression(Of Func(Of T, Object)))
- uid: MongoDB.Entities.Prop.PosAll``1(Expression{Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Prop.PosAll``1(Expression{Func{``0,System.Object}})
  id: PosAll``1(Expression{Func{``0,System.Object}})
  parent: MongoDB.Entities.Prop
  langs:
  - csharp
  - vb
  name: PosAll<T>(Expression<Func<T, Object>>)
  nameWithType: Prop.PosAll<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Prop.PosAll<T>(Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: PosAll
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Prop.cs
    startLine: 108
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns a path with the all positional operator $[] for a given expression.\n<p>EX: Authors[0].Name > Authors.$[].Name</p>\n"
  example: []
  syntax:
    content: public static string PosAll<T>(Expression<Func<T, object>> expression)
    parameters:
    - id: expression
      type: Expression{Func{{T},System.Object}}
      description: x => x.SomeList[0].SomeProp
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Shared Function PosAll(Of T)(expression As Expression(Of Func(Of T, Object))) As String
  overload: MongoDB.Entities.Prop.PosAll*
  nameWithType.vb: Prop.PosAll(Of T)(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Prop.PosAll(Of T)(Expression(Of Func(Of T, System.Object)))
  name.vb: PosAll(Of T)(Expression(Of Func(Of T, Object)))
- uid: MongoDB.Entities.Prop.PosFirst``1(Expression{Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Prop.PosFirst``1(Expression{Func{``0,System.Object}})
  id: PosFirst``1(Expression{Func{``0,System.Object}})
  parent: MongoDB.Entities.Prop
  langs:
  - csharp
  - vb
  name: PosFirst<T>(Expression<Func<T, Object>>)
  nameWithType: Prop.PosFirst<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Prop.PosFirst<T>(Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: PosFirst
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Prop.cs
    startLine: 118
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns a path with the first positional operator $ for a given expression.\n<p>EX: Authors[0].Name > Authors.$.Name</p>\n"
  example: []
  syntax:
    content: public static string PosFirst<T>(Expression<Func<T, object>> expression)
    parameters:
    - id: expression
      type: Expression{Func{{T},System.Object}}
      description: x => x.SomeList[0].SomeProp
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Shared Function PosFirst(Of T)(expression As Expression(Of Func(Of T, Object))) As String
  overload: MongoDB.Entities.Prop.PosFirst*
  nameWithType.vb: Prop.PosFirst(Of T)(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Prop.PosFirst(Of T)(Expression(Of Func(Of T, System.Object)))
  name.vb: PosFirst(Of T)(Expression(Of Func(Of T, Object)))
- uid: MongoDB.Entities.Prop.Elements``1(Expression{Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Prop.Elements``1(Expression{Func{``0,System.Object}})
  id: Elements``1(Expression{Func{``0,System.Object}})
  parent: MongoDB.Entities.Prop
  langs:
  - csharp
  - vb
  name: Elements<T>(Expression<Func<T, Object>>)
  nameWithType: Prop.Elements<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Prop.Elements<T>(Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: Elements
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Prop.cs
    startLine: 128
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns a path without any filtered positional identifier prepended to it.\n<p>EX: b => b.Tags > Tags</p>\n"
  example: []
  syntax:
    content: public static string Elements<T>(Expression<Func<T, object>> expression)
    parameters:
    - id: expression
      type: Expression{Func{{T},System.Object}}
      description: x => x.SomeProp
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Shared Function Elements(Of T)(expression As Expression(Of Func(Of T, Object))) As String
  overload: MongoDB.Entities.Prop.Elements*
  nameWithType.vb: Prop.Elements(Of T)(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Prop.Elements(Of T)(Expression(Of Func(Of T, System.Object)))
  name.vb: Elements(Of T)(Expression(Of Func(Of T, Object)))
- uid: MongoDB.Entities.Prop.Elements``1(System.Int32,Expression{Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Prop.Elements``1(System.Int32,Expression{Func{``0,System.Object}})
  id: Elements``1(System.Int32,Expression{Func{``0,System.Object}})
  parent: MongoDB.Entities.Prop
  langs:
  - csharp
  - vb
  name: Elements<T>(Int32, Expression<Func<T, Object>>)
  nameWithType: Prop.Elements<T>(Int32, Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Prop.Elements<T>(System.Int32, Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: Elements
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Prop.cs
    startLine: 141
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns a path with the filtered positional identifier prepended to the property path.\n<p>EX: 0, x => x.Rating > a.Rating</p>\n<p>EX: 1, x => x.Rating > b.Rating</p>\n<p>TIP: Index positions start from &apos;0&apos; which is converted to &apos;a&apos; and so on.</p>\n"
  example: []
  syntax:
    content: public static string Elements<T>(int index, Expression<Func<T, object>> expression)
    parameters:
    - id: index
      type: System.Int32
      description: 0=a 1=b 2=c 3=d and so on...
    - id: expression
      type: Expression{Func{{T},System.Object}}
      description: x => x.SomeProp
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: Public Shared Function Elements(Of T)(index As Integer, expression As Expression(Of Func(Of T, Object))) As String
  overload: MongoDB.Entities.Prop.Elements*
  nameWithType.vb: Prop.Elements(Of T)(Int32, Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Prop.Elements(Of T)(System.Int32, Expression(Of Func(Of T, System.Object)))
  name.vb: Elements(Of T)(Int32, Expression(Of Func(Of T, Object)))
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: MongoDB.Entities.Prop.Collection*
  commentId: Overload:MongoDB.Entities.Prop.Collection
  name: Collection
  nameWithType: Prop.Collection
  fullName: MongoDB.Entities.Prop.Collection
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MongoDB.Entities.Prop.Property*
  commentId: Overload:MongoDB.Entities.Prop.Property
  name: Property
  nameWithType: Prop.Property
  fullName: MongoDB.Entities.Prop.Property
- uid: Expression{Func{{T},System.Object}}
  commentId: '!:Expression{Func{`0,System.Object}}'
  definition: Expression`1
  name: Expression<Func<T, Object>>
  nameWithType: Expression<Func<T, Object>>
  fullName: Expression<Func<T, System.Object>>
  nameWithType.vb: Expression(Of Func(Of T, Object))
  fullName.vb: Expression(Of Func(Of T, System.Object))
  name.vb: Expression(Of Func(Of T, Object))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Prop.Path*
  commentId: Overload:MongoDB.Entities.Prop.Path
  name: Path
  nameWithType: Prop.Path
  fullName: MongoDB.Entities.Prop.Path
- uid: MongoDB.Entities.Prop.PosFiltered*
  commentId: Overload:MongoDB.Entities.Prop.PosFiltered
  name: PosFiltered
  nameWithType: Prop.PosFiltered
  fullName: MongoDB.Entities.Prop.PosFiltered
- uid: MongoDB.Entities.Prop.PosAll*
  commentId: Overload:MongoDB.Entities.Prop.PosAll
  name: PosAll
  nameWithType: Prop.PosAll
  fullName: MongoDB.Entities.Prop.PosAll
- uid: MongoDB.Entities.Prop.PosFirst*
  commentId: Overload:MongoDB.Entities.Prop.PosFirst
  name: PosFirst
  nameWithType: Prop.PosFirst
  fullName: MongoDB.Entities.Prop.PosFirst
- uid: MongoDB.Entities.Prop.Elements*
  commentId: Overload:MongoDB.Entities.Prop.Elements
  name: Elements
  nameWithType: Prop.Elements
  fullName: MongoDB.Entities.Prop.Elements
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
