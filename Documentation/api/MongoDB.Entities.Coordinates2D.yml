### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.Coordinates2D
  commentId: T:MongoDB.Entities.Coordinates2D
  id: Coordinates2D
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.Coordinates2D.#ctor(System.Double,System.Double)
  - MongoDB.Entities.Coordinates2D.Coordinates
  - MongoDB.Entities.Coordinates2D.GeoJsonPoint(System.Double,System.Double)
  - MongoDB.Entities.Coordinates2D.ToGeoJsonPoint
  - MongoDB.Entities.Coordinates2D.Type
  langs:
  - csharp
  - vb
  name: Coordinates2D
  nameWithType: Coordinates2D
  fullName: MongoDB.Entities.Coordinates2D
  type: Class
  source:
    id: Coordinates2D
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\GeoNear.cs
    startLine: 10
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents a 2D geographical coordinate consisting of longitude and latitude\n"
  example: []
  syntax:
    content: 'public class Coordinates2D : object'
    content.vb: >-
      Public Class Coordinates2D

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: MongoDB.Entities.Coordinates2D.Type
  commentId: P:MongoDB.Entities.Coordinates2D.Type
  id: Type
  parent: MongoDB.Entities.Coordinates2D
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Coordinates2D.Type
  fullName: MongoDB.Entities.Coordinates2D.Type
  type: Property
  source:
    id: Type
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\GeoNear.cs
    startLine: 12
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  syntax:
    content: public string Type { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Type As String
  overload: MongoDB.Entities.Coordinates2D.Type*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MongoDB.Entities.Coordinates2D.Coordinates
  commentId: P:MongoDB.Entities.Coordinates2D.Coordinates
  id: Coordinates
  parent: MongoDB.Entities.Coordinates2D
  langs:
  - csharp
  - vb
  name: Coordinates
  nameWithType: Coordinates2D.Coordinates
  fullName: MongoDB.Entities.Coordinates2D.Coordinates
  type: Property
  source:
    id: Coordinates
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\GeoNear.cs
    startLine: 15
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  syntax:
    content: public double[] Coordinates { get; set; }
    parameters: []
    return:
      type: System.Double[]
    content.vb: Public Property Coordinates As Double()
  overload: MongoDB.Entities.Coordinates2D.Coordinates*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MongoDB.Entities.Coordinates2D.#ctor(System.Double,System.Double)
  commentId: M:MongoDB.Entities.Coordinates2D.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: MongoDB.Entities.Coordinates2D
  langs:
  - csharp
  - vb
  name: Coordinates2D(Double, Double)
  nameWithType: Coordinates2D.Coordinates2D(Double, Double)
  fullName: MongoDB.Entities.Coordinates2D.Coordinates2D(System.Double, System.Double)
  type: Constructor
  source:
    id: .ctor
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\GeoNear.cs
    startLine: 21
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nInstantiate a new Coordinates2D instance with the supplied longtitude and latitude\n"
  example: []
  syntax:
    content: public Coordinates2D(double longitude, double latitude)
    parameters:
    - id: longitude
      type: System.Double
    - id: latitude
      type: System.Double
    content.vb: Public Sub New(longitude As Double, latitude As Double)
  overload: MongoDB.Entities.Coordinates2D.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MongoDB.Entities.Coordinates2D.ToGeoJsonPoint
  commentId: M:MongoDB.Entities.Coordinates2D.ToGeoJsonPoint
  id: ToGeoJsonPoint
  parent: MongoDB.Entities.Coordinates2D
  langs:
  - csharp
  - vb
  name: ToGeoJsonPoint()
  nameWithType: Coordinates2D.ToGeoJsonPoint()
  fullName: MongoDB.Entities.Coordinates2D.ToGeoJsonPoint()
  type: Method
  source:
    id: ToGeoJsonPoint
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\GeoNear.cs
    startLine: 30
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nConverts a Coordinates2D instance to a GeoJsonPoint of GeoJson2DGeographicCoordinates \n"
  example: []
  syntax:
    content: public GeoJsonPoint<GeoJson2DGeographicCoordinates> ToGeoJsonPoint()
    return:
      type: GeoJsonPoint{GeoJson2DGeographicCoordinates}
    content.vb: Public Function ToGeoJsonPoint As GeoJsonPoint(Of GeoJson2DGeographicCoordinates)
  overload: MongoDB.Entities.Coordinates2D.ToGeoJsonPoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MongoDB.Entities.Coordinates2D.GeoJsonPoint(System.Double,System.Double)
  commentId: M:MongoDB.Entities.Coordinates2D.GeoJsonPoint(System.Double,System.Double)
  id: GeoJsonPoint(System.Double,System.Double)
  parent: MongoDB.Entities.Coordinates2D
  langs:
  - csharp
  - vb
  name: GeoJsonPoint(Double, Double)
  nameWithType: Coordinates2D.GeoJsonPoint(Double, Double)
  fullName: MongoDB.Entities.Coordinates2D.GeoJsonPoint(System.Double, System.Double)
  type: Method
  source:
    id: GeoJsonPoint
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\GeoNear.cs
    startLine: 38
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nCreate a GeoJsonPoint of GeoJson2DGeographicCoordinates with supplied longitude and latitude\n"
  example: []
  syntax:
    content: public static GeoJsonPoint<GeoJson2DGeographicCoordinates> GeoJsonPoint(double longitude, double latitude)
    parameters:
    - id: longitude
      type: System.Double
    - id: latitude
      type: System.Double
    return:
      type: GeoJsonPoint{GeoJson2DGeographicCoordinates}
    content.vb: Public Shared Function GeoJsonPoint(longitude As Double, latitude As Double) As GeoJsonPoint(Of GeoJson2DGeographicCoordinates)
  overload: MongoDB.Entities.Coordinates2D.GeoJsonPoint*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: MongoDB.Entities.Coordinates2D.Type*
  commentId: Overload:MongoDB.Entities.Coordinates2D.Type
  name: Type
  nameWithType: Coordinates2D.Type
  fullName: MongoDB.Entities.Coordinates2D.Type
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MongoDB.Entities.Coordinates2D.Coordinates*
  commentId: Overload:MongoDB.Entities.Coordinates2D.Coordinates
  name: Coordinates
  nameWithType: Coordinates2D.Coordinates
  fullName: MongoDB.Entities.Coordinates2D.Coordinates
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MongoDB.Entities.Coordinates2D.#ctor*
  commentId: Overload:MongoDB.Entities.Coordinates2D.#ctor
  name: Coordinates2D
  nameWithType: Coordinates2D.Coordinates2D
  fullName: MongoDB.Entities.Coordinates2D.Coordinates2D
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: MongoDB.Entities.Coordinates2D.ToGeoJsonPoint*
  commentId: Overload:MongoDB.Entities.Coordinates2D.ToGeoJsonPoint
  name: ToGeoJsonPoint
  nameWithType: Coordinates2D.ToGeoJsonPoint
  fullName: MongoDB.Entities.Coordinates2D.ToGeoJsonPoint
- uid: GeoJsonPoint{GeoJson2DGeographicCoordinates}
  commentId: '!:GeoJsonPoint{GeoJson2DGeographicCoordinates}'
  definition: GeoJsonPoint`1
  name: GeoJsonPoint<GeoJson2DGeographicCoordinates>
  nameWithType: GeoJsonPoint<GeoJson2DGeographicCoordinates>
  fullName: GeoJsonPoint<GeoJson2DGeographicCoordinates>
  nameWithType.vb: GeoJsonPoint(Of GeoJson2DGeographicCoordinates)
  fullName.vb: GeoJsonPoint(Of GeoJson2DGeographicCoordinates)
  name.vb: GeoJsonPoint(Of GeoJson2DGeographicCoordinates)
  spec.csharp:
  - uid: GeoJsonPoint`1
    name: GeoJsonPoint
    nameWithType: GeoJsonPoint
    fullName: GeoJsonPoint
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: GeoJson2DGeographicCoordinates
    name: GeoJson2DGeographicCoordinates
    nameWithType: GeoJson2DGeographicCoordinates
    fullName: GeoJson2DGeographicCoordinates
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GeoJsonPoint`1
    name: GeoJsonPoint
    nameWithType: GeoJsonPoint
    fullName: GeoJsonPoint
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: GeoJson2DGeographicCoordinates
    name: GeoJson2DGeographicCoordinates
    nameWithType: GeoJson2DGeographicCoordinates
    fullName: GeoJson2DGeographicCoordinates
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: GeoJsonPoint`1
  isExternal: true
  name: GeoJsonPoint<>
  nameWithType: GeoJsonPoint<>
  fullName: GeoJsonPoint<>
  nameWithType.vb: GeoJsonPoint(Of )
  fullName.vb: GeoJsonPoint(Of )
  name.vb: GeoJsonPoint(Of )
  spec.csharp:
  - uid: GeoJsonPoint`1
    name: GeoJsonPoint
    nameWithType: GeoJsonPoint
    fullName: GeoJsonPoint
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: GeoJsonPoint`1
    name: GeoJsonPoint
    nameWithType: GeoJsonPoint
    fullName: GeoJsonPoint
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Coordinates2D.GeoJsonPoint*
  commentId: Overload:MongoDB.Entities.Coordinates2D.GeoJsonPoint
  name: GeoJsonPoint
  nameWithType: Coordinates2D.GeoJsonPoint
  fullName: MongoDB.Entities.Coordinates2D.GeoJsonPoint
