### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.Update`1
  commentId: T:MongoDB.Entities.Update`1
  id: Update`1
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.Update`1.AddToQueue
  - MongoDB.Entities.Update`1.ExecuteAsync(System.Threading.CancellationToken)
  - MongoDB.Entities.Update`1.ExecutePipelineAsync(System.Threading.CancellationToken)
  - MongoDB.Entities.Update`1.IgnoreGlobalFilters
  - MongoDB.Entities.Update`1.Match(MongoDB.Driver.FilterDefinition{`0})
  - MongoDB.Entities.Update`1.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  - MongoDB.Entities.Update`1.Match(MongoDB.Entities.Template)
  - MongoDB.Entities.Update`1.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  - MongoDB.Entities.Update`1.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - MongoDB.Entities.Update`1.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  - MongoDB.Entities.Update`1.MatchExpression(MongoDB.Entities.Template)
  - MongoDB.Entities.Update`1.MatchExpression(System.String)
  - MongoDB.Entities.Update`1.MatchID(System.String)
  - MongoDB.Entities.Update`1.MatchString(System.String)
  - MongoDB.Entities.Update`1.Modify(MongoDB.Entities.Template)
  - MongoDB.Entities.Update`1.Modify(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})
  - MongoDB.Entities.Update`1.Modify(System.String)
  - MongoDB.Entities.Update`1.Modify``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  - MongoDB.Entities.Update`1.ModifyExcept(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0)
  - MongoDB.Entities.Update`1.ModifyOnly(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0)
  - MongoDB.Entities.Update`1.ModifyWith(`0)
  - MongoDB.Entities.Update`1.Option(System.Action{MongoDB.Driver.UpdateOptions})
  - MongoDB.Entities.Update`1.WithArrayFilter(MongoDB.Entities.Template)
  - MongoDB.Entities.Update`1.WithArrayFilter(System.String)
  - MongoDB.Entities.Update`1.WithArrayFilters(MongoDB.Entities.Template)
  - MongoDB.Entities.Update`1.WithPipeline(MongoDB.Entities.Template)
  - MongoDB.Entities.Update`1.WithPipelineStage(MongoDB.Entities.Template)
  - MongoDB.Entities.Update`1.WithPipelineStage(System.String)
  langs:
  - csharp
  - vb
  name: Update<T>
  nameWithType: Update<T>
  fullName: MongoDB.Entities.Update<T>
  type: Class
  source:
    id: Update
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 61
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents an update command\n<p>TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command.</p>\n"
  example: []
  syntax:
    content: 'public class Update<T> : UpdateBase<T> where T : IEntity'
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    content.vb: >-
      Public Class Update(Of T As IEntity)
          Inherits UpdateBase(Of T)
  inheritance:
  - System.Object
  - MongoDB.Entities.UpdateBase{{T}}
  inheritedMembers:
  - MongoDB.Entities.UpdateBase{{T}}.defs
  - MongoDB.Entities.UpdateBase{{T}}.AddModification``1(System.Linq.Expressions.Expression{System.Func{{T},{TProp}}},{TProp})
  - MongoDB.Entities.UpdateBase{{T}}.AddModification(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{{T}},MongoDB.Driver.UpdateDefinition{{T}}})
  - MongoDB.Entities.UpdateBase{{T}}.AddModification(System.String)
  - MongoDB.Entities.UpdateBase{{T}}.AddModification(MongoDB.Entities.Template)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Update(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MongoDB.Entities.Update(Of T)
  name.vb: Update(Of T)
- uid: MongoDB.Entities.Update`1.MatchID(System.String)
  commentId: M:MongoDB.Entities.Update`1.MatchID(System.String)
  id: MatchID(System.String)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: MatchID(String)
  nameWithType: Update<T>.MatchID(String)
  fullName: MongoDB.Entities.Update<T>.MatchID(System.String)
  type: Method
  source:
    id: MatchID
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 86
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an IEntity ID as the matching criteria\n"
  example: []
  syntax:
    content: public Update<T> MatchID(string ID)
    parameters:
    - id: ID
      type: System.String
      description: A unique IEntity ID
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function MatchID(ID As String) As Update(Of T)
  overload: MongoDB.Entities.Update`1.MatchID*
  nameWithType.vb: Update(Of T).MatchID(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).MatchID(System.String)
- uid: MongoDB.Entities.Update`1.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:MongoDB.Entities.Update`1.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: Match(Expression<Func<T, Boolean>>)
  nameWithType: Update<T>.Match(Expression<Func<T, Boolean>>)
  fullName: MongoDB.Entities.Update<T>.Match(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 95
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a lambda expression\n"
  example: []
  syntax:
    content: public Update<T> Match(Expression<Func<T, bool>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: x => x.Property == Value
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function Match(expression As Expression(Of Func(Of T, Boolean))) As Update(Of T)
  overload: MongoDB.Entities.Update`1.Match*
  nameWithType.vb: Update(Of T).Match(Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).Match(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Match(Expression(Of Func(Of T, Boolean)))
- uid: MongoDB.Entities.Update`1.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  commentId: M:MongoDB.Entities.Update`1.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  id: Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  nameWithType: Update<T>.Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  fullName: MongoDB.Entities.Update<T>.Match(System.Func<MongoDB.Driver.FilterDefinitionBuilder<T>, MongoDB.Driver.FilterDefinition<T>>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 104
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a filter expression\n"
  example: []
  syntax:
    content: public Update<T> Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter)
    parameters:
    - id: filter
      type: System.Func{MongoDB.Driver.FilterDefinitionBuilder{{T}},MongoDB.Driver.FilterDefinition{{T}}}
      description: f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function Match(filter As Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))) As Update(Of T)
  overload: MongoDB.Entities.Update`1.Match*
  nameWithType.vb: Update(Of T).Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).Match(System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of T), MongoDB.Driver.FilterDefinition(Of T)))
  name.vb: Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
- uid: MongoDB.Entities.Update`1.Match(MongoDB.Driver.FilterDefinition{`0})
  commentId: M:MongoDB.Entities.Update`1.Match(MongoDB.Driver.FilterDefinition{`0})
  id: Match(MongoDB.Driver.FilterDefinition{`0})
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: Match(FilterDefinition<T>)
  nameWithType: Update<T>.Match(FilterDefinition<T>)
  fullName: MongoDB.Entities.Update<T>.Match(MongoDB.Driver.FilterDefinition<T>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 114
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a filter definition\n"
  example: []
  syntax:
    content: public Update<T> Match(FilterDefinition<T> filterDefinition)
    parameters:
    - id: filterDefinition
      type: MongoDB.Driver.FilterDefinition{{T}}
      description: A filter definition
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function Match(filterDefinition As FilterDefinition(Of T)) As Update(Of T)
  overload: MongoDB.Entities.Update`1.Match*
  nameWithType.vb: Update(Of T).Match(FilterDefinition(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).Match(MongoDB.Driver.FilterDefinition(Of T))
  name.vb: Match(FilterDefinition(Of T))
- uid: MongoDB.Entities.Update`1.Match(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Update`1.Match(MongoDB.Entities.Template)
  id: Match(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: Match(Template)
  nameWithType: Update<T>.Match(Template)
  fullName: MongoDB.Entities.Update<T>.Match(MongoDB.Entities.Template)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 124
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a template\n"
  example: []
  syntax:
    content: public Update<T> Match(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: A Template with a find query
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function Match(template As Template) As Update(Of T)
  overload: MongoDB.Entities.Update`1.Match*
  nameWithType.vb: Update(Of T).Match(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).Match(MongoDB.Entities.Template)
- uid: MongoDB.Entities.Update`1.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  commentId: M:MongoDB.Entities.Update`1.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  id: Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: Match(Search, String, Boolean, Boolean, String)
  nameWithType: Update<T>.Match(Search, String, Boolean, Boolean, String)
  fullName: MongoDB.Entities.Update<T>.Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 139
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify a search term to find results from the text index of this particular collection.\n<p>TIP: Make sure to define a text index with DB.Index&lt;T>() before searching</p>\n"
  example: []
  syntax:
    content: public Update<T> Match(Search searchType, string searchTerm, bool caseSensitive = false, bool diacriticSensitive = false, string language = null)
    parameters:
    - id: searchType
      type: MongoDB.Entities.Search
      description: The type of text matching to do
    - id: searchTerm
      type: System.String
      description: The search term
    - id: caseSensitive
      type: System.Boolean
      description: Case sensitivity of the search (optional)
    - id: diacriticSensitive
      type: System.Boolean
      description: Diacritic sensitivity of the search (optional)
    - id: language
      type: System.String
      description: The language for the search (optional)
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function Match(searchType As Search, searchTerm As String, caseSensitive As Boolean = False, diacriticSensitive As Boolean = False, language As String = Nothing) As Update(Of T)
  overload: MongoDB.Entities.Update`1.Match*
  nameWithType.vb: Update(Of T).Match(Search, String, Boolean, Boolean, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
- uid: MongoDB.Entities.Update`1.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  commentId: M:MongoDB.Entities.Update`1.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  id: Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  nameWithType: Update<T>.Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  fullName: MongoDB.Entities.Update<T>.Match(System.Linq.Expressions.Expression<System.Func<T, System.Object>>, MongoDB.Entities.Coordinates2D, System.Nullable<System.Double>, System.Nullable<System.Double>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 169
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify criteria for matching entities based on GeoSpatial data (longitude &amp; latitude)\n<p>TIP: Make sure to define a Geo2DSphere index with DB.Index&lt;T>() before searching</p>\n<p>Note: DB.FluentGeoNear() supports more advanced options</p>\n"
  example: []
  syntax:
    content: public Update<T> Match(Expression<Func<T, object>> coordinatesProperty, Coordinates2D nearCoordinates, double? maxDistance = default(double? ), double? minDistance = default(double? ))
    parameters:
    - id: coordinatesProperty
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: The property where 2DCoordinates are stored
    - id: nearCoordinates
      type: MongoDB.Entities.Coordinates2D
      description: The search point
    - id: maxDistance
      type: System.Nullable{System.Double}
      description: Maximum distance in meters from the search point
    - id: minDistance
      type: System.Nullable{System.Double}
      description: Minimum distance in meters from the search point
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function Match(coordinatesProperty As Expression(Of Func(Of T, Object)), nearCoordinates As Coordinates2D, maxDistance As Double? = Nothing, minDistance As Double? = Nothing) As Update(Of T)
  overload: MongoDB.Entities.Update`1.Match*
  nameWithType.vb: Update(Of T).Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).Match(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), MongoDB.Entities.Coordinates2D, System.Nullable(Of System.Double), System.Nullable(Of System.Double))
  name.vb: Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
- uid: MongoDB.Entities.Update`1.MatchString(System.String)
  commentId: M:MongoDB.Entities.Update`1.MatchString(System.String)
  id: MatchString(System.String)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: MatchString(String)
  nameWithType: Update<T>.MatchString(String)
  fullName: MongoDB.Entities.Update<T>.MatchString(System.String)
  type: Method
  source:
    id: MatchString
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 178
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a JSON string\n"
  example: []
  syntax:
    content: public Update<T> MatchString(string jsonString)
    parameters:
    - id: jsonString
      type: System.String
      description: '{ Title : &apos;The Power Of Now&apos; }'
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function MatchString(jsonString As String) As Update(Of T)
  overload: MongoDB.Entities.Update`1.MatchString*
  nameWithType.vb: Update(Of T).MatchString(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).MatchString(System.String)
- uid: MongoDB.Entities.Update`1.MatchExpression(System.String)
  commentId: M:MongoDB.Entities.Update`1.MatchExpression(System.String)
  id: MatchExpression(System.String)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: MatchExpression(String)
  nameWithType: Update<T>.MatchExpression(String)
  fullName: MongoDB.Entities.Update<T>.MatchExpression(System.String)
  type: Method
  source:
    id: MatchExpression
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 188
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with an aggregation expression (i.e. $expr)\n"
  example: []
  syntax:
    content: public Update<T> MatchExpression(string expression)
    parameters:
    - id: expression
      type: System.String
      description: '{ $gt: [&apos;$Property1&apos;, &apos;$Property2&apos;] }'
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function MatchExpression(expression As String) As Update(Of T)
  overload: MongoDB.Entities.Update`1.MatchExpression*
  nameWithType.vb: Update(Of T).MatchExpression(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).MatchExpression(System.String)
- uid: MongoDB.Entities.Update`1.MatchExpression(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Update`1.MatchExpression(MongoDB.Entities.Template)
  id: MatchExpression(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: MatchExpression(Template)
  nameWithType: Update<T>.MatchExpression(Template)
  fullName: MongoDB.Entities.Update<T>.MatchExpression(MongoDB.Entities.Template)
  type: Method
  source:
    id: MatchExpression
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 198
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a Template\n"
  example: []
  syntax:
    content: public Update<T> MatchExpression(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: A Template object
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function MatchExpression(template As Template) As Update(Of T)
  overload: MongoDB.Entities.Update`1.MatchExpression*
  nameWithType.vb: Update(Of T).MatchExpression(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).MatchExpression(MongoDB.Entities.Template)
- uid: MongoDB.Entities.Update`1.Modify``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  commentId: M:MongoDB.Entities.Update`1.Modify``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  id: Modify``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: Modify<TProp>(Expression<Func<T, TProp>>, TProp)
  nameWithType: Update<T>.Modify<TProp>(Expression<Func<T, TProp>>, TProp)
  fullName: MongoDB.Entities.Update<T>.Modify<TProp>(System.Linq.Expressions.Expression<System.Func<T, TProp>>, TProp)
  type: Method
  source:
    id: Modify
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 209
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the property and it&apos;s value to modify (use multiple times if needed)\n"
  example: []
  syntax:
    content: public Update<T> Modify<TProp>(Expression<Func<T, TProp>> property, TProp value)
    parameters:
    - id: property
      type: System.Linq.Expressions.Expression{System.Func{{T},{TProp}}}
      description: x => x.Property
    - id: value
      type: '{TProp}'
      description: The value to set on the property
    typeParameters:
    - id: TProp
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function Modify(Of TProp)(property As Expression(Of Func(Of T, TProp)), value As TProp) As Update(Of T)
  overload: MongoDB.Entities.Update`1.Modify*
  nameWithType.vb: Update(Of T).Modify(Of TProp)(Expression(Of Func(Of T, TProp)), TProp)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).Modify(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of T, TProp)), TProp)
  name.vb: Modify(Of TProp)(Expression(Of Func(Of T, TProp)), TProp)
- uid: MongoDB.Entities.Update`1.Modify(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})
  commentId: M:MongoDB.Entities.Update`1.Modify(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})
  id: Modify(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: Modify(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>)
  nameWithType: Update<T>.Modify(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>)
  fullName: MongoDB.Entities.Update<T>.Modify(System.Func<MongoDB.Driver.UpdateDefinitionBuilder<T>, MongoDB.Driver.UpdateDefinition<T>>)
  type: Method
  source:
    id: Modify
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 220
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the update definition builder operation to modify the Entities (use multiple times if needed)\n"
  example: []
  syntax:
    content: public Update<T> Modify(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>> operation)
    parameters:
    - id: operation
      type: System.Func{MongoDB.Driver.UpdateDefinitionBuilder{{T}},MongoDB.Driver.UpdateDefinition{{T}}}
      description: b => b.Inc(x => x.PropName, Value)
    return:
      type: MongoDB.Entities.Update`1
      description: ''
    content.vb: Public Function Modify(operation As Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T))) As Update(Of T)
  overload: MongoDB.Entities.Update`1.Modify*
  nameWithType.vb: Update(Of T).Modify(Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).Modify(System.Func(Of MongoDB.Driver.UpdateDefinitionBuilder(Of T), MongoDB.Driver.UpdateDefinition(Of T)))
  name.vb: Modify(Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T)))
- uid: MongoDB.Entities.Update`1.Modify(System.String)
  commentId: M:MongoDB.Entities.Update`1.Modify(System.String)
  id: Modify(System.String)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: Modify(String)
  nameWithType: Update<T>.Modify(String)
  fullName: MongoDB.Entities.Update<T>.Modify(System.String)
  type: Method
  source:
    id: Modify
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 230
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an update (json string) to modify the Entities (use multiple times if needed)\n"
  example: []
  syntax:
    content: public Update<T> Modify(string update)
    parameters:
    - id: update
      type: System.String
      description: '{ $set: { &apos;RootProp.$[x].SubProp&apos; : 321 } }'
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function Modify(update As String) As Update(Of T)
  overload: MongoDB.Entities.Update`1.Modify*
  nameWithType.vb: Update(Of T).Modify(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).Modify(System.String)
- uid: MongoDB.Entities.Update`1.Modify(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Update`1.Modify(MongoDB.Entities.Template)
  id: Modify(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: Modify(Template)
  nameWithType: Update<T>.Modify(Template)
  fullName: MongoDB.Entities.Update<T>.Modify(MongoDB.Entities.Template)
  type: Method
  source:
    id: Modify
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 240
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an update with a Template to modify the Entities (use multiple times if needed)\n"
  example: []
  syntax:
    content: public Update<T> Modify(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: A Template with a single update
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function Modify(template As Template) As Update(Of T)
  overload: MongoDB.Entities.Update`1.Modify*
  nameWithType.vb: Update(Of T).Modify(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).Modify(MongoDB.Entities.Template)
- uid: MongoDB.Entities.Update`1.ModifyWith(`0)
  commentId: M:MongoDB.Entities.Update`1.ModifyWith(`0)
  id: ModifyWith(`0)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: ModifyWith(T)
  nameWithType: Update<T>.ModifyWith(T)
  fullName: MongoDB.Entities.Update<T>.ModifyWith(T)
  type: Method
  source:
    id: ModifyWith
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 250
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nModify ALL properties with the values from the supplied entity instance.\n"
  example: []
  syntax:
    content: public Update<T> ModifyWith(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: The entity instance to read the property values from
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function ModifyWith(entity As T) As Update(Of T)
  overload: MongoDB.Entities.Update`1.ModifyWith*
  nameWithType.vb: Update(Of T).ModifyWith(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).ModifyWith(T)
- uid: MongoDB.Entities.Update`1.ModifyOnly(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0)
  commentId: M:MongoDB.Entities.Update`1.ModifyOnly(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0)
  id: ModifyOnly(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: ModifyOnly(Expression<Func<T, Object>>, T)
  nameWithType: Update<T>.ModifyOnly(Expression<Func<T, Object>>, T)
  fullName: MongoDB.Entities.Update<T>.ModifyOnly(System.Linq.Expressions.Expression<System.Func<T, System.Object>>, T)
  type: Method
  source:
    id: ModifyOnly
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 262
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nModify ONLY the specified properties with the values from a given entity instance.\n"
  example: []
  syntax:
    content: public Update<T> ModifyOnly(Expression<Func<T, object>> members, T entity)
    parameters:
    - id: members
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: 'A new expression with the properties to include. Ex: <code>x => new { x.PropOne, x.PropTwo }</code>'
    - id: entity
      type: '{T}'
      description: The entity instance to read the corresponding values from
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function ModifyOnly(members As Expression(Of Func(Of T, Object)), entity As T) As Update(Of T)
  overload: MongoDB.Entities.Update`1.ModifyOnly*
  nameWithType.vb: Update(Of T).ModifyOnly(Expression(Of Func(Of T, Object)), T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).ModifyOnly(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), T)
  name.vb: ModifyOnly(Expression(Of Func(Of T, Object)), T)
- uid: MongoDB.Entities.Update`1.ModifyExcept(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0)
  commentId: M:MongoDB.Entities.Update`1.ModifyExcept(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0)
  id: ModifyExcept(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},`0)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: ModifyExcept(Expression<Func<T, Object>>, T)
  nameWithType: Update<T>.ModifyExcept(Expression<Func<T, Object>>, T)
  fullName: MongoDB.Entities.Update<T>.ModifyExcept(System.Linq.Expressions.Expression<System.Func<T, System.Object>>, T)
  type: Method
  source:
    id: ModifyExcept
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 274
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nModify all EXCEPT the specified properties with the values from a given entity instance.\n"
  example: []
  syntax:
    content: public Update<T> ModifyExcept(Expression<Func<T, object>> members, T entity)
    parameters:
    - id: members
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: 'Supply a new expression with the properties to exclude. Ex: <code>x => new { x.Prop1, x.Prop2 }</code>'
    - id: entity
      type: '{T}'
      description: The entity instance to read the corresponding values from
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function ModifyExcept(members As Expression(Of Func(Of T, Object)), entity As T) As Update(Of T)
  overload: MongoDB.Entities.Update`1.ModifyExcept*
  nameWithType.vb: Update(Of T).ModifyExcept(Expression(Of Func(Of T, Object)), T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).ModifyExcept(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), T)
  name.vb: ModifyExcept(Expression(Of Func(Of T, Object)), T)
- uid: MongoDB.Entities.Update`1.WithPipeline(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Update`1.WithPipeline(MongoDB.Entities.Template)
  id: WithPipeline(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: WithPipeline(Template)
  nameWithType: Update<T>.WithPipeline(Template)
  fullName: MongoDB.Entities.Update<T>.WithPipeline(MongoDB.Entities.Template)
  type: Method
  source:
    id: WithPipeline
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 286
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an update pipeline with multiple stages using a Template to modify the Entities.\n<p>NOTE: pipeline updates and regular updates cannot be used together.</p>\n"
  example: []
  syntax:
    content: public Update<T> WithPipeline(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: A Template object containing multiple pipeline stages
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function WithPipeline(template As Template) As Update(Of T)
  overload: MongoDB.Entities.Update`1.WithPipeline*
  nameWithType.vb: Update(Of T).WithPipeline(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).WithPipeline(MongoDB.Entities.Template)
- uid: MongoDB.Entities.Update`1.WithPipelineStage(System.String)
  commentId: M:MongoDB.Entities.Update`1.WithPipelineStage(System.String)
  id: WithPipelineStage(System.String)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: WithPipelineStage(String)
  nameWithType: Update<T>.WithPipelineStage(String)
  fullName: MongoDB.Entities.Update<T>.WithPipelineStage(System.String)
  type: Method
  source:
    id: WithPipelineStage
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 301
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an update pipeline stage to modify the Entities (use multiple times if needed)\n<p>NOTE: pipeline updates and regular updates cannot be used together.</p>\n"
  example: []
  syntax:
    content: public Update<T> WithPipelineStage(string stage)
    parameters:
    - id: stage
      type: System.String
      description: '{ $set: { FullName: { $concat: [&apos;$Name&apos;, &apos; &apos;, &apos;$Surname&apos;] } } }'
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function WithPipelineStage(stage As String) As Update(Of T)
  overload: MongoDB.Entities.Update`1.WithPipelineStage*
  nameWithType.vb: Update(Of T).WithPipelineStage(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).WithPipelineStage(System.String)
- uid: MongoDB.Entities.Update`1.WithPipelineStage(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Update`1.WithPipelineStage(MongoDB.Entities.Template)
  id: WithPipelineStage(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: WithPipelineStage(Template)
  nameWithType: Update<T>.WithPipelineStage(Template)
  fullName: MongoDB.Entities.Update<T>.WithPipelineStage(MongoDB.Entities.Template)
  type: Method
  source:
    id: WithPipelineStage
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 312
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an update pipeline stage using a Template to modify the Entities (use multiple times if needed)\n<p>NOTE: pipeline updates and regular updates cannot be used together.</p>\n"
  example: []
  syntax:
    content: public Update<T> WithPipelineStage(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: A Template object containing a pipeline stage
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function WithPipelineStage(template As Template) As Update(Of T)
  overload: MongoDB.Entities.Update`1.WithPipelineStage*
  nameWithType.vb: Update(Of T).WithPipelineStage(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).WithPipelineStage(MongoDB.Entities.Template)
- uid: MongoDB.Entities.Update`1.WithArrayFilter(System.String)
  commentId: M:MongoDB.Entities.Update`1.WithArrayFilter(System.String)
  id: WithArrayFilter(System.String)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: WithArrayFilter(String)
  nameWithType: Update<T>.WithArrayFilter(String)
  fullName: MongoDB.Entities.Update<T>.WithArrayFilter(System.String)
  type: Method
  source:
    id: WithArrayFilter
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 321
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an array filter to target nested entities for updates (use multiple times if needed).\n"
  example: []
  syntax:
    content: public Update<T> WithArrayFilter(string filter)
    parameters:
    - id: filter
      type: System.String
      description: '{ &apos;x.SubProp&apos;: { $gte: 123 } }'
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function WithArrayFilter(filter As String) As Update(Of T)
  overload: MongoDB.Entities.Update`1.WithArrayFilter*
  nameWithType.vb: Update(Of T).WithArrayFilter(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).WithArrayFilter(System.String)
- uid: MongoDB.Entities.Update`1.WithArrayFilter(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Update`1.WithArrayFilter(MongoDB.Entities.Template)
  id: WithArrayFilter(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: WithArrayFilter(Template)
  nameWithType: Update<T>.WithArrayFilter(Template)
  fullName: MongoDB.Entities.Update<T>.WithArrayFilter(MongoDB.Entities.Template)
  type: Method
  source:
    id: WithArrayFilter
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 337
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify a single array filter using a Template to target nested entities for updates\n"
  example: []
  syntax:
    content: public Update<T> WithArrayFilter(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: ''
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function WithArrayFilter(template As Template) As Update(Of T)
  overload: MongoDB.Entities.Update`1.WithArrayFilter*
  nameWithType.vb: Update(Of T).WithArrayFilter(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).WithArrayFilter(MongoDB.Entities.Template)
- uid: MongoDB.Entities.Update`1.WithArrayFilters(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Update`1.WithArrayFilters(MongoDB.Entities.Template)
  id: WithArrayFilters(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: WithArrayFilters(Template)
  nameWithType: Update<T>.WithArrayFilters(Template)
  fullName: MongoDB.Entities.Update<T>.WithArrayFilters(MongoDB.Entities.Template)
  type: Method
  source:
    id: WithArrayFilters
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 347
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify multiple array filters with a Template to target nested entities for updates.\n"
  example: []
  syntax:
    content: public Update<T> WithArrayFilters(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: The template with an array [...] of filters
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function WithArrayFilters(template As Template) As Update(Of T)
  overload: MongoDB.Entities.Update`1.WithArrayFilters*
  nameWithType.vb: Update(Of T).WithArrayFilters(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).WithArrayFilters(MongoDB.Entities.Template)
- uid: MongoDB.Entities.Update`1.Option(System.Action{MongoDB.Driver.UpdateOptions})
  commentId: M:MongoDB.Entities.Update`1.Option(System.Action{MongoDB.Driver.UpdateOptions})
  id: Option(System.Action{MongoDB.Driver.UpdateOptions})
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: Option(Action<UpdateOptions>)
  nameWithType: Update<T>.Option(Action<UpdateOptions>)
  fullName: MongoDB.Entities.Update<T>.Option(System.Action<MongoDB.Driver.UpdateOptions>)
  type: Method
  source:
    id: Option
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 364
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an option for this update command (use multiple times if needed)\n<p>TIP: Setting options is not required</p>\n"
  example: []
  syntax:
    content: public Update<T> Option(Action<UpdateOptions> option)
    parameters:
    - id: option
      type: System.Action{MongoDB.Driver.UpdateOptions}
      description: x => x.OptionName = OptionValue
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function Option(option As Action(Of UpdateOptions)) As Update(Of T)
  overload: MongoDB.Entities.Update`1.Option*
  nameWithType.vb: Update(Of T).Option(Action(Of UpdateOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).Option(System.Action(Of MongoDB.Driver.UpdateOptions))
  name.vb: Option(Action(Of UpdateOptions))
- uid: MongoDB.Entities.Update`1.IgnoreGlobalFilters
  commentId: M:MongoDB.Entities.Update`1.IgnoreGlobalFilters
  id: IgnoreGlobalFilters
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: IgnoreGlobalFilters()
  nameWithType: Update<T>.IgnoreGlobalFilters()
  fullName: MongoDB.Entities.Update<T>.IgnoreGlobalFilters()
  type: Method
  source:
    id: IgnoreGlobalFilters
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 373
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify that this operation should ignore any global filters\n"
  example: []
  syntax:
    content: public Update<T> IgnoreGlobalFilters()
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function IgnoreGlobalFilters As Update(Of T)
  overload: MongoDB.Entities.Update`1.IgnoreGlobalFilters*
  nameWithType.vb: Update(Of T).IgnoreGlobalFilters()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).IgnoreGlobalFilters()
- uid: MongoDB.Entities.Update`1.AddToQueue
  commentId: M:MongoDB.Entities.Update`1.AddToQueue
  id: AddToQueue
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: AddToQueue()
  nameWithType: Update<T>.AddToQueue()
  fullName: MongoDB.Entities.Update<T>.AddToQueue()
  type: Method
  source:
    id: AddToQueue
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 382
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nQueue up an update command for bulk execution later.\n"
  example: []
  syntax:
    content: public Update<T> AddToQueue()
    return:
      type: MongoDB.Entities.Update`1
    content.vb: Public Function AddToQueue As Update(Of T)
  overload: MongoDB.Entities.Update`1.AddToQueue*
  nameWithType.vb: Update(Of T).AddToQueue()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).AddToQueue()
- uid: MongoDB.Entities.Update`1.ExecuteAsync(System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Update`1.ExecuteAsync(System.Threading.CancellationToken)
  id: ExecuteAsync(System.Threading.CancellationToken)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: ExecuteAsync(CancellationToken)
  nameWithType: Update<T>.ExecuteAsync(CancellationToken)
  fullName: MongoDB.Entities.Update<T>.ExecuteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    id: ExecuteAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 406
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRun the update command in MongoDB.\n"
  example: []
  syntax:
    content: public async Task<UpdateResult> ExecuteAsync(CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{MongoDB.Driver.UpdateResult}
    content.vb: Public Function ExecuteAsync(cancellation As CancellationToken = Nothing) As Task(Of UpdateResult)
  overload: MongoDB.Entities.Update`1.ExecuteAsync*
  nameWithType.vb: Update(Of T).ExecuteAsync(CancellationToken)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).ExecuteAsync(System.Threading.CancellationToken)
- uid: MongoDB.Entities.Update`1.ExecutePipelineAsync(System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Update`1.ExecutePipelineAsync(System.Threading.CancellationToken)
  id: ExecutePipelineAsync(System.Threading.CancellationToken)
  parent: MongoDB.Entities.Update`1
  langs:
  - csharp
  - vb
  name: ExecutePipelineAsync(CancellationToken)
  nameWithType: Update<T>.ExecutePipelineAsync(CancellationToken)
  fullName: MongoDB.Entities.Update<T>.ExecutePipelineAsync(System.Threading.CancellationToken)
  type: Method
  source:
    id: ExecutePipelineAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\Update.cs
    startLine: 439
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRun the update command with pipeline stages\n"
  example: []
  syntax:
    content: public Task<UpdateResult> ExecutePipelineAsync(CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{MongoDB.Driver.UpdateResult}
    content.vb: Public Function ExecutePipelineAsync(cancellation As CancellationToken = Nothing) As Task(Of UpdateResult)
  overload: MongoDB.Entities.Update`1.ExecutePipelineAsync*
  nameWithType.vb: Update(Of T).ExecutePipelineAsync(CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Update(Of T).ExecutePipelineAsync(System.Threading.CancellationToken)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MongoDB.Entities.UpdateBase{{T}}
  commentId: T:MongoDB.Entities.UpdateBase{`0}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.UpdateBase`1
  name: UpdateBase<T>
  nameWithType: UpdateBase<T>
  fullName: MongoDB.Entities.UpdateBase<T>
  nameWithType.vb: UpdateBase(Of T)
  fullName.vb: MongoDB.Entities.UpdateBase(Of T)
  name.vb: UpdateBase(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.UpdateBase`1
    name: UpdateBase
    nameWithType: UpdateBase
    fullName: MongoDB.Entities.UpdateBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.UpdateBase`1
    name: UpdateBase
    nameWithType: UpdateBase
    fullName: MongoDB.Entities.UpdateBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.UpdateBase{{T}}.defs
  commentId: F:MongoDB.Entities.UpdateBase{`0}.defs
  parent: MongoDB.Entities.UpdateBase{{T}}
  definition: MongoDB.Entities.UpdateBase`1.defs
  name: defs
  nameWithType: UpdateBase<T>.defs
  fullName: MongoDB.Entities.UpdateBase<T>.defs
  nameWithType.vb: UpdateBase(Of T).defs
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).defs
- uid: MongoDB.Entities.UpdateBase{{T}}.AddModification``1(System.Linq.Expressions.Expression{System.Func{{T},{TProp}}},{TProp})
  commentId: M:MongoDB.Entities.UpdateBase{`0}.AddModification``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  parent: MongoDB.Entities.UpdateBase{{T}}
  definition: MongoDB.Entities.UpdateBase`1.AddModification``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  name: AddModification<TProp>(Expression<Func<T, TProp>>, TProp)
  nameWithType: UpdateBase<T>.AddModification<TProp>(Expression<Func<T, TProp>>, TProp)
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification<TProp>(System.Linq.Expressions.Expression<System.Func<T, TProp>>, TProp)
  nameWithType.vb: UpdateBase(Of T).AddModification(Of TProp)(Expression(Of Func(Of T, TProp)), TProp)
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of T, TProp)), TProp)
  name.vb: AddModification(Of TProp)(Expression(Of Func(Of T, TProp)), TProp)
  spec.csharp:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
    name: AddModification<TProp>
    nameWithType: UpdateBase<T>.AddModification<TProp>
    fullName: MongoDB.Entities.UpdateBase<T>.AddModification<TProp>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
    name: AddModification(Of TProp)
    nameWithType: UpdateBase(Of T).AddModification(Of TProp)
    fullName: MongoDB.Entities.UpdateBase(Of T).AddModification(Of TProp)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.UpdateBase{{T}}.AddModification(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{{T}},MongoDB.Driver.UpdateDefinition{{T}}})
  commentId: M:MongoDB.Entities.UpdateBase{`0}.AddModification(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})
  parent: MongoDB.Entities.UpdateBase{{T}}
  definition: MongoDB.Entities.UpdateBase`1.AddModification(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})
  name: AddModification(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>)
  nameWithType: UpdateBase<T>.AddModification(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>)
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification(System.Func<MongoDB.Driver.UpdateDefinitionBuilder<T>, MongoDB.Driver.UpdateDefinition<T>>)
  nameWithType.vb: UpdateBase(Of T).AddModification(Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T)))
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification(System.Func(Of MongoDB.Driver.UpdateDefinitionBuilder(Of T), MongoDB.Driver.UpdateDefinition(Of T)))
  name.vb: AddModification(Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T)))
  spec.csharp:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})
    name: AddModification
    nameWithType: UpdateBase<T>.AddModification
    fullName: MongoDB.Entities.UpdateBase<T>.AddModification
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.UpdateDefinitionBuilder`1
    name: UpdateDefinitionBuilder
    nameWithType: UpdateDefinitionBuilder
    fullName: MongoDB.Driver.UpdateDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.UpdateDefinition`1
    name: UpdateDefinition
    nameWithType: UpdateDefinition
    fullName: MongoDB.Driver.UpdateDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})
    name: AddModification
    nameWithType: UpdateBase(Of T).AddModification
    fullName: MongoDB.Entities.UpdateBase(Of T).AddModification
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.UpdateDefinitionBuilder`1
    name: UpdateDefinitionBuilder
    nameWithType: UpdateDefinitionBuilder
    fullName: MongoDB.Driver.UpdateDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.UpdateDefinition`1
    name: UpdateDefinition
    nameWithType: UpdateDefinition
    fullName: MongoDB.Driver.UpdateDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.UpdateBase{{T}}.AddModification(System.String)
  commentId: M:MongoDB.Entities.UpdateBase{`0}.AddModification(System.String)
  parent: MongoDB.Entities.UpdateBase{{T}}
  definition: MongoDB.Entities.UpdateBase`1.AddModification(System.String)
  name: AddModification(String)
  nameWithType: UpdateBase<T>.AddModification(String)
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification(System.String)
  nameWithType.vb: UpdateBase(Of T).AddModification(String)
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification(System.String)
    name: AddModification
    nameWithType: UpdateBase<T>.AddModification
    fullName: MongoDB.Entities.UpdateBase<T>.AddModification
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification(System.String)
    name: AddModification
    nameWithType: UpdateBase(Of T).AddModification
    fullName: MongoDB.Entities.UpdateBase(Of T).AddModification
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.UpdateBase{{T}}.AddModification(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.UpdateBase{`0}.AddModification(MongoDB.Entities.Template)
  parent: MongoDB.Entities.UpdateBase{{T}}
  definition: MongoDB.Entities.UpdateBase`1.AddModification(MongoDB.Entities.Template)
  name: AddModification(Template)
  nameWithType: UpdateBase<T>.AddModification(Template)
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification(MongoDB.Entities.Template)
  nameWithType.vb: UpdateBase(Of T).AddModification(Template)
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification(MongoDB.Entities.Template)
  spec.csharp:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification(MongoDB.Entities.Template)
    name: AddModification
    nameWithType: UpdateBase<T>.AddModification
    fullName: MongoDB.Entities.UpdateBase<T>.AddModification
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification(MongoDB.Entities.Template)
    name: AddModification
    nameWithType: UpdateBase(Of T).AddModification
    fullName: MongoDB.Entities.UpdateBase(Of T).AddModification
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MongoDB.Entities.UpdateBase`1
  commentId: T:MongoDB.Entities.UpdateBase`1
  name: UpdateBase<T>
  nameWithType: UpdateBase<T>
  fullName: MongoDB.Entities.UpdateBase<T>
  nameWithType.vb: UpdateBase(Of T)
  fullName.vb: MongoDB.Entities.UpdateBase(Of T)
  name.vb: UpdateBase(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.UpdateBase`1
    name: UpdateBase
    nameWithType: UpdateBase
    fullName: MongoDB.Entities.UpdateBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.UpdateBase`1
    name: UpdateBase
    nameWithType: UpdateBase
    fullName: MongoDB.Entities.UpdateBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.UpdateBase`1.defs
  commentId: F:MongoDB.Entities.UpdateBase`1.defs
  name: defs
  nameWithType: UpdateBase<T>.defs
  fullName: MongoDB.Entities.UpdateBase<T>.defs
  nameWithType.vb: UpdateBase(Of T).defs
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).defs
- uid: MongoDB.Entities.UpdateBase`1.AddModification``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  commentId: M:MongoDB.Entities.UpdateBase`1.AddModification``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
  isExternal: true
  name: AddModification<TProp>(Expression<Func<T, TProp>>, TProp)
  nameWithType: UpdateBase<T>.AddModification<TProp>(Expression<Func<T, TProp>>, TProp)
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification<TProp>(System.Linq.Expressions.Expression<System.Func<T, TProp>>, TProp)
  nameWithType.vb: UpdateBase(Of T).AddModification(Of TProp)(Expression(Of Func(Of T, TProp)), TProp)
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification(Of TProp)(System.Linq.Expressions.Expression(Of System.Func(Of T, TProp)), TProp)
  name.vb: AddModification(Of TProp)(Expression(Of Func(Of T, TProp)), TProp)
  spec.csharp:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
    name: AddModification<TProp>
    nameWithType: UpdateBase<T>.AddModification<TProp>
    fullName: MongoDB.Entities.UpdateBase<T>.AddModification<TProp>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)
    name: AddModification(Of TProp)
    nameWithType: UpdateBase(Of T).AddModification(Of TProp)
    fullName: MongoDB.Entities.UpdateBase(Of T).AddModification(Of TProp)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.UpdateBase`1.AddModification(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})
  commentId: M:MongoDB.Entities.UpdateBase`1.AddModification(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})
  isExternal: true
  name: AddModification(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>)
  nameWithType: UpdateBase<T>.AddModification(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>)
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification(System.Func<MongoDB.Driver.UpdateDefinitionBuilder<T>, MongoDB.Driver.UpdateDefinition<T>>)
  nameWithType.vb: UpdateBase(Of T).AddModification(Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T)))
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification(System.Func(Of MongoDB.Driver.UpdateDefinitionBuilder(Of T), MongoDB.Driver.UpdateDefinition(Of T)))
  name.vb: AddModification(Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T)))
  spec.csharp:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})
    name: AddModification
    nameWithType: UpdateBase<T>.AddModification
    fullName: MongoDB.Entities.UpdateBase<T>.AddModification
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.UpdateDefinitionBuilder`1
    name: UpdateDefinitionBuilder
    nameWithType: UpdateDefinitionBuilder
    fullName: MongoDB.Driver.UpdateDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.UpdateDefinition`1
    name: UpdateDefinition
    nameWithType: UpdateDefinition
    fullName: MongoDB.Driver.UpdateDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification(System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}})
    name: AddModification
    nameWithType: UpdateBase(Of T).AddModification
    fullName: MongoDB.Entities.UpdateBase(Of T).AddModification
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.UpdateDefinitionBuilder`1
    name: UpdateDefinitionBuilder
    nameWithType: UpdateDefinitionBuilder
    fullName: MongoDB.Driver.UpdateDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.UpdateDefinition`1
    name: UpdateDefinition
    nameWithType: UpdateDefinition
    fullName: MongoDB.Driver.UpdateDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.UpdateBase`1.AddModification(System.String)
  commentId: M:MongoDB.Entities.UpdateBase`1.AddModification(System.String)
  isExternal: true
  name: AddModification(String)
  nameWithType: UpdateBase<T>.AddModification(String)
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification(System.String)
  nameWithType.vb: UpdateBase(Of T).AddModification(String)
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification(System.String)
    name: AddModification
    nameWithType: UpdateBase<T>.AddModification
    fullName: MongoDB.Entities.UpdateBase<T>.AddModification
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification(System.String)
    name: AddModification
    nameWithType: UpdateBase(Of T).AddModification
    fullName: MongoDB.Entities.UpdateBase(Of T).AddModification
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.UpdateBase`1.AddModification(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.UpdateBase`1.AddModification(MongoDB.Entities.Template)
  name: AddModification(Template)
  nameWithType: UpdateBase<T>.AddModification(Template)
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification(MongoDB.Entities.Template)
  nameWithType.vb: UpdateBase(Of T).AddModification(Template)
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification(MongoDB.Entities.Template)
  spec.csharp:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification(MongoDB.Entities.Template)
    name: AddModification
    nameWithType: UpdateBase<T>.AddModification
    fullName: MongoDB.Entities.UpdateBase<T>.AddModification
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.UpdateBase`1.AddModification(MongoDB.Entities.Template)
    name: AddModification
    nameWithType: UpdateBase(Of T).AddModification
    fullName: MongoDB.Entities.UpdateBase(Of T).AddModification
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Update`1.MatchID*
  commentId: Overload:MongoDB.Entities.Update`1.MatchID
  name: MatchID
  nameWithType: Update<T>.MatchID
  fullName: MongoDB.Entities.Update<T>.MatchID
  nameWithType.vb: Update(Of T).MatchID
  fullName.vb: MongoDB.Entities.Update(Of T).MatchID
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MongoDB.Entities.Update`1
  commentId: T:MongoDB.Entities.Update`1
  parent: MongoDB.Entities
  name: Update<T>
  nameWithType: Update<T>
  fullName: MongoDB.Entities.Update<T>
  nameWithType.vb: Update(Of T)
  fullName.vb: MongoDB.Entities.Update(Of T)
  name.vb: Update(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.Update`1
    name: Update
    nameWithType: Update
    fullName: MongoDB.Entities.Update
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Update`1
    name: Update
    nameWithType: Update
    fullName: MongoDB.Entities.Update
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Update`1.Match*
  commentId: Overload:MongoDB.Entities.Update`1.Match
  name: Match
  nameWithType: Update<T>.Match
  fullName: MongoDB.Entities.Update<T>.Match
  nameWithType.vb: Update(Of T).Match
  fullName.vb: MongoDB.Entities.Update(Of T).Match
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Func{MongoDB.Driver.FilterDefinitionBuilder{{T}},MongoDB.Driver.FilterDefinition{{T}}}
  commentId: T:System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}}
  parent: System
  definition: System.Func`2
  name: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  nameWithType: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  fullName: System.Func<MongoDB.Driver.FilterDefinitionBuilder<T>, MongoDB.Driver.FilterDefinition<T>>
  nameWithType.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  fullName.vb: System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of T), MongoDB.Driver.FilterDefinition(Of T))
  name.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.FilterDefinition{{T}}
  commentId: T:MongoDB.Driver.FilterDefinition{`0}
  parent: MongoDB.Driver
  definition: MongoDB.Driver.FilterDefinition`1
  name: FilterDefinition<T>
  nameWithType: FilterDefinition<T>
  fullName: MongoDB.Driver.FilterDefinition<T>
  nameWithType.vb: FilterDefinition(Of T)
  fullName.vb: MongoDB.Driver.FilterDefinition(Of T)
  name.vb: FilterDefinition(Of T)
  spec.csharp:
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.FilterDefinition`1
  commentId: T:MongoDB.Driver.FilterDefinition`1
  isExternal: true
  name: FilterDefinition<TDocument>
  nameWithType: FilterDefinition<TDocument>
  fullName: MongoDB.Driver.FilterDefinition<TDocument>
  nameWithType.vb: FilterDefinition(Of TDocument)
  fullName.vb: MongoDB.Driver.FilterDefinition(Of TDocument)
  name.vb: FilterDefinition(Of TDocument)
  spec.csharp:
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDocument
    nameWithType: TDocument
    fullName: TDocument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDocument
    nameWithType: TDocument
    fullName: TDocument
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver
  commentId: N:MongoDB.Driver
  isExternal: true
  name: MongoDB.Driver
  nameWithType: MongoDB.Driver
  fullName: MongoDB.Driver
- uid: MongoDB.Entities.Template
  commentId: T:MongoDB.Entities.Template
  parent: MongoDB.Entities
  name: Template
  nameWithType: Template
  fullName: MongoDB.Entities.Template
- uid: MongoDB.Entities.Search
  commentId: T:MongoDB.Entities.Search
  parent: MongoDB.Entities
  name: Search
  nameWithType: Search
  fullName: MongoDB.Entities.Search
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Object}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Object>>
  nameWithType: Expression<Func<T, Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>
  nameWithType.vb: Expression(Of Func(Of T, Object))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))
  name.vb: Expression(Of Func(Of T, Object))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Coordinates2D
  commentId: T:MongoDB.Entities.Coordinates2D
  parent: MongoDB.Entities
  name: Coordinates2D
  nameWithType: Coordinates2D
  fullName: MongoDB.Entities.Coordinates2D
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Update`1.MatchString*
  commentId: Overload:MongoDB.Entities.Update`1.MatchString
  name: MatchString
  nameWithType: Update<T>.MatchString
  fullName: MongoDB.Entities.Update<T>.MatchString
  nameWithType.vb: Update(Of T).MatchString
  fullName.vb: MongoDB.Entities.Update(Of T).MatchString
- uid: MongoDB.Entities.Update`1.MatchExpression*
  commentId: Overload:MongoDB.Entities.Update`1.MatchExpression
  name: MatchExpression
  nameWithType: Update<T>.MatchExpression
  fullName: MongoDB.Entities.Update<T>.MatchExpression
  nameWithType.vb: Update(Of T).MatchExpression
  fullName.vb: MongoDB.Entities.Update(Of T).MatchExpression
- uid: MongoDB.Entities.Update`1.Modify*
  commentId: Overload:MongoDB.Entities.Update`1.Modify
  name: Modify
  nameWithType: Update<T>.Modify
  fullName: MongoDB.Entities.Update<T>.Modify
  nameWithType.vb: Update(Of T).Modify
  fullName.vb: MongoDB.Entities.Update(Of T).Modify
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TProp}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TProp>>
  nameWithType: Expression<Func<T, TProp>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TProp>>
  nameWithType.vb: Expression(Of Func(Of T, TProp))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TProp))
  name.vb: Expression(Of Func(Of T, TProp))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TProp}'
  commentId: '!:TProp'
  definition: TProp
  name: TProp
  nameWithType: TProp
  fullName: TProp
- uid: TProp
  name: TProp
  nameWithType: TProp
  fullName: TProp
- uid: System.Func{MongoDB.Driver.UpdateDefinitionBuilder{{T}},MongoDB.Driver.UpdateDefinition{{T}}}
  commentId: T:System.Func{MongoDB.Driver.UpdateDefinitionBuilder{`0},MongoDB.Driver.UpdateDefinition{`0}}
  parent: System
  definition: System.Func`2
  name: Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>
  nameWithType: Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>
  fullName: System.Func<MongoDB.Driver.UpdateDefinitionBuilder<T>, MongoDB.Driver.UpdateDefinition<T>>
  nameWithType.vb: Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T))
  fullName.vb: System.Func(Of MongoDB.Driver.UpdateDefinitionBuilder(Of T), MongoDB.Driver.UpdateDefinition(Of T))
  name.vb: Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.UpdateDefinitionBuilder`1
    name: UpdateDefinitionBuilder
    nameWithType: UpdateDefinitionBuilder
    fullName: MongoDB.Driver.UpdateDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.UpdateDefinition`1
    name: UpdateDefinition
    nameWithType: UpdateDefinition
    fullName: MongoDB.Driver.UpdateDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.UpdateDefinitionBuilder`1
    name: UpdateDefinitionBuilder
    nameWithType: UpdateDefinitionBuilder
    fullName: MongoDB.Driver.UpdateDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.UpdateDefinition`1
    name: UpdateDefinition
    nameWithType: UpdateDefinition
    fullName: MongoDB.Driver.UpdateDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Update`1.ModifyWith*
  commentId: Overload:MongoDB.Entities.Update`1.ModifyWith
  name: ModifyWith
  nameWithType: Update<T>.ModifyWith
  fullName: MongoDB.Entities.Update<T>.ModifyWith
  nameWithType.vb: Update(Of T).ModifyWith
  fullName.vb: MongoDB.Entities.Update(Of T).ModifyWith
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MongoDB.Entities.Update`1.ModifyOnly*
  commentId: Overload:MongoDB.Entities.Update`1.ModifyOnly
  name: ModifyOnly
  nameWithType: Update<T>.ModifyOnly
  fullName: MongoDB.Entities.Update<T>.ModifyOnly
  nameWithType.vb: Update(Of T).ModifyOnly
  fullName.vb: MongoDB.Entities.Update(Of T).ModifyOnly
- uid: MongoDB.Entities.Update`1.ModifyExcept*
  commentId: Overload:MongoDB.Entities.Update`1.ModifyExcept
  name: ModifyExcept
  nameWithType: Update<T>.ModifyExcept
  fullName: MongoDB.Entities.Update<T>.ModifyExcept
  nameWithType.vb: Update(Of T).ModifyExcept
  fullName.vb: MongoDB.Entities.Update(Of T).ModifyExcept
- uid: MongoDB.Entities.Update`1.WithPipeline*
  commentId: Overload:MongoDB.Entities.Update`1.WithPipeline
  name: WithPipeline
  nameWithType: Update<T>.WithPipeline
  fullName: MongoDB.Entities.Update<T>.WithPipeline
  nameWithType.vb: Update(Of T).WithPipeline
  fullName.vb: MongoDB.Entities.Update(Of T).WithPipeline
- uid: MongoDB.Entities.Update`1.WithPipelineStage*
  commentId: Overload:MongoDB.Entities.Update`1.WithPipelineStage
  name: WithPipelineStage
  nameWithType: Update<T>.WithPipelineStage
  fullName: MongoDB.Entities.Update<T>.WithPipelineStage
  nameWithType.vb: Update(Of T).WithPipelineStage
  fullName.vb: MongoDB.Entities.Update(Of T).WithPipelineStage
- uid: MongoDB.Entities.Update`1.WithArrayFilter*
  commentId: Overload:MongoDB.Entities.Update`1.WithArrayFilter
  name: WithArrayFilter
  nameWithType: Update<T>.WithArrayFilter
  fullName: MongoDB.Entities.Update<T>.WithArrayFilter
  nameWithType.vb: Update(Of T).WithArrayFilter
  fullName.vb: MongoDB.Entities.Update(Of T).WithArrayFilter
- uid: MongoDB.Entities.Update`1.WithArrayFilters*
  commentId: Overload:MongoDB.Entities.Update`1.WithArrayFilters
  name: WithArrayFilters
  nameWithType: Update<T>.WithArrayFilters
  fullName: MongoDB.Entities.Update<T>.WithArrayFilters
  nameWithType.vb: Update(Of T).WithArrayFilters
  fullName.vb: MongoDB.Entities.Update(Of T).WithArrayFilters
- uid: MongoDB.Entities.Update`1.Option*
  commentId: Overload:MongoDB.Entities.Update`1.Option
  name: Option
  nameWithType: Update<T>.Option
  fullName: MongoDB.Entities.Update<T>.Option
  nameWithType.vb: Update(Of T).Option
  fullName.vb: MongoDB.Entities.Update(Of T).Option
- uid: System.Action{MongoDB.Driver.UpdateOptions}
  commentId: T:System.Action{MongoDB.Driver.UpdateOptions}
  parent: System
  definition: System.Action`1
  name: Action<UpdateOptions>
  nameWithType: Action<UpdateOptions>
  fullName: System.Action<MongoDB.Driver.UpdateOptions>
  nameWithType.vb: Action(Of UpdateOptions)
  fullName.vb: System.Action(Of MongoDB.Driver.UpdateOptions)
  name.vb: Action(Of UpdateOptions)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.UpdateOptions
    name: UpdateOptions
    nameWithType: UpdateOptions
    fullName: MongoDB.Driver.UpdateOptions
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.UpdateOptions
    name: UpdateOptions
    nameWithType: UpdateOptions
    fullName: MongoDB.Driver.UpdateOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Update`1.IgnoreGlobalFilters*
  commentId: Overload:MongoDB.Entities.Update`1.IgnoreGlobalFilters
  name: IgnoreGlobalFilters
  nameWithType: Update<T>.IgnoreGlobalFilters
  fullName: MongoDB.Entities.Update<T>.IgnoreGlobalFilters
  nameWithType.vb: Update(Of T).IgnoreGlobalFilters
  fullName.vb: MongoDB.Entities.Update(Of T).IgnoreGlobalFilters
- uid: MongoDB.Entities.Update`1.AddToQueue*
  commentId: Overload:MongoDB.Entities.Update`1.AddToQueue
  name: AddToQueue
  nameWithType: Update<T>.AddToQueue
  fullName: MongoDB.Entities.Update<T>.AddToQueue
  nameWithType.vb: Update(Of T).AddToQueue
  fullName.vb: MongoDB.Entities.Update(Of T).AddToQueue
- uid: MongoDB.Entities.Update`1.ExecuteAsync*
  commentId: Overload:MongoDB.Entities.Update`1.ExecuteAsync
  name: ExecuteAsync
  nameWithType: Update<T>.ExecuteAsync
  fullName: MongoDB.Entities.Update<T>.ExecuteAsync
  nameWithType.vb: Update(Of T).ExecuteAsync
  fullName.vb: MongoDB.Entities.Update(Of T).ExecuteAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{MongoDB.Driver.UpdateResult}
  commentId: T:System.Threading.Tasks.Task{MongoDB.Driver.UpdateResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UpdateResult>
  nameWithType: Task<UpdateResult>
  fullName: System.Threading.Tasks.Task<MongoDB.Driver.UpdateResult>
  nameWithType.vb: Task(Of UpdateResult)
  fullName.vb: System.Threading.Tasks.Task(Of MongoDB.Driver.UpdateResult)
  name.vb: Task(Of UpdateResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.UpdateResult
    name: UpdateResult
    nameWithType: UpdateResult
    fullName: MongoDB.Driver.UpdateResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.UpdateResult
    name: UpdateResult
    nameWithType: UpdateResult
    fullName: MongoDB.Driver.UpdateResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: MongoDB.Entities.Update`1.ExecutePipelineAsync*
  commentId: Overload:MongoDB.Entities.Update`1.ExecutePipelineAsync
  name: ExecutePipelineAsync
  nameWithType: Update<T>.ExecutePipelineAsync
  fullName: MongoDB.Entities.Update<T>.ExecutePipelineAsync
  nameWithType.vb: Update(Of T).ExecutePipelineAsync
  fullName.vb: MongoDB.Entities.Update(Of T).ExecutePipelineAsync
