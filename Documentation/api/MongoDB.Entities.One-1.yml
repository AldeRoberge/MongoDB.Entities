### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.One`1
  commentId: T:MongoDB.Entities.One`1
  id: One`1
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.One`1.#ctor
  - MongoDB.Entities.One`1.ID
  - MongoDB.Entities.One`1.op_Implicit(`0)~MongoDB.Entities.One{`0}
  - MongoDB.Entities.One`1.op_Implicit(System.String)~MongoDB.Entities.One{`0}
  - MongoDB.Entities.One`1.ToEntityAsync(MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - MongoDB.Entities.One`1.ToEntityAsync(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`0}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  - MongoDB.Entities.One`1.ToEntityAsync(System.Linq.Expressions.Expression{System.Func{`0,`0}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: One<T>
  nameWithType: One<T>
  fullName: MongoDB.Entities.One<T>
  type: Class
  source:
    id: One
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 13
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents a one-to-one relationship with an IEntity.\n"
  example: []
  syntax:
    content: >-
      public class One<T>
          where T : IEntity
    typeParameters:
    - id: T
      description: Any type that implements IEntity
    content.vb: Public Class One(Of T As IEntity)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: One(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MongoDB.Entities.One(Of T)
  name.vb: One(Of T)
- uid: MongoDB.Entities.One`1.ID
  commentId: P:MongoDB.Entities.One`1.ID
  id: ID
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: ID
  nameWithType: One<T>.ID
  fullName: MongoDB.Entities.One<T>.ID
  type: Property
  source:
    id: ID
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 18
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThe Id of the entity referenced by this instance.\n"
  example: []
  syntax:
    content: >-
      [AsObjectId]

      public string ID { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <AsObjectId>

      Public Property ID As String
  overload: MongoDB.Entities.One`1.ID*
  attributes:
  - type: MongoDB.Entities.AsObjectIdAttribute
    ctor: MongoDB.Entities.AsObjectIdAttribute.#ctor
    arguments: []
  nameWithType.vb: One(Of T).ID
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.One(Of T).ID
- uid: MongoDB.Entities.One`1.#ctor
  commentId: M:MongoDB.Entities.One`1.#ctor
  id: '#ctor'
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: One()
  nameWithType: One<T>.One()
  fullName: MongoDB.Entities.One<T>.One()
  type: Constructor
  source:
    id: .ctor
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 21
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  syntax:
    content: public One()
    content.vb: Public Sub New
  overload: MongoDB.Entities.One`1.#ctor*
  nameWithType.vb: One(Of T).One()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.One(Of T).One()
- uid: MongoDB.Entities.One`1.op_Implicit(System.String)~MongoDB.Entities.One{`0}
  commentId: M:MongoDB.Entities.One`1.op_Implicit(System.String)~MongoDB.Entities.One{`0}
  id: op_Implicit(System.String)~MongoDB.Entities.One{`0}
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: Implicit(String to One<T>)
  nameWithType: One<T>.Implicit(String to One<T>)
  fullName: MongoDB.Entities.One<T>.Implicit(System.String to MongoDB.Entities.One<T>)
  type: Operator
  source:
    id: op_Implicit
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 38
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nOperator for returning a new One&lt;T> object from a string ID\n"
  example: []
  syntax:
    content: public static implicit operator One<T>(string id)
    parameters:
    - id: id
      type: System.String
      description: The ID to create a new One&lt;T> with
    return:
      type: MongoDB.Entities.One`1
    content.vb: Public Shared Widening Operator CType(id As String) As One(Of T)
  overload: MongoDB.Entities.One`1.op_Implicit*
  nameWithType.vb: One(Of T).Widening(String to One(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.One(Of T).Widening(System.String to MongoDB.Entities.One(Of T))
  name.vb: Widening(String to One(Of T))
- uid: MongoDB.Entities.One`1.op_Implicit(`0)~MongoDB.Entities.One{`0}
  commentId: M:MongoDB.Entities.One`1.op_Implicit(`0)~MongoDB.Entities.One{`0}
  id: op_Implicit(`0)~MongoDB.Entities.One{`0}
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: Implicit(T to One<T>)
  nameWithType: One<T>.Implicit(T to One<T>)
  fullName: MongoDB.Entities.One<T>.Implicit(T to MongoDB.Entities.One<T>)
  type: Operator
  source:
    id: op_Implicit
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 47
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nOperator for returning a new One&lt;T> object from an entity\n"
  example: []
  syntax:
    content: public static implicit operator One<T>(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to make a reference to
    return:
      type: MongoDB.Entities.One`1
    content.vb: Public Shared Widening Operator CType(entity As T) As One(Of T)
  overload: MongoDB.Entities.One`1.op_Implicit*
  nameWithType.vb: One(Of T).Widening(T to One(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.One(Of T).Widening(T to MongoDB.Entities.One(Of T))
  name.vb: Widening(T to One(Of T))
- uid: MongoDB.Entities.One`1.ToEntityAsync(MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.One`1.ToEntityAsync(MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  id: ToEntityAsync(MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: ToEntityAsync(IClientSessionHandle, CancellationToken)
  nameWithType: One<T>.ToEntityAsync(IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.One<T>.ToEntityAsync(MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  type: Method
  source:
    id: ToEntityAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 58
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nFetches the actual entity this reference represents from the database.\n"
  example: []
  syntax:
    content: public Task<T> ToEntityAsync(IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: A Task containing the actual entity
    content.vb: Public Function ToEntityAsync(session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of T)
  overload: MongoDB.Entities.One`1.ToEntityAsync*
  nameWithType.vb: One(Of T).ToEntityAsync(IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.One(Of T).ToEntityAsync(MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
- uid: MongoDB.Entities.One`1.ToEntityAsync(System.Linq.Expressions.Expression{System.Func{`0,`0}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.One`1.ToEntityAsync(System.Linq.Expressions.Expression{System.Func{`0,`0}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  id: ToEntityAsync(System.Linq.Expressions.Expression{System.Func{`0,`0}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: ToEntityAsync(Expression<Func<T, T>>, IClientSessionHandle, CancellationToken)
  nameWithType: One<T>.ToEntityAsync(Expression<Func<T, T>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.One<T>.ToEntityAsync(System.Linq.Expressions.Expression<System.Func<T, T>>, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  type: Method
  source:
    id: ToEntityAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 70
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nFetches the actual entity this reference represents from the database with a projection.\n"
  example: []
  syntax:
    content: public Task<T> ToEntityAsync(Expression<Func<T, T>> projection, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: projection
      type: System.Linq.Expressions.Expression{System.Func{{T},{T}}}
      description: x => new Test { PropName = x.Prop }
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: A Task containing the actual projected entity
    content.vb: Public Function ToEntityAsync(projection As Expression(Of Func(Of T, T)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of T)
  overload: MongoDB.Entities.One`1.ToEntityAsync*
  nameWithType.vb: One(Of T).ToEntityAsync(Expression(Of Func(Of T, T)), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.One(Of T).ToEntityAsync(System.Linq.Expressions.Expression(Of System.Func(Of T, T)), MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  name.vb: ToEntityAsync(Expression(Of Func(Of T, T)), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.One`1.ToEntityAsync(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`0}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.One`1.ToEntityAsync(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`0}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  id: ToEntityAsync(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`0}},MongoDB.Driver.IClientSessionHandle,System.Threading.CancellationToken)
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: ToEntityAsync(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>, IClientSessionHandle, CancellationToken)
  nameWithType: One<T>.ToEntityAsync(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.One<T>.ToEntityAsync(System.Func<MongoDB.Driver.ProjectionDefinitionBuilder<T>, MongoDB.Driver.ProjectionDefinition<T, T>>, MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  type: Method
  source:
    id: ToEntityAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 86
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nFetches the actual entity this reference represents from the database with a projection.\n"
  example: []
  syntax:
    content: public Task<T> ToEntityAsync(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>> projection, IClientSessionHandle session = null, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: projection
      type: System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{{T}},MongoDB.Driver.ProjectionDefinition{{T},{T}}}
      description: p=> p.Include(&quot;Prop1&quot;).Exclude(&quot;Prop2&quot;)
    - id: session
      type: MongoDB.Driver.IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: A Task containing the actual projected entity
    content.vb: Public Function ToEntityAsync(projection As Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of T)
  overload: MongoDB.Entities.One`1.ToEntityAsync*
  nameWithType.vb: One(Of T).ToEntityAsync(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T)), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.One(Of T).ToEntityAsync(System.Func(Of MongoDB.Driver.ProjectionDefinitionBuilder(Of T), MongoDB.Driver.ProjectionDefinition(Of T, T)), MongoDB.Driver.IClientSessionHandle, System.Threading.CancellationToken)
  name.vb: ToEntityAsync(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T)), IClientSessionHandle, CancellationToken)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MongoDB.Entities.One`1.ID*
  commentId: Overload:MongoDB.Entities.One`1.ID
  name: ID
  nameWithType: One<T>.ID
  fullName: MongoDB.Entities.One<T>.ID
  nameWithType.vb: One(Of T).ID
  fullName.vb: MongoDB.Entities.One(Of T).ID
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MongoDB.Entities.One`1.#ctor*
  commentId: Overload:MongoDB.Entities.One`1.#ctor
  name: One
  nameWithType: One<T>.One
  fullName: MongoDB.Entities.One<T>.One
  nameWithType.vb: One(Of T).One
  fullName.vb: MongoDB.Entities.One(Of T).One
- uid: MongoDB.Entities.One`1.op_Implicit*
  commentId: Overload:MongoDB.Entities.One`1.op_Implicit
  name: Implicit
  nameWithType: One<T>.Implicit
  fullName: MongoDB.Entities.One<T>.Implicit
  nameWithType.vb: One(Of T).Widening
  fullName.vb: MongoDB.Entities.One(Of T).Widening
  name.vb: Widening
- uid: MongoDB.Entities.One`1
  commentId: T:MongoDB.Entities.One`1
  parent: MongoDB.Entities
  name: One<T>
  nameWithType: One<T>
  fullName: MongoDB.Entities.One<T>
  nameWithType.vb: One(Of T)
  fullName.vb: MongoDB.Entities.One(Of T)
  name.vb: One(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.One`1
    name: One
    nameWithType: One
    fullName: MongoDB.Entities.One
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.One`1
    name: One
    nameWithType: One
    fullName: MongoDB.Entities.One
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MongoDB.Entities.One`1.ToEntityAsync*
  commentId: Overload:MongoDB.Entities.One`1.ToEntityAsync
  name: ToEntityAsync
  nameWithType: One<T>.ToEntityAsync
  fullName: MongoDB.Entities.One<T>.ToEntityAsync
  nameWithType.vb: One(Of T).ToEntityAsync
  fullName.vb: MongoDB.Entities.One(Of T).ToEntityAsync
- uid: MongoDB.Driver.IClientSessionHandle
  commentId: T:MongoDB.Driver.IClientSessionHandle
  parent: MongoDB.Driver
  isExternal: true
  name: IClientSessionHandle
  nameWithType: IClientSessionHandle
  fullName: MongoDB.Driver.IClientSessionHandle
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver
  commentId: N:MongoDB.Driver
  isExternal: true
  name: MongoDB.Driver
  nameWithType: MongoDB.Driver
  fullName: MongoDB.Driver
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Linq.Expressions.Expression{System.Func{{T},{T}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, T>>
  nameWithType: Expression<Func<T, T>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, T>>
  nameWithType.vb: Expression(Of Func(Of T, T))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, T))
  name.vb: Expression(Of Func(Of T, T))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{{T}},MongoDB.Driver.ProjectionDefinition{{T},{T}}}
  commentId: T:System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`0}}
  parent: System
  definition: System.Func`2
  name: Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>
  nameWithType: Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>
  fullName: System.Func<MongoDB.Driver.ProjectionDefinitionBuilder<T>, MongoDB.Driver.ProjectionDefinition<T, T>>
  nameWithType.vb: Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T))
  fullName.vb: System.Func(Of MongoDB.Driver.ProjectionDefinitionBuilder(Of T), MongoDB.Driver.ProjectionDefinition(Of T, T))
  name.vb: Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: MongoDB.Driver.ProjectionDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: MongoDB.Driver.ProjectionDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: MongoDB.Driver.ProjectionDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: MongoDB.Driver.ProjectionDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
