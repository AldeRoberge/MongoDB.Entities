### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.One`1
  commentId: T:MongoDB.Entities.One`1
  id: One`1
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.One`1.#ctor
  - MongoDB.Entities.One`1.ID
  - MongoDB.Entities.One`1.op_Implicit(`0)~MongoDB.Entities.One{`0}
  - MongoDB.Entities.One`1.op_Implicit(System.String)~MongoDB.Entities.One{`0}
  - MongoDB.Entities.One`1.ToEntityAsync(Expression{Func{`0,`0}},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.One`1.ToEntityAsync(Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`0}},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.One`1.ToEntityAsync(IClientSessionHandle,CancellationToken)
  langs:
  - csharp
  - vb
  name: One<T>
  nameWithType: One<T>
  fullName: MongoDB.Entities.One<T>
  type: Class
  source:
    id: One
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 13
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents a one-to-one relationship with an IEntity.\n"
  example: []
  syntax:
    content: 'public class One<T> : object where T : IEntity'
    typeParameters:
    - id: T
      description: Any type that implements IEntity
    content.vb: >-
      Public Class One(Of T As IEntity)

          Inherits Object
  inheritance:
  - System.Object
  nameWithType.vb: One(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MongoDB.Entities.One(Of T)
  name.vb: One(Of T)
- uid: MongoDB.Entities.One`1.ID
  commentId: P:MongoDB.Entities.One`1.ID
  id: ID
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: ID
  nameWithType: One<T>.ID
  fullName: MongoDB.Entities.One<T>.ID
  type: Property
  source:
    id: ID
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 18
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThe Id of the entity referenced by this instance.\n"
  example: []
  syntax:
    content: public string ID { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ID As String
  overload: MongoDB.Entities.One`1.ID*
  nameWithType.vb: One(Of T).ID
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.One(Of T).ID
- uid: MongoDB.Entities.One`1.#ctor
  commentId: M:MongoDB.Entities.One`1.#ctor
  id: '#ctor'
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: One()
  nameWithType: One<T>.One()
  fullName: MongoDB.Entities.One<T>.One()
  type: Constructor
  source:
    id: .ctor
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 21
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  syntax:
    content: public One()
    content.vb: Public Sub New
  overload: MongoDB.Entities.One`1.#ctor*
  nameWithType.vb: One(Of T).One()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.One(Of T).One()
- uid: MongoDB.Entities.One`1.op_Implicit(System.String)~MongoDB.Entities.One{`0}
  commentId: M:MongoDB.Entities.One`1.op_Implicit(System.String)~MongoDB.Entities.One{`0}
  id: op_Implicit(System.String)~MongoDB.Entities.One{`0}
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: Implicit(String to One<T>)
  nameWithType: One<T>.Implicit(String to One<T>)
  fullName: MongoDB.Entities.One<T>.Implicit(System.String to MongoDB.Entities.One<T>)
  type: Operator
  source:
    id: op_Implicit
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 38
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nOperator for returning a new One&lt;T> object from a string ID\n"
  example: []
  syntax:
    content: public static implicit operator One<T>(string id)
    parameters:
    - id: id
      type: System.String
      description: The ID to create a new One&lt;T> with
    return:
      type: MongoDB.Entities.One`1
    content.vb: Public Shared Widening Operator CType(id As String) As One(Of T)
  overload: MongoDB.Entities.One`1.op_Implicit*
  nameWithType.vb: One(Of T).Widening(String to One(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.One(Of T).Widening(System.String to MongoDB.Entities.One(Of T))
  name.vb: Widening(String to One(Of T))
- uid: MongoDB.Entities.One`1.op_Implicit(`0)~MongoDB.Entities.One{`0}
  commentId: M:MongoDB.Entities.One`1.op_Implicit(`0)~MongoDB.Entities.One{`0}
  id: op_Implicit(`0)~MongoDB.Entities.One{`0}
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: Implicit(T to One<T>)
  nameWithType: One<T>.Implicit(T to One<T>)
  fullName: MongoDB.Entities.One<T>.Implicit(T to MongoDB.Entities.One<T>)
  type: Operator
  source:
    id: op_Implicit
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 47
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nOperator for returning a new One&lt;T> object from an entity\n"
  example: []
  syntax:
    content: public static implicit operator One<T>(T entity)
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to make a reference to
    return:
      type: MongoDB.Entities.One`1
    content.vb: Public Shared Widening Operator CType(entity As T) As One(Of T)
  overload: MongoDB.Entities.One`1.op_Implicit*
  nameWithType.vb: One(Of T).Widening(T to One(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.One(Of T).Widening(T to MongoDB.Entities.One(Of T))
  name.vb: Widening(T to One(Of T))
- uid: MongoDB.Entities.One`1.ToEntityAsync(IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.One`1.ToEntityAsync(IClientSessionHandle,CancellationToken)
  id: ToEntityAsync(IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: ToEntityAsync(IClientSessionHandle, CancellationToken)
  nameWithType: One<T>.ToEntityAsync(IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.One<T>.ToEntityAsync(IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: ToEntityAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 58
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nFetches the actual entity this reference represents from the database.\n"
  example: []
  syntax:
    content: public Task<T> ToEntityAsync(IClientSessionHandle session = null, CancellationToken cancellation = null)
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task{{T}}
      description: A Task containing the actual entity
    content.vb: Public Function ToEntityAsync(session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of T)
  overload: MongoDB.Entities.One`1.ToEntityAsync*
  nameWithType.vb: One(Of T).ToEntityAsync(IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.One(Of T).ToEntityAsync(IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.One`1.ToEntityAsync(Expression{Func{`0,`0}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.One`1.ToEntityAsync(Expression{Func{`0,`0}},IClientSessionHandle,CancellationToken)
  id: ToEntityAsync(Expression{Func{`0,`0}},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: ToEntityAsync(Expression<Func<T, T>>, IClientSessionHandle, CancellationToken)
  nameWithType: One<T>.ToEntityAsync(Expression<Func<T, T>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.One<T>.ToEntityAsync(Expression<Func<T, T>>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: ToEntityAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 70
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nFetches the actual entity this reference represents from the database with a projection.\n"
  example: []
  syntax:
    content: public async Task<T> ToEntityAsync(Expression<Func<T, T>> projection, IClientSessionHandle session = null, CancellationToken cancellation = null)
    parameters:
    - id: projection
      type: Expression{Func{{T},{T}}}
      description: x => new Test { PropName = x.Prop }
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task{{T}}
      description: A Task containing the actual projected entity
    content.vb: Public Function ToEntityAsync(projection As Expression(Of Func(Of T, T)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of T)
  overload: MongoDB.Entities.One`1.ToEntityAsync*
  nameWithType.vb: One(Of T).ToEntityAsync(Expression(Of Func(Of T, T)), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.One(Of T).ToEntityAsync(Expression(Of Func(Of T, T)), IClientSessionHandle, CancellationToken)
  name.vb: ToEntityAsync(Expression(Of Func(Of T, T)), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.One`1.ToEntityAsync(Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`0}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.One`1.ToEntityAsync(Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`0}},IClientSessionHandle,CancellationToken)
  id: ToEntityAsync(Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`0}},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.One`1
  langs:
  - csharp
  - vb
  name: ToEntityAsync(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>, IClientSessionHandle, CancellationToken)
  nameWithType: One<T>.ToEntityAsync(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.One<T>.ToEntityAsync(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: ToEntityAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Relationships\One.cs
    startLine: 86
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nFetches the actual entity this reference represents from the database with a projection.\n"
  example: []
  syntax:
    content: public async Task<T> ToEntityAsync(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>> projection, IClientSessionHandle session = null, CancellationToken cancellation = null)
    parameters:
    - id: projection
      type: Func{ProjectionDefinitionBuilder{{T}},ProjectionDefinition{{T},{T}}}
      description: p=> p.Include(&quot;Prop1&quot;).Exclude(&quot;Prop2&quot;)
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task{{T}}
      description: A Task containing the actual projected entity
    content.vb: Public Function ToEntityAsync(projection As Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of T)
  overload: MongoDB.Entities.One`1.ToEntityAsync*
  nameWithType.vb: One(Of T).ToEntityAsync(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T)), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.One(Of T).ToEntityAsync(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T)), IClientSessionHandle, CancellationToken)
  name.vb: ToEntityAsync(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T)), IClientSessionHandle, CancellationToken)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: MongoDB.Entities.One`1.ID*
  commentId: Overload:MongoDB.Entities.One`1.ID
  name: ID
  nameWithType: One<T>.ID
  fullName: MongoDB.Entities.One<T>.ID
  nameWithType.vb: One(Of T).ID
  fullName.vb: MongoDB.Entities.One(Of T).ID
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MongoDB.Entities.One`1.#ctor*
  commentId: Overload:MongoDB.Entities.One`1.#ctor
  name: One
  nameWithType: One<T>.One
  fullName: MongoDB.Entities.One<T>.One
  nameWithType.vb: One(Of T).One
  fullName.vb: MongoDB.Entities.One(Of T).One
- uid: MongoDB.Entities.One`1.op_Implicit*
  commentId: Overload:MongoDB.Entities.One`1.op_Implicit
  name: Implicit
  nameWithType: One<T>.Implicit
  fullName: MongoDB.Entities.One<T>.Implicit
  nameWithType.vb: One(Of T).Widening
  fullName.vb: MongoDB.Entities.One(Of T).Widening
  name.vb: Widening
- uid: MongoDB.Entities.One`1
  commentId: T:MongoDB.Entities.One`1
  parent: MongoDB.Entities
  name: One<T>
  nameWithType: One<T>
  fullName: MongoDB.Entities.One<T>
  nameWithType.vb: One(Of T)
  fullName.vb: MongoDB.Entities.One(Of T)
  name.vb: One(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.One`1
    name: One
    nameWithType: One
    fullName: MongoDB.Entities.One
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.One`1
    name: One
    nameWithType: One
    fullName: MongoDB.Entities.One
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MongoDB.Entities.One`1.ToEntityAsync*
  commentId: Overload:MongoDB.Entities.One`1.ToEntityAsync
  name: ToEntityAsync
  nameWithType: One<T>.ToEntityAsync
  fullName: MongoDB.Entities.One<T>.ToEntityAsync
  nameWithType.vb: One(Of T).ToEntityAsync
  fullName.vb: MongoDB.Entities.One(Of T).ToEntityAsync
- uid: IClientSessionHandle
  isExternal: true
  name: IClientSessionHandle
  nameWithType: IClientSessionHandle
  fullName: IClientSessionHandle
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task{{T}}
  commentId: '!:Task{`0}'
  definition: Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression{Func{{T},{T}}}
  commentId: '!:Expression{Func{`0,`0}}'
  definition: Expression`1
  name: Expression<Func<T, T>>
  nameWithType: Expression<Func<T, T>>
  fullName: Expression<Func<T, T>>
  nameWithType.vb: Expression(Of Func(Of T, T))
  fullName.vb: Expression(Of Func(Of T, T))
  name.vb: Expression(Of Func(Of T, T))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{ProjectionDefinitionBuilder{{T}},ProjectionDefinition{{T},{T}}}
  commentId: '!:Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`0}}'
  definition: Func`2
  name: Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>
  nameWithType: Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>
  fullName: Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>
  nameWithType.vb: Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T))
  fullName.vb: Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T))
  name.vb: Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: ProjectionDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: ProjectionDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: ProjectionDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: ProjectionDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
