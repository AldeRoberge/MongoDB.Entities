### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.Template`1
  commentId: T:MongoDB.Entities.Template`1
  id: Template`1
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.Template`1.#ctor(System.String)
  langs:
  - csharp
  - vb
  name: Template<T>
  nameWithType: Template<T>
  fullName: MongoDB.Entities.Template<T>
  type: Class
  source:
    id: Template
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Template.cs
    startLine: 17
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nA helper class to build a JSON command from a string with tag replacement\n"
  example: []
  syntax:
    content: 'public class Template<T> : Template<T, T> where T : IEntity'
    typeParameters:
    - id: T
      description: Any type that implements IEntity
    content.vb: >-
      Public Class Template(Of T As IEntity)

          Inherits Template(Of T, T)
  inheritance:
  - System.Object
  - MongoDB.Entities.Template
  - MongoDB.Entities.Template{{T},{T}}
  inheritedMembers:
  - MongoDB.Entities.Template{{T},{T}}.Collection``1
  - MongoDB.Entities.Template{{T},{T}}.Property(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PropertyOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.Property``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.Properties(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PropertiesOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.Properties``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.Path(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PathOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.Path``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.Paths(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PathsOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.Paths``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PosFiltered(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PosFilteredOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PosAll(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PosAllOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PosAll``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PosFirst(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PosFirstOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.PosFirst``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.Elements(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.ElementsOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.Elements``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.Elements(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.ElementsOfResult(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  - MongoDB.Entities.Template{{T},{T}}.Tag(System.String,System.String)
  - MongoDB.Entities.Template{{T},{T}}.ToPipeline
  - MongoDB.Entities.Template{{T},{T}}.ToArrayFilters
  - MongoDB.Entities.Template.AppendStage(System.String)
  - MongoDB.Entities.Template.Collection``1
  - MongoDB.Entities.Template.Property``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template.Properties``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template.Path``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template.Paths``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template.PosAll``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template.PosFirst``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template.Elements``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.Template.Tag(System.String,System.String)
  - MongoDB.Entities.Template.RenderToString
  - MongoDB.Entities.Template.ToString
  - MongoDB.Entities.Template.ToStages
  - MongoDB.Entities.Template.ToPipeline``2
  - MongoDB.Entities.Template.ToArrayFilters``1
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: Template(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MongoDB.Entities.Template(Of T)
  name.vb: Template(Of T)
- uid: MongoDB.Entities.Template`1.#ctor(System.String)
  commentId: M:MongoDB.Entities.Template`1.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: MongoDB.Entities.Template`1
  langs:
  - csharp
  - vb
  name: Template(String)
  nameWithType: Template<T>.Template(String)
  fullName: MongoDB.Entities.Template<T>.Template(System.String)
  type: Constructor
  source:
    id: .ctor
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Template.cs
    startLine: 23
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nInitializes a template with a tagged input string.\n"
  example: []
  syntax:
    content: public Template(string template)
    parameters:
    - id: template
      type: System.String
      description: The template string with tags for targeting replacements such as &quot;&lt;Author.Name>&quot;
    content.vb: Public Sub New(template As String)
  overload: MongoDB.Entities.Template`1.#ctor*
  nameWithType.vb: Template(Of T).Template(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Template(Of T).Template(System.String)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MongoDB.Entities.Template
  commentId: T:MongoDB.Entities.Template
  parent: MongoDB.Entities
  name: Template
  nameWithType: Template
  fullName: MongoDB.Entities.Template
- uid: MongoDB.Entities.Template{{T},{T}}
  commentId: T:MongoDB.Entities.Template{`0,`0}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.Template`2
  name: Template<T, T>
  nameWithType: Template<T, T>
  fullName: MongoDB.Entities.Template<T, T>
  nameWithType.vb: Template(Of T, T)
  fullName.vb: MongoDB.Entities.Template(Of T, T)
  name.vb: Template(Of T, T)
  spec.csharp:
  - uid: MongoDB.Entities.Template`2
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Template`2
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Collection``1
  commentId: M:MongoDB.Entities.Template{`0,`0}.Collection``1
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Collection``1
  name: Collection<TEntity>()
  nameWithType: Template<T, T>.Collection<TEntity>()
  fullName: MongoDB.Entities.Template<T, T>.Collection<TEntity>()
  nameWithType.vb: Template(Of T, T).Collection(Of TEntity)()
  fullName.vb: MongoDB.Entities.Template(Of T, T).Collection(Of TEntity)()
  name.vb: Collection(Of TEntity)()
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Collection``1
    name: Collection<TEntity>
    nameWithType: Template<T, T>.Collection<TEntity>
    fullName: MongoDB.Entities.Template<T, T>.Collection<TEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Collection``1
    name: Collection(Of TEntity)
    nameWithType: Template(Of T, T).Collection(Of TEntity)
    fullName: MongoDB.Entities.Template(Of T, T).Collection(Of TEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Property(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  name: Property(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.Property(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.Property(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).Property(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).Property(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Property(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Property
    nameWithType: Template<T, T>.Property
    fullName: MongoDB.Entities.Template<T, T>.Property
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Property
    nameWithType: Template(Of T, T).Property
    fullName: MongoDB.Entities.Template(Of T, T).Property
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PropertyOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PropertyOfResult(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PropertyOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  name: PropertyOfResult(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.PropertyOfResult(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PropertyOfResult(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).PropertyOfResult(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PropertyOfResult(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PropertyOfResult(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PropertyOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PropertyOfResult
    nameWithType: Template<T, T>.PropertyOfResult
    fullName: MongoDB.Entities.Template<T, T>.PropertyOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PropertyOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PropertyOfResult
    nameWithType: Template(Of T, T).PropertyOfResult
    fullName: MongoDB.Entities.Template(Of T, T).PropertyOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Property``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: Property<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<T, T>.Property<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.Property<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of T, T).Property(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).Property(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: Property(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Property<TOther>
    nameWithType: Template<T, T>.Property<TOther>
    fullName: MongoDB.Entities.Template<T, T>.Property<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Property(Of TOther)
    nameWithType: Template(Of T, T).Property(Of TOther)
    fullName: MongoDB.Entities.Template(Of T, T).Property(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Properties(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.Properties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Properties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  name: Properties(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.Properties(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.Properties(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).Properties(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).Properties(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Properties(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Properties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Properties
    nameWithType: Template<T, T>.Properties
    fullName: MongoDB.Entities.Template<T, T>.Properties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Properties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Properties
    nameWithType: Template(Of T, T).Properties
    fullName: MongoDB.Entities.Template(Of T, T).Properties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PropertiesOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PropertiesOfResult(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PropertiesOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  name: PropertiesOfResult(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.PropertiesOfResult(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PropertiesOfResult(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).PropertiesOfResult(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PropertiesOfResult(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PropertiesOfResult(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PropertiesOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PropertiesOfResult
    nameWithType: Template<T, T>.PropertiesOfResult
    fullName: MongoDB.Entities.Template<T, T>.PropertiesOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PropertiesOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PropertiesOfResult
    nameWithType: Template(Of T, T).PropertiesOfResult
    fullName: MongoDB.Entities.Template(Of T, T).PropertiesOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Properties``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: Properties<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<T, T>.Properties<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.Properties<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of T, T).Properties(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).Properties(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: Properties(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Properties<TOther>
    nameWithType: Template<T, T>.Properties<TOther>
    fullName: MongoDB.Entities.Template<T, T>.Properties<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Properties(Of TOther)
    nameWithType: Template(Of T, T).Properties(Of TOther)
    fullName: MongoDB.Entities.Template(Of T, T).Properties(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Path(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.Path(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Path(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  name: Path(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.Path(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.Path(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).Path(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).Path(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Path(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Path(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Path
    nameWithType: Template<T, T>.Path
    fullName: MongoDB.Entities.Template<T, T>.Path
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Path(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Path
    nameWithType: Template(Of T, T).Path
    fullName: MongoDB.Entities.Template(Of T, T).Path
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PathOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PathOfResult(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PathOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  name: PathOfResult(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.PathOfResult(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PathOfResult(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).PathOfResult(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PathOfResult(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PathOfResult(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PathOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PathOfResult
    nameWithType: Template<T, T>.PathOfResult
    fullName: MongoDB.Entities.Template<T, T>.PathOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PathOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PathOfResult
    nameWithType: Template(Of T, T).PathOfResult
    fullName: MongoDB.Entities.Template(Of T, T).PathOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Path``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: Path<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<T, T>.Path<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.Path<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of T, T).Path(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).Path(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: Path(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Path<TOther>
    nameWithType: Template<T, T>.Path<TOther>
    fullName: MongoDB.Entities.Template<T, T>.Path<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Path(Of TOther)
    nameWithType: Template(Of T, T).Path(Of TOther)
    fullName: MongoDB.Entities.Template(Of T, T).Path(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Paths(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.Paths(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Paths(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  name: Paths(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.Paths(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.Paths(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).Paths(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).Paths(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Paths(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Paths(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Paths
    nameWithType: Template<T, T>.Paths
    fullName: MongoDB.Entities.Template<T, T>.Paths
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Paths(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Paths
    nameWithType: Template(Of T, T).Paths
    fullName: MongoDB.Entities.Template(Of T, T).Paths
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PathsOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PathsOfResult(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PathsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  name: PathsOfResult(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.PathsOfResult(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PathsOfResult(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).PathsOfResult(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PathsOfResult(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PathsOfResult(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PathsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PathsOfResult
    nameWithType: Template<T, T>.PathsOfResult
    fullName: MongoDB.Entities.Template<T, T>.PathsOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PathsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PathsOfResult
    nameWithType: Template(Of T, T).PathsOfResult
    fullName: MongoDB.Entities.Template(Of T, T).PathsOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Paths``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: Paths<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<T, T>.Paths<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.Paths<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of T, T).Paths(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).Paths(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: Paths(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Paths<TOther>
    nameWithType: Template<T, T>.Paths<TOther>
    fullName: MongoDB.Entities.Template<T, T>.Paths<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Paths(Of TOther)
    nameWithType: Template(Of T, T).Paths(Of TOther)
    fullName: MongoDB.Entities.Template(Of T, T).Paths(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PosFiltered(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PosFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PosFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  name: PosFiltered(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.PosFiltered(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PosFiltered(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).PosFiltered(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PosFiltered(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PosFiltered(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: PosFiltered
    nameWithType: Template<T, T>.PosFiltered
    fullName: MongoDB.Entities.Template<T, T>.PosFiltered
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: PosFiltered
    nameWithType: Template(Of T, T).PosFiltered
    fullName: MongoDB.Entities.Template(Of T, T).PosFiltered
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PosFilteredOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PosFilteredOfResult(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PosFilteredOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  name: PosFilteredOfResult(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.PosFilteredOfResult(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PosFilteredOfResult(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).PosFilteredOfResult(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PosFilteredOfResult(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PosFilteredOfResult(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosFilteredOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PosFilteredOfResult
    nameWithType: Template<T, T>.PosFilteredOfResult
    fullName: MongoDB.Entities.Template<T, T>.PosFilteredOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosFilteredOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PosFilteredOfResult
    nameWithType: Template(Of T, T).PosFilteredOfResult
    fullName: MongoDB.Entities.Template(Of T, T).PosFilteredOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: PosFiltered<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<T, T>.PosFiltered<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PosFiltered<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of T, T).PosFiltered(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PosFiltered(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: PosFiltered(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFiltered<TOther>
    nameWithType: Template<T, T>.PosFiltered<TOther>
    fullName: MongoDB.Entities.Template<T, T>.PosFiltered<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFiltered(Of TOther)
    nameWithType: Template(Of T, T).PosFiltered(Of TOther)
    fullName: MongoDB.Entities.Template(Of T, T).PosFiltered(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PosAll(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PosAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PosAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  name: PosAll(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.PosAll(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PosAll(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).PosAll(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PosAll(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PosAll(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: PosAll
    nameWithType: Template<T, T>.PosAll
    fullName: MongoDB.Entities.Template<T, T>.PosAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: PosAll
    nameWithType: Template(Of T, T).PosAll
    fullName: MongoDB.Entities.Template(Of T, T).PosAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PosAllOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PosAllOfResult(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PosAllOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  name: PosAllOfResult(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.PosAllOfResult(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PosAllOfResult(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).PosAllOfResult(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PosAllOfResult(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PosAllOfResult(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosAllOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PosAllOfResult
    nameWithType: Template<T, T>.PosAllOfResult
    fullName: MongoDB.Entities.Template<T, T>.PosAllOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosAllOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PosAllOfResult
    nameWithType: Template(Of T, T).PosAllOfResult
    fullName: MongoDB.Entities.Template(Of T, T).PosAllOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PosAll``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: PosAll<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<T, T>.PosAll<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PosAll<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of T, T).PosAll(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PosAll(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: PosAll(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosAll<TOther>
    nameWithType: Template<T, T>.PosAll<TOther>
    fullName: MongoDB.Entities.Template<T, T>.PosAll<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosAll(Of TOther)
    nameWithType: Template(Of T, T).PosAll(Of TOther)
    fullName: MongoDB.Entities.Template(Of T, T).PosAll(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PosFirst(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PosFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PosFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  name: PosFirst(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.PosFirst(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PosFirst(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).PosFirst(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PosFirst(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PosFirst(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: PosFirst
    nameWithType: Template<T, T>.PosFirst
    fullName: MongoDB.Entities.Template<T, T>.PosFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: PosFirst
    nameWithType: Template(Of T, T).PosFirst
    fullName: MongoDB.Entities.Template(Of T, T).PosFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PosFirstOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PosFirstOfResult(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PosFirstOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  name: PosFirstOfResult(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.PosFirstOfResult(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PosFirstOfResult(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).PosFirstOfResult(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PosFirstOfResult(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PosFirstOfResult(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosFirstOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PosFirstOfResult
    nameWithType: Template<T, T>.PosFirstOfResult
    fullName: MongoDB.Entities.Template<T, T>.PosFirstOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosFirstOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PosFirstOfResult
    nameWithType: Template(Of T, T).PosFirstOfResult
    fullName: MongoDB.Entities.Template(Of T, T).PosFirstOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.PosFirst``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: PosFirst<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<T, T>.PosFirst<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.PosFirst<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of T, T).PosFirst(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).PosFirst(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: PosFirst(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFirst<TOther>
    nameWithType: Template<T, T>.PosFirst<TOther>
    fullName: MongoDB.Entities.Template<T, T>.PosFirst<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFirst(Of TOther)
    nameWithType: Template(Of T, T).PosFirst(Of TOther)
    fullName: MongoDB.Entities.Template(Of T, T).PosFirst(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Elements(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.Elements(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Elements(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  name: Elements(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.Elements(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.Elements(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).Elements(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).Elements(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Elements(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Elements(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Elements
    nameWithType: Template<T, T>.Elements
    fullName: MongoDB.Entities.Template<T, T>.Elements
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Elements(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Elements
    nameWithType: Template(Of T, T).Elements
    fullName: MongoDB.Entities.Template(Of T, T).Elements
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.ElementsOfResult(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.ElementsOfResult(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.ElementsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  name: ElementsOfResult(Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.ElementsOfResult(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.ElementsOfResult(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).ElementsOfResult(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).ElementsOfResult(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: ElementsOfResult(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.ElementsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: ElementsOfResult
    nameWithType: Template<T, T>.ElementsOfResult
    fullName: MongoDB.Entities.Template<T, T>.ElementsOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.ElementsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: ElementsOfResult
    nameWithType: Template(Of T, T).ElementsOfResult
    fullName: MongoDB.Entities.Template(Of T, T).ElementsOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Elements``1(System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: Elements<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<T, T>.Elements<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.Elements<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of T, T).Elements(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).Elements(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: Elements(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements<TOther>
    nameWithType: Template<T, T>.Elements<TOther>
    fullName: MongoDB.Entities.Template<T, T>.Elements<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements(Of TOther)
    nameWithType: Template(Of T, T).Elements(Of TOther)
    fullName: MongoDB.Entities.Template(Of T, T).Elements(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Elements(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.Elements(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Elements(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  name: Elements(Int32, Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.Elements(Int32, Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.Elements(System.Int32, System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).Elements(Int32, Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).Elements(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Elements(Int32, Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Elements(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Elements
    nameWithType: Template<T, T>.Elements
    fullName: MongoDB.Entities.Template<T, T>.Elements
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Elements(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Elements
    nameWithType: Template(Of T, T).Elements
    fullName: MongoDB.Entities.Template(Of T, T).Elements
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.ElementsOfResult(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.ElementsOfResult(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.ElementsOfResult(System.Int32,System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  name: ElementsOfResult(Int32, Expression<Func<T, Object>>)
  nameWithType: Template<T, T>.ElementsOfResult(Int32, Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.ElementsOfResult(System.Int32, System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template(Of T, T).ElementsOfResult(Int32, Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).ElementsOfResult(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: ElementsOfResult(Int32, Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.ElementsOfResult(System.Int32,System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: ElementsOfResult
    nameWithType: Template<T, T>.ElementsOfResult
    fullName: MongoDB.Entities.Template<T, T>.ElementsOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.ElementsOfResult(System.Int32,System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: ElementsOfResult
    nameWithType: Template(Of T, T).ElementsOfResult
    fullName: MongoDB.Entities.Template(Of T, T).ElementsOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{{TOther},System.Object}})
  commentId: M:MongoDB.Entities.Template{`0,`0}.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: Elements<TOther>(Int32, Expression<Func<TOther, Object>>)
  nameWithType: Template<T, T>.Elements<TOther>(Int32, Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<T, T>.Elements<TOther>(System.Int32, System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of T, T).Elements(Of TOther)(Int32, Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of T, T).Elements(Of TOther)(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: Elements(Of TOther)(Int32, Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements<TOther>
    nameWithType: Template<T, T>.Elements<TOther>
    fullName: MongoDB.Entities.Template<T, T>.Elements<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements(Of TOther)
    nameWithType: Template(Of T, T).Elements(Of TOther)
    fullName: MongoDB.Entities.Template(Of T, T).Elements(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.Tag(System.String,System.String)
  commentId: M:MongoDB.Entities.Template{`0,`0}.Tag(System.String,System.String)
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.Tag(System.String,System.String)
  name: Tag(String, String)
  nameWithType: Template<T, T>.Tag(String, String)
  fullName: MongoDB.Entities.Template<T, T>.Tag(System.String, System.String)
  nameWithType.vb: Template(Of T, T).Tag(String, String)
  fullName.vb: MongoDB.Entities.Template(Of T, T).Tag(System.String, System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Tag(System.String,System.String)
    name: Tag
    nameWithType: Template<T, T>.Tag
    fullName: MongoDB.Entities.Template<T, T>.Tag
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Tag(System.String,System.String)
    name: Tag
    nameWithType: Template(Of T, T).Tag
    fullName: MongoDB.Entities.Template(Of T, T).Tag
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.ToPipeline
  commentId: M:MongoDB.Entities.Template{`0,`0}.ToPipeline
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.ToPipeline
  name: ToPipeline()
  nameWithType: Template<T, T>.ToPipeline()
  fullName: MongoDB.Entities.Template<T, T>.ToPipeline()
  nameWithType.vb: Template(Of T, T).ToPipeline()
  fullName.vb: MongoDB.Entities.Template(Of T, T).ToPipeline()
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.ToPipeline
    name: ToPipeline
    nameWithType: Template<T, T>.ToPipeline
    fullName: MongoDB.Entities.Template<T, T>.ToPipeline
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.ToPipeline
    name: ToPipeline
    nameWithType: Template(Of T, T).ToPipeline
    fullName: MongoDB.Entities.Template(Of T, T).ToPipeline
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template{{T},{T}}.ToArrayFilters
  commentId: M:MongoDB.Entities.Template{`0,`0}.ToArrayFilters
  parent: MongoDB.Entities.Template{{T},{T}}
  definition: MongoDB.Entities.Template`2.ToArrayFilters
  name: ToArrayFilters()
  nameWithType: Template<T, T>.ToArrayFilters()
  fullName: MongoDB.Entities.Template<T, T>.ToArrayFilters()
  nameWithType.vb: Template(Of T, T).ToArrayFilters()
  fullName.vb: MongoDB.Entities.Template(Of T, T).ToArrayFilters()
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.ToArrayFilters
    name: ToArrayFilters
    nameWithType: Template<T, T>.ToArrayFilters
    fullName: MongoDB.Entities.Template<T, T>.ToArrayFilters
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.ToArrayFilters
    name: ToArrayFilters
    nameWithType: Template(Of T, T).ToArrayFilters
    fullName: MongoDB.Entities.Template(Of T, T).ToArrayFilters
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.AppendStage(System.String)
  commentId: M:MongoDB.Entities.Template.AppendStage(System.String)
  parent: MongoDB.Entities.Template
  isExternal: true
  name: AppendStage(String)
  nameWithType: Template.AppendStage(String)
  fullName: MongoDB.Entities.Template.AppendStage(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Template.AppendStage(System.String)
    name: AppendStage
    nameWithType: Template.AppendStage
    fullName: MongoDB.Entities.Template.AppendStage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.AppendStage(System.String)
    name: AppendStage
    nameWithType: Template.AppendStage
    fullName: MongoDB.Entities.Template.AppendStage
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Collection``1
  commentId: M:MongoDB.Entities.Template.Collection``1
  parent: MongoDB.Entities.Template
  name: Collection<TEntity>()
  nameWithType: Template.Collection<TEntity>()
  fullName: MongoDB.Entities.Template.Collection<TEntity>()
  nameWithType.vb: Template.Collection(Of TEntity)()
  fullName.vb: MongoDB.Entities.Template.Collection(Of TEntity)()
  name.vb: Collection(Of TEntity)()
  spec.csharp:
  - uid: MongoDB.Entities.Template.Collection``1
    name: Collection<TEntity>
    nameWithType: Template.Collection<TEntity>
    fullName: MongoDB.Entities.Template.Collection<TEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Collection``1
    name: Collection(Of TEntity)
    nameWithType: Template.Collection(Of TEntity)
    fullName: MongoDB.Entities.Template.Collection(Of TEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Property``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template
  definition: MongoDB.Entities.Template.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: Property<T>(Expression<Func<T, Object>>)
  nameWithType: Template.Property<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.Property<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.Property(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.Property(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Property(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Property<T>
    nameWithType: Template.Property<T>
    fullName: MongoDB.Entities.Template.Property<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Property(Of T)
    nameWithType: Template.Property(Of T)
    fullName: MongoDB.Entities.Template.Property(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Properties``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template
  definition: MongoDB.Entities.Template.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: Properties<T>(Expression<Func<T, Object>>)
  nameWithType: Template.Properties<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.Properties<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.Properties(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.Properties(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Properties(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Properties<T>
    nameWithType: Template.Properties<T>
    fullName: MongoDB.Entities.Template.Properties<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Properties(Of T)
    nameWithType: Template.Properties(Of T)
    fullName: MongoDB.Entities.Template.Properties(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Path``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template
  definition: MongoDB.Entities.Template.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: Path<T>(Expression<Func<T, Object>>)
  nameWithType: Template.Path<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.Path<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.Path(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.Path(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Path(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Path<T>
    nameWithType: Template.Path<T>
    fullName: MongoDB.Entities.Template.Path<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Path(Of T)
    nameWithType: Template.Path(Of T)
    fullName: MongoDB.Entities.Template.Path(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Paths``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template
  definition: MongoDB.Entities.Template.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: Paths<T>(Expression<Func<T, Object>>)
  nameWithType: Template.Paths<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.Paths<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.Paths(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.Paths(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Paths(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Paths<T>
    nameWithType: Template.Paths<T>
    fullName: MongoDB.Entities.Template.Paths<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Paths(Of T)
    nameWithType: Template.Paths(Of T)
    fullName: MongoDB.Entities.Template.Paths(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template
  definition: MongoDB.Entities.Template.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: PosFiltered<T>(Expression<Func<T, Object>>)
  nameWithType: Template.PosFiltered<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.PosFiltered<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.PosFiltered(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.PosFiltered(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PosFiltered(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFiltered<T>
    nameWithType: Template.PosFiltered<T>
    fullName: MongoDB.Entities.Template.PosFiltered<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFiltered(Of T)
    nameWithType: Template.PosFiltered(Of T)
    fullName: MongoDB.Entities.Template.PosFiltered(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.PosAll``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template
  definition: MongoDB.Entities.Template.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: PosAll<T>(Expression<Func<T, Object>>)
  nameWithType: Template.PosAll<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.PosAll<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.PosAll(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.PosAll(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PosAll(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosAll<T>
    nameWithType: Template.PosAll<T>
    fullName: MongoDB.Entities.Template.PosAll<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosAll(Of T)
    nameWithType: Template.PosAll(Of T)
    fullName: MongoDB.Entities.Template.PosAll(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.PosFirst``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template
  definition: MongoDB.Entities.Template.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: PosFirst<T>(Expression<Func<T, Object>>)
  nameWithType: Template.PosFirst<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.PosFirst<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.PosFirst(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.PosFirst(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PosFirst(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFirst<T>
    nameWithType: Template.PosFirst<T>
    fullName: MongoDB.Entities.Template.PosFirst<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFirst(Of T)
    nameWithType: Template.PosFirst(Of T)
    fullName: MongoDB.Entities.Template.PosFirst(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Elements``1(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template
  definition: MongoDB.Entities.Template.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: Elements<T>(Expression<Func<T, Object>>)
  nameWithType: Template.Elements<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.Elements<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.Elements(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.Elements(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Elements(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements<T>
    nameWithType: Template.Elements<T>
    fullName: MongoDB.Entities.Template.Elements<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements(Of T)
    nameWithType: Template.Elements(Of T)
    fullName: MongoDB.Entities.Template.Elements(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Template.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: MongoDB.Entities.Template
  definition: MongoDB.Entities.Template.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  name: Elements<T>(Int32, Expression<Func<T, Object>>)
  nameWithType: Template.Elements<T>(Int32, Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.Elements<T>(System.Int32, System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.Elements(Of T)(Int32, Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.Elements(Of T)(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Elements(Of T)(Int32, Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements<T>
    nameWithType: Template.Elements<T>
    fullName: MongoDB.Entities.Template.Elements<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements(Of T)
    nameWithType: Template.Elements(Of T)
    fullName: MongoDB.Entities.Template.Elements(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Tag(System.String,System.String)
  commentId: M:MongoDB.Entities.Template.Tag(System.String,System.String)
  parent: MongoDB.Entities.Template
  isExternal: true
  name: Tag(String, String)
  nameWithType: Template.Tag(String, String)
  fullName: MongoDB.Entities.Template.Tag(System.String, System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Template.Tag(System.String,System.String)
    name: Tag
    nameWithType: Template.Tag
    fullName: MongoDB.Entities.Template.Tag
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Tag(System.String,System.String)
    name: Tag
    nameWithType: Template.Tag
    fullName: MongoDB.Entities.Template.Tag
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.RenderToString
  commentId: M:MongoDB.Entities.Template.RenderToString
  parent: MongoDB.Entities.Template
  name: RenderToString()
  nameWithType: Template.RenderToString()
  fullName: MongoDB.Entities.Template.RenderToString()
  spec.csharp:
  - uid: MongoDB.Entities.Template.RenderToString
    name: RenderToString
    nameWithType: Template.RenderToString
    fullName: MongoDB.Entities.Template.RenderToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.RenderToString
    name: RenderToString
    nameWithType: Template.RenderToString
    fullName: MongoDB.Entities.Template.RenderToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.ToString
  commentId: M:MongoDB.Entities.Template.ToString
  parent: MongoDB.Entities.Template
  name: ToString()
  nameWithType: Template.ToString()
  fullName: MongoDB.Entities.Template.ToString()
  spec.csharp:
  - uid: MongoDB.Entities.Template.ToString
    name: ToString
    nameWithType: Template.ToString
    fullName: MongoDB.Entities.Template.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.ToString
    name: ToString
    nameWithType: Template.ToString
    fullName: MongoDB.Entities.Template.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.ToStages
  commentId: M:MongoDB.Entities.Template.ToStages
  parent: MongoDB.Entities.Template
  name: ToStages()
  nameWithType: Template.ToStages()
  fullName: MongoDB.Entities.Template.ToStages()
  spec.csharp:
  - uid: MongoDB.Entities.Template.ToStages
    name: ToStages
    nameWithType: Template.ToStages
    fullName: MongoDB.Entities.Template.ToStages
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.ToStages
    name: ToStages
    nameWithType: Template.ToStages
    fullName: MongoDB.Entities.Template.ToStages
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.ToPipeline``2
  commentId: M:MongoDB.Entities.Template.ToPipeline``2
  parent: MongoDB.Entities.Template
  name: ToPipeline<TInput, TOutput>()
  nameWithType: Template.ToPipeline<TInput, TOutput>()
  fullName: MongoDB.Entities.Template.ToPipeline<TInput, TOutput>()
  nameWithType.vb: Template.ToPipeline(Of TInput, TOutput)()
  fullName.vb: MongoDB.Entities.Template.ToPipeline(Of TInput, TOutput)()
  name.vb: ToPipeline(Of TInput, TOutput)()
  spec.csharp:
  - uid: MongoDB.Entities.Template.ToPipeline``2
    name: ToPipeline<TInput, TOutput>
    nameWithType: Template.ToPipeline<TInput, TOutput>
    fullName: MongoDB.Entities.Template.ToPipeline<TInput, TOutput>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.ToPipeline``2
    name: ToPipeline(Of TInput, TOutput)
    nameWithType: Template.ToPipeline(Of TInput, TOutput)
    fullName: MongoDB.Entities.Template.ToPipeline(Of TInput, TOutput)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.ToArrayFilters``1
  commentId: M:MongoDB.Entities.Template.ToArrayFilters``1
  parent: MongoDB.Entities.Template
  name: ToArrayFilters<T>()
  nameWithType: Template.ToArrayFilters<T>()
  fullName: MongoDB.Entities.Template.ToArrayFilters<T>()
  nameWithType.vb: Template.ToArrayFilters(Of T)()
  fullName.vb: MongoDB.Entities.Template.ToArrayFilters(Of T)()
  name.vb: ToArrayFilters(Of T)()
  spec.csharp:
  - uid: MongoDB.Entities.Template.ToArrayFilters``1
    name: ToArrayFilters<T>
    nameWithType: Template.ToArrayFilters<T>
    fullName: MongoDB.Entities.Template.ToArrayFilters<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.ToArrayFilters``1
    name: ToArrayFilters(Of T)
    nameWithType: Template.ToArrayFilters(Of T)
    fullName: MongoDB.Entities.Template.ToArrayFilters(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MongoDB.Entities.Template`2
  commentId: T:MongoDB.Entities.Template`2
  parent: MongoDB.Entities
  name: Template<TInput, TResult>
  nameWithType: Template<TInput, TResult>
  fullName: MongoDB.Entities.Template<TInput, TResult>
  nameWithType.vb: Template(Of TInput, TResult)
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult)
  name.vb: Template(Of TInput, TResult)
  spec.csharp:
  - uid: MongoDB.Entities.Template`2
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Template`2
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Collection``1
  commentId: M:MongoDB.Entities.Template`2.Collection``1
  name: Collection<TEntity>()
  nameWithType: Template<TInput, TResult>.Collection<TEntity>()
  fullName: MongoDB.Entities.Template<TInput, TResult>.Collection<TEntity>()
  nameWithType.vb: Template(Of TInput, TResult).Collection(Of TEntity)()
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Collection(Of TEntity)()
  name.vb: Collection(Of TEntity)()
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Collection``1
    name: Collection<TEntity>
    nameWithType: Template<TInput, TResult>.Collection<TEntity>
    fullName: MongoDB.Entities.Template<TInput, TResult>.Collection<TEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Collection``1
    name: Collection(Of TEntity)
    nameWithType: Template(Of TInput, TResult).Collection(Of TEntity)
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Collection(Of TEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  isExternal: true
  name: Property(Expression<Func<TInput, Object>>)
  nameWithType: Template<TInput, TResult>.Property(Expression<Func<TInput, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Property(System.Linq.Expressions.Expression<System.Func<TInput, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).Property(Expression(Of Func(Of TInput, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Property(System.Linq.Expressions.Expression(Of System.Func(Of TInput, System.Object)))
  name.vb: Property(Expression(Of Func(Of TInput, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Property
    nameWithType: Template<TInput, TResult>.Property
    fullName: MongoDB.Entities.Template<TInput, TResult>.Property
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Property
    nameWithType: Template(Of TInput, TResult).Property
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Property
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PropertyOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PropertyOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  isExternal: true
  name: PropertyOfResult(Expression<Func<TResult, Object>>)
  nameWithType: Template<TInput, TResult>.PropertyOfResult(Expression<Func<TResult, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PropertyOfResult(System.Linq.Expressions.Expression<System.Func<TResult, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PropertyOfResult(Expression(Of Func(Of TResult, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PropertyOfResult(System.Linq.Expressions.Expression(Of System.Func(Of TResult, System.Object)))
  name.vb: PropertyOfResult(Expression(Of Func(Of TResult, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PropertyOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PropertyOfResult
    nameWithType: Template<TInput, TResult>.PropertyOfResult
    fullName: MongoDB.Entities.Template<TInput, TResult>.PropertyOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PropertyOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PropertyOfResult
    nameWithType: Template(Of TInput, TResult).PropertyOfResult
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PropertyOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: Property<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<TInput, TResult>.Property<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Property<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).Property(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Property(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: Property(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Property<TOther>
    nameWithType: Template<TInput, TResult>.Property<TOther>
    fullName: MongoDB.Entities.Template<TInput, TResult>.Property<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Property(Of TOther)
    nameWithType: Template(Of TInput, TResult).Property(Of TOther)
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Property(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Properties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.Properties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  isExternal: true
  name: Properties(Expression<Func<TInput, Object>>)
  nameWithType: Template<TInput, TResult>.Properties(Expression<Func<TInput, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Properties(System.Linq.Expressions.Expression<System.Func<TInput, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).Properties(Expression(Of Func(Of TInput, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Properties(System.Linq.Expressions.Expression(Of System.Func(Of TInput, System.Object)))
  name.vb: Properties(Expression(Of Func(Of TInput, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Properties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Properties
    nameWithType: Template<TInput, TResult>.Properties
    fullName: MongoDB.Entities.Template<TInput, TResult>.Properties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Properties(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Properties
    nameWithType: Template(Of TInput, TResult).Properties
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Properties
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PropertiesOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PropertiesOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  isExternal: true
  name: PropertiesOfResult(Expression<Func<TResult, Object>>)
  nameWithType: Template<TInput, TResult>.PropertiesOfResult(Expression<Func<TResult, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PropertiesOfResult(System.Linq.Expressions.Expression<System.Func<TResult, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PropertiesOfResult(Expression(Of Func(Of TResult, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PropertiesOfResult(System.Linq.Expressions.Expression(Of System.Func(Of TResult, System.Object)))
  name.vb: PropertiesOfResult(Expression(Of Func(Of TResult, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PropertiesOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PropertiesOfResult
    nameWithType: Template<TInput, TResult>.PropertiesOfResult
    fullName: MongoDB.Entities.Template<TInput, TResult>.PropertiesOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PropertiesOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PropertiesOfResult
    nameWithType: Template(Of TInput, TResult).PropertiesOfResult
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PropertiesOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: Properties<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<TInput, TResult>.Properties<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Properties<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).Properties(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Properties(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: Properties(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Properties<TOther>
    nameWithType: Template<TInput, TResult>.Properties<TOther>
    fullName: MongoDB.Entities.Template<TInput, TResult>.Properties<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Properties(Of TOther)
    nameWithType: Template(Of TInput, TResult).Properties(Of TOther)
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Properties(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Path(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.Path(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  isExternal: true
  name: Path(Expression<Func<TInput, Object>>)
  nameWithType: Template<TInput, TResult>.Path(Expression<Func<TInput, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Path(System.Linq.Expressions.Expression<System.Func<TInput, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).Path(Expression(Of Func(Of TInput, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Path(System.Linq.Expressions.Expression(Of System.Func(Of TInput, System.Object)))
  name.vb: Path(Expression(Of Func(Of TInput, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Path(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Path
    nameWithType: Template<TInput, TResult>.Path
    fullName: MongoDB.Entities.Template<TInput, TResult>.Path
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Path(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Path
    nameWithType: Template(Of TInput, TResult).Path
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Path
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PathOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PathOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  isExternal: true
  name: PathOfResult(Expression<Func<TResult, Object>>)
  nameWithType: Template<TInput, TResult>.PathOfResult(Expression<Func<TResult, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PathOfResult(System.Linq.Expressions.Expression<System.Func<TResult, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PathOfResult(Expression(Of Func(Of TResult, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PathOfResult(System.Linq.Expressions.Expression(Of System.Func(Of TResult, System.Object)))
  name.vb: PathOfResult(Expression(Of Func(Of TResult, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PathOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PathOfResult
    nameWithType: Template<TInput, TResult>.PathOfResult
    fullName: MongoDB.Entities.Template<TInput, TResult>.PathOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PathOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PathOfResult
    nameWithType: Template(Of TInput, TResult).PathOfResult
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PathOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: Path<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<TInput, TResult>.Path<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Path<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).Path(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Path(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: Path(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Path<TOther>
    nameWithType: Template<TInput, TResult>.Path<TOther>
    fullName: MongoDB.Entities.Template<TInput, TResult>.Path<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Path(Of TOther)
    nameWithType: Template(Of TInput, TResult).Path(Of TOther)
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Path(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Paths(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.Paths(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  isExternal: true
  name: Paths(Expression<Func<TInput, Object>>)
  nameWithType: Template<TInput, TResult>.Paths(Expression<Func<TInput, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Paths(System.Linq.Expressions.Expression<System.Func<TInput, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).Paths(Expression(Of Func(Of TInput, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Paths(System.Linq.Expressions.Expression(Of System.Func(Of TInput, System.Object)))
  name.vb: Paths(Expression(Of Func(Of TInput, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Paths(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Paths
    nameWithType: Template<TInput, TResult>.Paths
    fullName: MongoDB.Entities.Template<TInput, TResult>.Paths
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Paths(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Paths
    nameWithType: Template(Of TInput, TResult).Paths
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Paths
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PathsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PathsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  isExternal: true
  name: PathsOfResult(Expression<Func<TResult, Object>>)
  nameWithType: Template<TInput, TResult>.PathsOfResult(Expression<Func<TResult, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PathsOfResult(System.Linq.Expressions.Expression<System.Func<TResult, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PathsOfResult(Expression(Of Func(Of TResult, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PathsOfResult(System.Linq.Expressions.Expression(Of System.Func(Of TResult, System.Object)))
  name.vb: PathsOfResult(Expression(Of Func(Of TResult, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PathsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PathsOfResult
    nameWithType: Template<TInput, TResult>.PathsOfResult
    fullName: MongoDB.Entities.Template<TInput, TResult>.PathsOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PathsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PathsOfResult
    nameWithType: Template(Of TInput, TResult).PathsOfResult
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PathsOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: Paths<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<TInput, TResult>.Paths<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Paths<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).Paths(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Paths(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: Paths(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Paths<TOther>
    nameWithType: Template<TInput, TResult>.Paths<TOther>
    fullName: MongoDB.Entities.Template<TInput, TResult>.Paths<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Paths(Of TOther)
    nameWithType: Template(Of TInput, TResult).Paths(Of TOther)
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Paths(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PosFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PosFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  isExternal: true
  name: PosFiltered(Expression<Func<TInput, Object>>)
  nameWithType: Template<TInput, TResult>.PosFiltered(Expression<Func<TInput, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PosFiltered(System.Linq.Expressions.Expression<System.Func<TInput, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PosFiltered(Expression(Of Func(Of TInput, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PosFiltered(System.Linq.Expressions.Expression(Of System.Func(Of TInput, System.Object)))
  name.vb: PosFiltered(Expression(Of Func(Of TInput, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: PosFiltered
    nameWithType: Template<TInput, TResult>.PosFiltered
    fullName: MongoDB.Entities.Template<TInput, TResult>.PosFiltered
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: PosFiltered
    nameWithType: Template(Of TInput, TResult).PosFiltered
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PosFiltered
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PosFilteredOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PosFilteredOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  isExternal: true
  name: PosFilteredOfResult(Expression<Func<TResult, Object>>)
  nameWithType: Template<TInput, TResult>.PosFilteredOfResult(Expression<Func<TResult, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PosFilteredOfResult(System.Linq.Expressions.Expression<System.Func<TResult, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PosFilteredOfResult(Expression(Of Func(Of TResult, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PosFilteredOfResult(System.Linq.Expressions.Expression(Of System.Func(Of TResult, System.Object)))
  name.vb: PosFilteredOfResult(Expression(Of Func(Of TResult, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosFilteredOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PosFilteredOfResult
    nameWithType: Template<TInput, TResult>.PosFilteredOfResult
    fullName: MongoDB.Entities.Template<TInput, TResult>.PosFilteredOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosFilteredOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PosFilteredOfResult
    nameWithType: Template(Of TInput, TResult).PosFilteredOfResult
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PosFilteredOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: PosFiltered<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<TInput, TResult>.PosFiltered<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PosFiltered<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PosFiltered(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PosFiltered(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: PosFiltered(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFiltered<TOther>
    nameWithType: Template<TInput, TResult>.PosFiltered<TOther>
    fullName: MongoDB.Entities.Template<TInput, TResult>.PosFiltered<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFiltered(Of TOther)
    nameWithType: Template(Of TInput, TResult).PosFiltered(Of TOther)
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PosFiltered(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PosAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PosAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  isExternal: true
  name: PosAll(Expression<Func<TInput, Object>>)
  nameWithType: Template<TInput, TResult>.PosAll(Expression<Func<TInput, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PosAll(System.Linq.Expressions.Expression<System.Func<TInput, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PosAll(Expression(Of Func(Of TInput, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PosAll(System.Linq.Expressions.Expression(Of System.Func(Of TInput, System.Object)))
  name.vb: PosAll(Expression(Of Func(Of TInput, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: PosAll
    nameWithType: Template<TInput, TResult>.PosAll
    fullName: MongoDB.Entities.Template<TInput, TResult>.PosAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosAll(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: PosAll
    nameWithType: Template(Of TInput, TResult).PosAll
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PosAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PosAllOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PosAllOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  isExternal: true
  name: PosAllOfResult(Expression<Func<TResult, Object>>)
  nameWithType: Template<TInput, TResult>.PosAllOfResult(Expression<Func<TResult, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PosAllOfResult(System.Linq.Expressions.Expression<System.Func<TResult, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PosAllOfResult(Expression(Of Func(Of TResult, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PosAllOfResult(System.Linq.Expressions.Expression(Of System.Func(Of TResult, System.Object)))
  name.vb: PosAllOfResult(Expression(Of Func(Of TResult, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosAllOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PosAllOfResult
    nameWithType: Template<TInput, TResult>.PosAllOfResult
    fullName: MongoDB.Entities.Template<TInput, TResult>.PosAllOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosAllOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PosAllOfResult
    nameWithType: Template(Of TInput, TResult).PosAllOfResult
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PosAllOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: PosAll<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<TInput, TResult>.PosAll<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PosAll<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PosAll(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PosAll(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: PosAll(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosAll<TOther>
    nameWithType: Template<TInput, TResult>.PosAll<TOther>
    fullName: MongoDB.Entities.Template<TInput, TResult>.PosAll<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosAll(Of TOther)
    nameWithType: Template(Of TInput, TResult).PosAll(Of TOther)
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PosAll(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PosFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PosFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  isExternal: true
  name: PosFirst(Expression<Func<TInput, Object>>)
  nameWithType: Template<TInput, TResult>.PosFirst(Expression<Func<TInput, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PosFirst(System.Linq.Expressions.Expression<System.Func<TInput, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PosFirst(Expression(Of Func(Of TInput, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PosFirst(System.Linq.Expressions.Expression(Of System.Func(Of TInput, System.Object)))
  name.vb: PosFirst(Expression(Of Func(Of TInput, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: PosFirst
    nameWithType: Template<TInput, TResult>.PosFirst
    fullName: MongoDB.Entities.Template<TInput, TResult>.PosFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: PosFirst
    nameWithType: Template(Of TInput, TResult).PosFirst
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PosFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PosFirstOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PosFirstOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  isExternal: true
  name: PosFirstOfResult(Expression<Func<TResult, Object>>)
  nameWithType: Template<TInput, TResult>.PosFirstOfResult(Expression<Func<TResult, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PosFirstOfResult(System.Linq.Expressions.Expression<System.Func<TResult, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PosFirstOfResult(Expression(Of Func(Of TResult, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PosFirstOfResult(System.Linq.Expressions.Expression(Of System.Func(Of TResult, System.Object)))
  name.vb: PosFirstOfResult(Expression(Of Func(Of TResult, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosFirstOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PosFirstOfResult
    nameWithType: Template<TInput, TResult>.PosFirstOfResult
    fullName: MongoDB.Entities.Template<TInput, TResult>.PosFirstOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosFirstOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: PosFirstOfResult
    nameWithType: Template(Of TInput, TResult).PosFirstOfResult
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PosFirstOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: PosFirst<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<TInput, TResult>.PosFirst<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.PosFirst<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).PosFirst(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).PosFirst(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: PosFirst(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFirst<TOther>
    nameWithType: Template<TInput, TResult>.PosFirst<TOther>
    fullName: MongoDB.Entities.Template<TInput, TResult>.PosFirst<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFirst(Of TOther)
    nameWithType: Template(Of TInput, TResult).PosFirst(Of TOther)
    fullName: MongoDB.Entities.Template(Of TInput, TResult).PosFirst(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Elements(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.Elements(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  isExternal: true
  name: Elements(Expression<Func<TInput, Object>>)
  nameWithType: Template<TInput, TResult>.Elements(Expression<Func<TInput, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Elements(System.Linq.Expressions.Expression<System.Func<TInput, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).Elements(Expression(Of Func(Of TInput, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Elements(System.Linq.Expressions.Expression(Of System.Func(Of TInput, System.Object)))
  name.vb: Elements(Expression(Of Func(Of TInput, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Elements(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Elements
    nameWithType: Template<TInput, TResult>.Elements
    fullName: MongoDB.Entities.Template<TInput, TResult>.Elements
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Elements(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Elements
    nameWithType: Template(Of TInput, TResult).Elements
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Elements
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.ElementsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.ElementsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  isExternal: true
  name: ElementsOfResult(Expression<Func<TResult, Object>>)
  nameWithType: Template<TInput, TResult>.ElementsOfResult(Expression<Func<TResult, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.ElementsOfResult(System.Linq.Expressions.Expression<System.Func<TResult, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).ElementsOfResult(Expression(Of Func(Of TResult, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).ElementsOfResult(System.Linq.Expressions.Expression(Of System.Func(Of TResult, System.Object)))
  name.vb: ElementsOfResult(Expression(Of Func(Of TResult, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.ElementsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: ElementsOfResult
    nameWithType: Template<TInput, TResult>.ElementsOfResult
    fullName: MongoDB.Entities.Template<TInput, TResult>.ElementsOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.ElementsOfResult(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: ElementsOfResult
    nameWithType: Template(Of TInput, TResult).ElementsOfResult
    fullName: MongoDB.Entities.Template(Of TInput, TResult).ElementsOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: Elements<TOther>(Expression<Func<TOther, Object>>)
  nameWithType: Template<TInput, TResult>.Elements<TOther>(Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Elements<TOther>(System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).Elements(Of TOther)(Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Elements(Of TOther)(System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: Elements(Of TOther)(Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements<TOther>
    nameWithType: Template<TInput, TResult>.Elements<TOther>
    fullName: MongoDB.Entities.Template<TInput, TResult>.Elements<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements(Of TOther)
    nameWithType: Template(Of TInput, TResult).Elements(Of TOther)
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Elements(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Elements(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.Elements(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  isExternal: true
  name: Elements(Int32, Expression<Func<TInput, Object>>)
  nameWithType: Template<TInput, TResult>.Elements(Int32, Expression<Func<TInput, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Elements(System.Int32, System.Linq.Expressions.Expression<System.Func<TInput, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).Elements(Int32, Expression(Of Func(Of TInput, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Elements(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TInput, System.Object)))
  name.vb: Elements(Int32, Expression(Of Func(Of TInput, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Elements(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Elements
    nameWithType: Template<TInput, TResult>.Elements
    fullName: MongoDB.Entities.Template<TInput, TResult>.Elements
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Elements(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: Elements
    nameWithType: Template(Of TInput, TResult).Elements
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Elements
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.ElementsOfResult(System.Int32,System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.ElementsOfResult(System.Int32,System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
  isExternal: true
  name: ElementsOfResult(Int32, Expression<Func<TResult, Object>>)
  nameWithType: Template<TInput, TResult>.ElementsOfResult(Int32, Expression<Func<TResult, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.ElementsOfResult(System.Int32, System.Linq.Expressions.Expression<System.Func<TResult, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).ElementsOfResult(Int32, Expression(Of Func(Of TResult, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).ElementsOfResult(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TResult, System.Object)))
  name.vb: ElementsOfResult(Int32, Expression(Of Func(Of TResult, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.ElementsOfResult(System.Int32,System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: ElementsOfResult
    nameWithType: Template<TInput, TResult>.ElementsOfResult
    fullName: MongoDB.Entities.Template<TInput, TResult>.ElementsOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.ElementsOfResult(System.Int32,System.Linq.Expressions.Expression{System.Func{`1,System.Object}})
    name: ElementsOfResult
    nameWithType: Template(Of TInput, TResult).ElementsOfResult
    fullName: MongoDB.Entities.Template(Of TInput, TResult).ElementsOfResult
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template`2.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: Elements<TOther>(Int32, Expression<Func<TOther, Object>>)
  nameWithType: Template<TInput, TResult>.Elements<TOther>(Int32, Expression<Func<TOther, Object>>)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Elements<TOther>(System.Int32, System.Linq.Expressions.Expression<System.Func<TOther, System.Object>>)
  nameWithType.vb: Template(Of TInput, TResult).Elements(Of TOther)(Int32, Expression(Of Func(Of TOther, Object)))
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Elements(Of TOther)(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of TOther, System.Object)))
  name.vb: Elements(Of TOther)(Int32, Expression(Of Func(Of TOther, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements<TOther>
    nameWithType: Template<TInput, TResult>.Elements<TOther>
    fullName: MongoDB.Entities.Template<TInput, TResult>.Elements<TOther>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements(Of TOther)
    nameWithType: Template(Of TInput, TResult).Elements(Of TOther)
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Elements(Of TOther)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOther
    nameWithType: TOther
    fullName: TOther
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.Tag(System.String,System.String)
  commentId: M:MongoDB.Entities.Template`2.Tag(System.String,System.String)
  isExternal: true
  name: Tag(String, String)
  nameWithType: Template<TInput, TResult>.Tag(String, String)
  fullName: MongoDB.Entities.Template<TInput, TResult>.Tag(System.String, System.String)
  nameWithType.vb: Template(Of TInput, TResult).Tag(String, String)
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).Tag(System.String, System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.Tag(System.String,System.String)
    name: Tag
    nameWithType: Template<TInput, TResult>.Tag
    fullName: MongoDB.Entities.Template<TInput, TResult>.Tag
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.Tag(System.String,System.String)
    name: Tag
    nameWithType: Template(Of TInput, TResult).Tag
    fullName: MongoDB.Entities.Template(Of TInput, TResult).Tag
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.ToPipeline
  commentId: M:MongoDB.Entities.Template`2.ToPipeline
  name: ToPipeline()
  nameWithType: Template<TInput, TResult>.ToPipeline()
  fullName: MongoDB.Entities.Template<TInput, TResult>.ToPipeline()
  nameWithType.vb: Template(Of TInput, TResult).ToPipeline()
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).ToPipeline()
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.ToPipeline
    name: ToPipeline
    nameWithType: Template<TInput, TResult>.ToPipeline
    fullName: MongoDB.Entities.Template<TInput, TResult>.ToPipeline
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.ToPipeline
    name: ToPipeline
    nameWithType: Template(Of TInput, TResult).ToPipeline
    fullName: MongoDB.Entities.Template(Of TInput, TResult).ToPipeline
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2.ToArrayFilters
  commentId: M:MongoDB.Entities.Template`2.ToArrayFilters
  name: ToArrayFilters()
  nameWithType: Template<TInput, TResult>.ToArrayFilters()
  fullName: MongoDB.Entities.Template<TInput, TResult>.ToArrayFilters()
  nameWithType.vb: Template(Of TInput, TResult).ToArrayFilters()
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult).ToArrayFilters()
  spec.csharp:
  - uid: MongoDB.Entities.Template`2.ToArrayFilters
    name: ToArrayFilters
    nameWithType: Template<TInput, TResult>.ToArrayFilters
    fullName: MongoDB.Entities.Template<TInput, TResult>.ToArrayFilters
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template`2.ToArrayFilters
    name: ToArrayFilters
    nameWithType: Template(Of TInput, TResult).ToArrayFilters
    fullName: MongoDB.Entities.Template(Of TInput, TResult).ToArrayFilters
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: Property<T>(Expression<Func<T, Object>>)
  nameWithType: Template.Property<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.Property<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.Property(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.Property(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Property(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Property<T>
    nameWithType: Template.Property<T>
    fullName: MongoDB.Entities.Template.Property<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Property(Of T)
    nameWithType: Template.Property(Of T)
    fullName: MongoDB.Entities.Template.Property(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: Properties<T>(Expression<Func<T, Object>>)
  nameWithType: Template.Properties<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.Properties<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.Properties(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.Properties(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Properties(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Properties<T>
    nameWithType: Template.Properties<T>
    fullName: MongoDB.Entities.Template.Properties<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Properties``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Properties(Of T)
    nameWithType: Template.Properties(Of T)
    fullName: MongoDB.Entities.Template.Properties(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: Path<T>(Expression<Func<T, Object>>)
  nameWithType: Template.Path<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.Path<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.Path(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.Path(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Path(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Path<T>
    nameWithType: Template.Path<T>
    fullName: MongoDB.Entities.Template.Path<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Path``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Path(Of T)
    nameWithType: Template.Path(Of T)
    fullName: MongoDB.Entities.Template.Path(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: Paths<T>(Expression<Func<T, Object>>)
  nameWithType: Template.Paths<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.Paths<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.Paths(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.Paths(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Paths(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Paths<T>
    nameWithType: Template.Paths<T>
    fullName: MongoDB.Entities.Template.Paths<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Paths``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Paths(Of T)
    nameWithType: Template.Paths(Of T)
    fullName: MongoDB.Entities.Template.Paths(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: PosFiltered<T>(Expression<Func<T, Object>>)
  nameWithType: Template.PosFiltered<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.PosFiltered<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.PosFiltered(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.PosFiltered(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PosFiltered(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFiltered<T>
    nameWithType: Template.PosFiltered<T>
    fullName: MongoDB.Entities.Template.PosFiltered<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.PosFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFiltered(Of T)
    nameWithType: Template.PosFiltered(Of T)
    fullName: MongoDB.Entities.Template.PosFiltered(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: PosAll<T>(Expression<Func<T, Object>>)
  nameWithType: Template.PosAll<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.PosAll<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.PosAll(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.PosAll(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PosAll(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosAll<T>
    nameWithType: Template.PosAll<T>
    fullName: MongoDB.Entities.Template.PosAll<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.PosAll``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosAll(Of T)
    nameWithType: Template.PosAll(Of T)
    fullName: MongoDB.Entities.Template.PosAll(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: PosFirst<T>(Expression<Func<T, Object>>)
  nameWithType: Template.PosFirst<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.PosFirst<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.PosFirst(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.PosFirst(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: PosFirst(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFirst<T>
    nameWithType: Template.PosFirst<T>
    fullName: MongoDB.Entities.Template.PosFirst<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.PosFirst``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: PosFirst(Of T)
    nameWithType: Template.PosFirst(Of T)
    fullName: MongoDB.Entities.Template.PosFirst(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: Elements<T>(Expression<Func<T, Object>>)
  nameWithType: Template.Elements<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.Elements<T>(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.Elements(Of T)(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.Elements(Of T)(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Elements(Of T)(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements<T>
    nameWithType: Template.Elements<T>
    fullName: MongoDB.Entities.Template.Elements<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Elements``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements(Of T)
    nameWithType: Template.Elements(Of T)
    fullName: MongoDB.Entities.Template.Elements(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Template.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  isExternal: true
  name: Elements<T>(Int32, Expression<Func<T, Object>>)
  nameWithType: Template.Elements<T>(Int32, Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Template.Elements<T>(System.Int32, System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: Template.Elements(Of T)(Int32, Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Template.Elements(Of T)(System.Int32, System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Elements(Of T)(Int32, Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Template.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements<T>
    nameWithType: Template.Elements<T>
    fullName: MongoDB.Entities.Template.Elements<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Template.Elements``1(System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
    name: Elements(Of T)
    nameWithType: Template.Elements(Of T)
    fullName: MongoDB.Entities.Template.Elements(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`1.#ctor*
  commentId: Overload:MongoDB.Entities.Template`1.#ctor
  name: Template
  nameWithType: Template<T>.Template
  fullName: MongoDB.Entities.Template<T>.Template
  nameWithType.vb: Template(Of T).Template
  fullName.vb: MongoDB.Entities.Template(Of T).Template
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
