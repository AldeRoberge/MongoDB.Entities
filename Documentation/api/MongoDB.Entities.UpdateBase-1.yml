### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.UpdateBase`1
  commentId: T:MongoDB.Entities.UpdateBase`1
  id: UpdateBase`1
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.UpdateBase`1.AddModification(Func{UpdateDefinitionBuilder{`0},UpdateDefinition{`0}})
  - MongoDB.Entities.UpdateBase`1.AddModification(MongoDB.Entities.Template)
  - MongoDB.Entities.UpdateBase`1.AddModification(System.String)
  - MongoDB.Entities.UpdateBase`1.AddModification``1(Expression{Func{`0,``0}},``0)
  - MongoDB.Entities.UpdateBase`1.defs
  langs:
  - csharp
  - vb
  name: UpdateBase<T>
  nameWithType: UpdateBase<T>
  fullName: MongoDB.Entities.UpdateBase<T>
  type: Class
  source:
    id: UpdateBase
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Update.cs
    startLine: 11
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  syntax:
    content: 'public abstract class UpdateBase<T> : object where T : IEntity'
    typeParameters:
    - id: T
    content.vb: >-
      Public MustInherit Class UpdateBase(Of T As IEntity)

          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - MongoDB.Entities.Update`1
  - MongoDB.Entities.UpdateAndGet`2
  nameWithType.vb: UpdateBase(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: MongoDB.Entities.UpdateBase(Of T)
  name.vb: UpdateBase(Of T)
- uid: MongoDB.Entities.UpdateBase`1.defs
  commentId: F:MongoDB.Entities.UpdateBase`1.defs
  id: defs
  parent: MongoDB.Entities.UpdateBase`1
  langs:
  - csharp
  - vb
  name: defs
  nameWithType: UpdateBase<T>.defs
  fullName: MongoDB.Entities.UpdateBase<T>.defs
  type: Field
  source:
    id: defs
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Update.cs
    startLine: 16
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  syntax:
    content: protected readonly List<UpdateDefinition<T>> defs
    return:
      type: List{UpdateDefinition{{T}}}
    content.vb: Protected ReadOnly defs As List(Of UpdateDefinition(Of T))
  nameWithType.vb: UpdateBase(Of T).defs
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).defs
- uid: MongoDB.Entities.UpdateBase`1.AddModification``1(Expression{Func{`0,``0}},``0)
  commentId: M:MongoDB.Entities.UpdateBase`1.AddModification``1(Expression{Func{`0,``0}},``0)
  id: AddModification``1(Expression{Func{`0,``0}},``0)
  parent: MongoDB.Entities.UpdateBase`1
  langs:
  - csharp
  - vb
  name: AddModification<TProp>(Expression<Func<T, TProp>>, TProp)
  nameWithType: UpdateBase<T>.AddModification<TProp>(Expression<Func<T, TProp>>, TProp)
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification<TProp>(Expression<Func<T, TProp>>, TProp)
  type: Method
  source:
    id: AddModification
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Update.cs
    startLine: 23
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the property and it&apos;s value to modify (use multiple times if needed)\n"
  example: []
  syntax:
    content: public void AddModification<TProp>(Expression<Func<T, TProp>> property, TProp value)
    parameters:
    - id: property
      type: Expression{Func{{T},{TProp}}}
      description: x => x.Property
    - id: value
      type: '{TProp}'
      description: The value to set on the property
    typeParameters:
    - id: TProp
    content.vb: Public Sub AddModification(Of TProp)(property As Expression(Of Func(Of T, TProp)), value As TProp)
  overload: MongoDB.Entities.UpdateBase`1.AddModification*
  nameWithType.vb: UpdateBase(Of T).AddModification(Of TProp)(Expression(Of Func(Of T, TProp)), TProp)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification(Of TProp)(Expression(Of Func(Of T, TProp)), TProp)
  name.vb: AddModification(Of TProp)(Expression(Of Func(Of T, TProp)), TProp)
- uid: MongoDB.Entities.UpdateBase`1.AddModification(Func{UpdateDefinitionBuilder{`0},UpdateDefinition{`0}})
  commentId: M:MongoDB.Entities.UpdateBase`1.AddModification(Func{UpdateDefinitionBuilder{`0},UpdateDefinition{`0}})
  id: AddModification(Func{UpdateDefinitionBuilder{`0},UpdateDefinition{`0}})
  parent: MongoDB.Entities.UpdateBase`1
  langs:
  - csharp
  - vb
  name: AddModification(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>)
  nameWithType: UpdateBase<T>.AddModification(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>)
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>)
  type: Method
  source:
    id: AddModification
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Update.cs
    startLine: 32
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the update definition builder operation to modify the Entities (use multiple times if needed)\n"
  example: []
  syntax:
    content: public void AddModification(Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>> operation)
    parameters:
    - id: operation
      type: Func{UpdateDefinitionBuilder{{T}},UpdateDefinition{{T}}}
      description: b => b.Inc(x => x.PropName, Value)
    content.vb: Public Sub AddModification(operation As Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T)))
  overload: MongoDB.Entities.UpdateBase`1.AddModification*
  nameWithType.vb: UpdateBase(Of T).AddModification(Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification(Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T)))
  name.vb: AddModification(Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T)))
- uid: MongoDB.Entities.UpdateBase`1.AddModification(System.String)
  commentId: M:MongoDB.Entities.UpdateBase`1.AddModification(System.String)
  id: AddModification(System.String)
  parent: MongoDB.Entities.UpdateBase`1
  langs:
  - csharp
  - vb
  name: AddModification(String)
  nameWithType: UpdateBase<T>.AddModification(String)
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification(System.String)
  type: Method
  source:
    id: AddModification
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Update.cs
    startLine: 41
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an update (json string) to modify the Entities (use multiple times if needed)\n"
  example: []
  syntax:
    content: public void AddModification(string update)
    parameters:
    - id: update
      type: System.String
      description: '{ $set: { &apos;RootProp.$[x].SubProp&apos; : 321 } }'
    content.vb: Public Sub AddModification(update As String)
  overload: MongoDB.Entities.UpdateBase`1.AddModification*
  nameWithType.vb: UpdateBase(Of T).AddModification(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification(System.String)
- uid: MongoDB.Entities.UpdateBase`1.AddModification(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.UpdateBase`1.AddModification(MongoDB.Entities.Template)
  id: AddModification(MongoDB.Entities.Template)
  parent: MongoDB.Entities.UpdateBase`1
  langs:
  - csharp
  - vb
  name: AddModification(Template)
  nameWithType: UpdateBase<T>.AddModification(Template)
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification(MongoDB.Entities.Template)
  type: Method
  source:
    id: AddModification
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Update.cs
    startLine: 50
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an update with a Template to modify the Entities (use multiple times if needed)\n"
  example: []
  syntax:
    content: public void AddModification(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: A Template with a single update
    content.vb: Public Sub AddModification(template As Template)
  overload: MongoDB.Entities.UpdateBase`1.AddModification*
  nameWithType.vb: UpdateBase(Of T).AddModification(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification(MongoDB.Entities.Template)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: List{UpdateDefinition{{T}}}
  commentId: '!:List{UpdateDefinition{`0}}'
  definition: List`1
  name: List<UpdateDefinition<T>>
  nameWithType: List<UpdateDefinition<T>>
  fullName: List<UpdateDefinition<T>>
  nameWithType.vb: List(Of UpdateDefinition(Of T))
  fullName.vb: List(Of UpdateDefinition(Of T))
  name.vb: List(Of UpdateDefinition(Of T))
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UpdateDefinition`1
    name: UpdateDefinition
    nameWithType: UpdateDefinition
    fullName: UpdateDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UpdateDefinition`1
    name: UpdateDefinition
    nameWithType: UpdateDefinition
    fullName: UpdateDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  commentId: '!:List`1'
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.UpdateBase`1.AddModification*
  commentId: Overload:MongoDB.Entities.UpdateBase`1.AddModification
  name: AddModification
  nameWithType: UpdateBase<T>.AddModification
  fullName: MongoDB.Entities.UpdateBase<T>.AddModification
  nameWithType.vb: UpdateBase(Of T).AddModification
  fullName.vb: MongoDB.Entities.UpdateBase(Of T).AddModification
- uid: Expression{Func{{T},{TProp}}}
  commentId: '!:Expression{Func{`0,``0}}'
  definition: Expression`1
  name: Expression<Func<T, TProp>>
  nameWithType: Expression<Func<T, TProp>>
  fullName: Expression<Func<T, TProp>>
  nameWithType.vb: Expression(Of Func(Of T, TProp))
  fullName.vb: Expression(Of Func(Of T, TProp))
  name.vb: Expression(Of Func(Of T, TProp))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProp
    nameWithType: TProp
    fullName: TProp
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TProp}'
  commentId: '!:TProp'
  definition: TProp
  name: TProp
  nameWithType: TProp
  fullName: TProp
- uid: Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: TProp
  name: TProp
  nameWithType: TProp
  fullName: TProp
- uid: Func{UpdateDefinitionBuilder{{T}},UpdateDefinition{{T}}}
  commentId: '!:Func{UpdateDefinitionBuilder{`0},UpdateDefinition{`0}}'
  definition: Func`2
  name: Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>
  nameWithType: Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>
  fullName: Func<UpdateDefinitionBuilder<T>, UpdateDefinition<T>>
  nameWithType.vb: Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T))
  fullName.vb: Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T))
  name.vb: Func(Of UpdateDefinitionBuilder(Of T), UpdateDefinition(Of T))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UpdateDefinitionBuilder`1
    name: UpdateDefinitionBuilder
    nameWithType: UpdateDefinitionBuilder
    fullName: UpdateDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UpdateDefinition`1
    name: UpdateDefinition
    nameWithType: UpdateDefinition
    fullName: UpdateDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UpdateDefinitionBuilder`1
    name: UpdateDefinitionBuilder
    nameWithType: UpdateDefinitionBuilder
    fullName: UpdateDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: UpdateDefinition`1
    name: UpdateDefinition
    nameWithType: UpdateDefinition
    fullName: UpdateDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MongoDB.Entities.Template
  commentId: T:MongoDB.Entities.Template
  parent: MongoDB.Entities
  name: Template
  nameWithType: Template
  fullName: MongoDB.Entities.Template
