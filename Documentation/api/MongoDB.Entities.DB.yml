### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.DB
  commentId: T:MongoDB.Entities.DB
  id: DB
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.DB.AllDatabaseNamesAsync(MongoClientSettings)
  - MongoDB.Entities.DB.AllDatabaseNamesAsync(System.String,System.Int32)
  - MongoDB.Entities.DB.ChangeDefaultDatabase(System.String)
  - MongoDB.Entities.DB.Collection``1
  - MongoDB.Entities.DB.CollectionName``1
  - MongoDB.Entities.DB.CountAsync``1(Expression{Func{``0,System.Boolean}},IClientSessionHandle,CancellationToken,CountOptions)
  - MongoDB.Entities.DB.CountAsync``1(FilterDefinition{``0},IClientSessionHandle,CancellationToken,CountOptions)
  - MongoDB.Entities.DB.CountAsync``1(Func{FilterDefinitionBuilder{``0},FilterDefinition{``0}},IClientSessionHandle,CancellationToken,CountOptions)
  - MongoDB.Entities.DB.CountAsync``1(IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.CountEstimatedAsync``1(CancellationToken)
  - MongoDB.Entities.DB.CreateCollection``1(CreateCollectionOptions{``0},CancellationToken,IClientSessionHandle)
  - MongoDB.Entities.DB.Database(System.String)
  - MongoDB.Entities.DB.Database``1
  - MongoDB.Entities.DB.DatabaseFor``1(System.String)
  - MongoDB.Entities.DB.DatabaseName``1
  - MongoDB.Entities.DB.DeleteAsync``1(Expression{Func{``0,System.Boolean}},IClientSessionHandle,CancellationToken,Collation)
  - MongoDB.Entities.DB.DeleteAsync``1(FilterDefinition{``0},IClientSessionHandle,CancellationToken,Collation)
  - MongoDB.Entities.DB.DeleteAsync``1(Func{FilterDefinitionBuilder{``0},FilterDefinition{``0}},IClientSessionHandle,CancellationToken,Collation)
  - MongoDB.Entities.DB.DeleteAsync``1(IEnumerable{System.String},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.DeleteAsync``1(System.String,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.Distinct``2(IClientSessionHandle)
  - MongoDB.Entities.DB.DropCollectionAsync``1(IClientSessionHandle)
  - MongoDB.Entities.DB.Entity``1
  - MongoDB.Entities.DB.Entity``1(System.String)
  - MongoDB.Entities.DB.File``1(System.String)
  - MongoDB.Entities.DB.Filter``1
  - MongoDB.Entities.DB.Find``1(IClientSessionHandle)
  - MongoDB.Entities.DB.Find``2(IClientSessionHandle)
  - MongoDB.Entities.DB.Fluent``1(AggregateOptions,IClientSessionHandle)
  - MongoDB.Entities.DB.FluentGeoNear``1(MongoDB.Entities.Coordinates2D,Expression{Func{``0,System.Object}},System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32},BsonDocument,System.Nullable{System.Double},Expression{Func{``0,System.Object}},System.String,AggregateOptions,IClientSessionHandle)
  - MongoDB.Entities.DB.FluentTextSearch``1(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String,AggregateOptions,IClientSessionHandle)
  - MongoDB.Entities.DB.Index``1
  - MongoDB.Entities.DB.InitAsync(System.String,MongoClientSettings)
  - MongoDB.Entities.DB.InitAsync(System.String,System.String,System.Int32)
  - MongoDB.Entities.DB.InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.InsertAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.MigrateAsync
  - MongoDB.Entities.DB.MigrateAsync``1
  - MongoDB.Entities.DB.NextSequentialNumberAsync(System.String,CancellationToken)
  - MongoDB.Entities.DB.NextSequentialNumberAsync``1(CancellationToken)
  - MongoDB.Entities.DB.PipelineAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.PipelineCursorAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.PipelineFirstAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.PipelineSingleAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.Projection``1
  - MongoDB.Entities.DB.Queryable``1(AggregateOptions,IClientSessionHandle)
  - MongoDB.Entities.DB.Replace``1(IClientSessionHandle)
  - MongoDB.Entities.DB.SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.SaveAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.SaveExceptAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.SaveOnlyAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.DB.Sort``1
  - MongoDB.Entities.DB.Transaction(System.String,ClientSessionOptions,MongoDB.Entities.ModifiedBy)
  - MongoDB.Entities.DB.Transaction``1(ClientSessionOptions,MongoDB.Entities.ModifiedBy)
  - MongoDB.Entities.DB.Update``1(IClientSessionHandle)
  - MongoDB.Entities.DB.UpdateAndGet``1(IClientSessionHandle)
  - MongoDB.Entities.DB.UpdateAndGet``2(IClientSessionHandle)
  - MongoDB.Entities.DB.Watcher``1(System.String)
  - MongoDB.Entities.DB.Watchers``1
  langs:
  - csharp
  - vb
  name: DB
  nameWithType: DB
  fullName: MongoDB.Entities.DB
  type: Class
  source:
    id: DB
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Watcher.cs
    startLine: 4
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThe main entrypoint for all data access methods of the library\n"
  example: []
  syntax:
    content: 'public static class DB : object'
    content.vb: >-
      Public Module DB

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: MongoDB.Entities.DB.Collection``1
  commentId: M:MongoDB.Entities.DB.Collection``1
  id: Collection``1
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Collection<T>()
  nameWithType: DB.Collection<T>()
  fullName: MongoDB.Entities.DB.Collection<T>()
  type: Method
  source:
    id: Collection
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Collection.cs
    startLine: 19
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets the IMongoCollection for a given IEntity type.\n<p>TIP: Try never to use this unless really necessary.</p>\n"
  example: []
  syntax:
    content: >-
      public static IMongoCollection<T> Collection<T>()

          where T : IEntity
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: IMongoCollection{{T}}
    content.vb: Public Shared Function Collection(Of T As IEntity) As IMongoCollection(Of T)
  overload: MongoDB.Entities.DB.Collection*
  nameWithType.vb: DB.Collection(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Collection(Of T)()
  name.vb: Collection(Of T)()
- uid: MongoDB.Entities.DB.CollectionName``1
  commentId: M:MongoDB.Entities.DB.CollectionName``1
  id: CollectionName``1
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: CollectionName<T>()
  nameWithType: DB.CollectionName<T>()
  fullName: MongoDB.Entities.DB.CollectionName<T>()
  type: Method
  source:
    id: CollectionName
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Collection.cs
    startLine: 28
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets the collection name for a given entity type\n"
  example: []
  syntax:
    content: >-
      public static string CollectionName<T>()

          where T : IEntity
    typeParameters:
    - id: T
      description: The type of entity to get the collection name for
    return:
      type: System.String
    content.vb: Public Shared Function CollectionName(Of T As IEntity) As String
  overload: MongoDB.Entities.DB.CollectionName*
  nameWithType.vb: DB.CollectionName(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.CollectionName(Of T)()
  name.vb: CollectionName(Of T)()
- uid: MongoDB.Entities.DB.CreateCollection``1(CreateCollectionOptions{``0},CancellationToken,IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.CreateCollection``1(CreateCollectionOptions{``0},CancellationToken,IClientSessionHandle)
  id: CreateCollection``1(CreateCollectionOptions{``0},CancellationToken,IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: CreateCollection<T>(CreateCollectionOptions<T>, CancellationToken, IClientSessionHandle)
  nameWithType: DB.CreateCollection<T>(CreateCollectionOptions<T>, CancellationToken, IClientSessionHandle)
  fullName: MongoDB.Entities.DB.CreateCollection<T>(CreateCollectionOptions<T>, CancellationToken, IClientSessionHandle)
  type: Method
  source:
    id: CreateCollection
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Collection.cs
    startLine: 40
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nCreates a collection for an Entity type explicitly using the given options\n"
  example: []
  syntax:
    content: >-
      public static Task CreateCollection<T>(CreateCollectionOptions<T> options, CancellationToken cancellation = null, IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: options
      type: CreateCollectionOptions{{T}}
      description: The options to use for collection creation
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    typeParameters:
    - id: T
      description: The type of entity that will be stored in the created collection
    return:
      type: Task
    content.vb: Public Shared Function CreateCollection(Of T As IEntity)(options As CreateCollectionOptions(Of T), cancellation As CancellationToken = Nothing, session As IClientSessionHandle = Nothing) As Task
  overload: MongoDB.Entities.DB.CreateCollection*
  nameWithType.vb: DB.CreateCollection(Of T)(CreateCollectionOptions(Of T), CancellationToken, IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.CreateCollection(Of T)(CreateCollectionOptions(Of T), CancellationToken, IClientSessionHandle)
  name.vb: CreateCollection(Of T)(CreateCollectionOptions(Of T), CancellationToken, IClientSessionHandle)
- uid: MongoDB.Entities.DB.DropCollectionAsync``1(IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.DropCollectionAsync``1(IClientSessionHandle)
  id: DropCollectionAsync``1(IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: DropCollectionAsync<T>(IClientSessionHandle)
  nameWithType: DB.DropCollectionAsync<T>(IClientSessionHandle)
  fullName: MongoDB.Entities.DB.DropCollectionAsync<T>(IClientSessionHandle)
  type: Method
  source:
    id: DropCollectionAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Collection.cs
    startLine: 53
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nDeletes the collection of a given entity type as well as the join collections for that entity.\n<p>TIP: When deleting a collection, all relationships associated with that entity type is also deleted.</p>\n"
  example: []
  syntax:
    content: >-
      public static async Task DropCollectionAsync<T>(IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    typeParameters:
    - id: T
      description: The entity type to drop the collection of
    return:
      type: Task
    content.vb: Public Shared Function DropCollectionAsync(Of T As IEntity)(session As IClientSessionHandle = Nothing) As Task
  overload: MongoDB.Entities.DB.DropCollectionAsync*
  nameWithType.vb: DB.DropCollectionAsync(Of T)(IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.DropCollectionAsync(Of T)(IClientSessionHandle)
  name.vb: DropCollectionAsync(Of T)(IClientSessionHandle)
- uid: MongoDB.Entities.DB.CountEstimatedAsync``1(CancellationToken)
  commentId: M:MongoDB.Entities.DB.CountEstimatedAsync``1(CancellationToken)
  id: CountEstimatedAsync``1(CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: CountEstimatedAsync<T>(CancellationToken)
  nameWithType: DB.CountEstimatedAsync<T>(CancellationToken)
  fullName: MongoDB.Entities.DB.CountEstimatedAsync<T>(CancellationToken)
  type: Method
  source:
    id: CountEstimatedAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Count.cs
    startLine: 16
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets a fast estimation of how many documents are in the collection using metadata.\n<p>HINT: The estimation may not be exactly accurate.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<long> CountEstimatedAsync<T>(CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: The entity type to get the count for
    return:
      type: Task{System.Int64}
    content.vb: Public Shared Function CountEstimatedAsync(Of T As IEntity)(cancellation As CancellationToken = Nothing) As Task(Of Long)
  overload: MongoDB.Entities.DB.CountEstimatedAsync*
  nameWithType.vb: DB.CountEstimatedAsync(Of T)(CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.CountEstimatedAsync(Of T)(CancellationToken)
  name.vb: CountEstimatedAsync(Of T)(CancellationToken)
- uid: MongoDB.Entities.DB.CountAsync``1(Expression{Func{``0,System.Boolean}},IClientSessionHandle,CancellationToken,CountOptions)
  commentId: M:MongoDB.Entities.DB.CountAsync``1(Expression{Func{``0,System.Boolean}},IClientSessionHandle,CancellationToken,CountOptions)
  id: CountAsync``1(Expression{Func{``0,System.Boolean}},IClientSessionHandle,CancellationToken,CountOptions)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: CountAsync<T>(Expression<Func<T, Boolean>>, IClientSessionHandle, CancellationToken, CountOptions)
  nameWithType: DB.CountAsync<T>(Expression<Func<T, Boolean>>, IClientSessionHandle, CancellationToken, CountOptions)
  fullName: MongoDB.Entities.DB.CountAsync<T>(Expression<Func<T, System.Boolean>>, IClientSessionHandle, CancellationToken, CountOptions)
  type: Method
  source:
    id: CountAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Count.cs
    startLine: 29
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets an accurate count of how many entities are matched for a given expression/filter\n"
  example: []
  syntax:
    content: >-
      public static Task<long> CountAsync<T>(Expression<Func<T, bool>> expression, IClientSessionHandle session = null, CancellationToken cancellation = null, CountOptions options = null)

          where T : IEntity
    parameters:
    - id: expression
      type: Expression{Func{{T},System.Boolean}}
      description: A lambda expression for getting the count for a subset of the data
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    - id: options
      type: CountOptions
      description: An optional CountOptions object
    typeParameters:
    - id: T
      description: The entity type to get the count for
    return:
      type: Task{System.Int64}
    content.vb: Public Shared Function CountAsync(Of T As IEntity)(expression As Expression(Of Func(Of T, Boolean)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing, options As CountOptions = Nothing) As Task(Of Long)
  overload: MongoDB.Entities.DB.CountAsync*
  nameWithType.vb: DB.CountAsync(Of T)(Expression(Of Func(Of T, Boolean)), IClientSessionHandle, CancellationToken, CountOptions)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.CountAsync(Of T)(Expression(Of Func(Of T, System.Boolean)), IClientSessionHandle, CancellationToken, CountOptions)
  name.vb: CountAsync(Of T)(Expression(Of Func(Of T, Boolean)), IClientSessionHandle, CancellationToken, CountOptions)
- uid: MongoDB.Entities.DB.CountAsync``1(FilterDefinition{``0},IClientSessionHandle,CancellationToken,CountOptions)
  commentId: M:MongoDB.Entities.DB.CountAsync``1(FilterDefinition{``0},IClientSessionHandle,CancellationToken,CountOptions)
  id: CountAsync``1(FilterDefinition{``0},IClientSessionHandle,CancellationToken,CountOptions)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: CountAsync<T>(FilterDefinition<T>, IClientSessionHandle, CancellationToken, CountOptions)
  nameWithType: DB.CountAsync<T>(FilterDefinition<T>, IClientSessionHandle, CancellationToken, CountOptions)
  fullName: MongoDB.Entities.DB.CountAsync<T>(FilterDefinition<T>, IClientSessionHandle, CancellationToken, CountOptions)
  type: Method
  source:
    id: CountAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Count.cs
    startLine: 45
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets an accurate count of how many total entities are in the collection for a given entity type\n"
  example: []
  syntax:
    content: >-
      public static Task<long> CountAsync<T>(FilterDefinition<T> filter, IClientSessionHandle session = null, CancellationToken cancellation = null, CountOptions options = null)

          where T : IEntity
    parameters:
    - id: filter
      type: FilterDefinition{{T}}
      description: A filter definition
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    - id: options
      type: CountOptions
      description: An optional CountOptions object
    typeParameters:
    - id: T
      description: The entity type to get the count for
    return:
      type: Task{System.Int64}
    content.vb: Public Shared Function CountAsync(Of T As IEntity)(filter As FilterDefinition(Of T), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing, options As CountOptions = Nothing) As Task(Of Long)
  overload: MongoDB.Entities.DB.CountAsync*
  nameWithType.vb: DB.CountAsync(Of T)(FilterDefinition(Of T), IClientSessionHandle, CancellationToken, CountOptions)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.CountAsync(Of T)(FilterDefinition(Of T), IClientSessionHandle, CancellationToken, CountOptions)
  name.vb: CountAsync(Of T)(FilterDefinition(Of T), IClientSessionHandle, CancellationToken, CountOptions)
- uid: MongoDB.Entities.DB.CountAsync``1(Func{FilterDefinitionBuilder{``0},FilterDefinition{``0}},IClientSessionHandle,CancellationToken,CountOptions)
  commentId: M:MongoDB.Entities.DB.CountAsync``1(Func{FilterDefinitionBuilder{``0},FilterDefinition{``0}},IClientSessionHandle,CancellationToken,CountOptions)
  id: CountAsync``1(Func{FilterDefinitionBuilder{``0},FilterDefinition{``0}},IClientSessionHandle,CancellationToken,CountOptions)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: CountAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, IClientSessionHandle, CancellationToken, CountOptions)
  nameWithType: DB.CountAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, IClientSessionHandle, CancellationToken, CountOptions)
  fullName: MongoDB.Entities.DB.CountAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, IClientSessionHandle, CancellationToken, CountOptions)
  type: Method
  source:
    id: CountAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Count.cs
    startLine: 61
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets an accurate count of how many total entities are in the collection for a given entity type\n"
  example: []
  syntax:
    content: >-
      public static Task<long> CountAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter, IClientSessionHandle session = null, CancellationToken cancellation = null, CountOptions options = null)

          where T : IEntity
    parameters:
    - id: filter
      type: Func{FilterDefinitionBuilder{{T}},FilterDefinition{{T}}}
      description: f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    - id: options
      type: CountOptions
      description: An optional CountOptions object
    typeParameters:
    - id: T
      description: The entity type to get the count for
    return:
      type: Task{System.Int64}
    content.vb: Public Shared Function CountAsync(Of T As IEntity)(filter As Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing, options As CountOptions = Nothing) As Task(Of Long)
  overload: MongoDB.Entities.DB.CountAsync*
  nameWithType.vb: DB.CountAsync(Of T)(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), IClientSessionHandle, CancellationToken, CountOptions)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.CountAsync(Of T)(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), IClientSessionHandle, CancellationToken, CountOptions)
  name.vb: CountAsync(Of T)(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), IClientSessionHandle, CancellationToken, CountOptions)
- uid: MongoDB.Entities.DB.CountAsync``1(IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.CountAsync``1(IClientSessionHandle,CancellationToken)
  id: CountAsync``1(IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: CountAsync<T>(IClientSessionHandle, CancellationToken)
  nameWithType: DB.CountAsync<T>(IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.CountAsync<T>(IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: CountAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Count.cs
    startLine: 75
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets an accurate count of how many total entities are in the collection for a given entity type\n"
  example: []
  syntax:
    content: >-
      public static Task<long> CountAsync<T>(IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: The entity type to get the count for
    return:
      type: Task{System.Int64}
    content.vb: Public Shared Function CountAsync(Of T As IEntity)(session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of Long)
  overload: MongoDB.Entities.DB.CountAsync*
  nameWithType.vb: DB.CountAsync(Of T)(IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.CountAsync(Of T)(IClientSessionHandle, CancellationToken)
  name.vb: CountAsync(Of T)(IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.InitAsync(System.String,System.String,System.Int32)
  commentId: M:MongoDB.Entities.DB.InitAsync(System.String,System.String,System.Int32)
  id: InitAsync(System.String,System.String,System.Int32)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: InitAsync(String, String, Int32)
  nameWithType: DB.InitAsync(String, String, Int32)
  fullName: MongoDB.Entities.DB.InitAsync(System.String, System.String, System.Int32)
  type: Method
  source:
    id: InitAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 50
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nInitializes a MongoDB connection with the given connection parameters.\n<p>WARNING: will throw an error if server is not reachable!</p>\nYou can call this method as many times as you want (such as in serverless functions) with the same parameters and the connections won&apos;t get duplicated.\n"
  example: []
  syntax:
    content: public static Task InitAsync(string database, string host = "127.0.0.1", int port = 27017)
    parameters:
    - id: database
      type: System.String
      description: Name of the database
    - id: host
      type: System.String
      description: Address of the MongoDB server
    - id: port
      type: System.Int32
      description: Port number of the server
    return:
      type: Task
    content.vb: Public Shared Function InitAsync(database As String, host As String = "127.0.0.1", port As Integer = 27017) As Task
  overload: MongoDB.Entities.DB.InitAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MongoDB.Entities.DB.InitAsync(System.String,MongoClientSettings)
  commentId: M:MongoDB.Entities.DB.InitAsync(System.String,MongoClientSettings)
  id: InitAsync(System.String,MongoClientSettings)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: InitAsync(String, MongoClientSettings)
  nameWithType: DB.InitAsync(String, MongoClientSettings)
  fullName: MongoDB.Entities.DB.InitAsync(System.String, MongoClientSettings)
  type: Method
  source:
    id: InitAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 63
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nInitializes a MongoDB connection with the given connection parameters.\n<p>WARNING: will throw an error if server is not reachable!</p>\nYou can call this method as many times as you want (such as in serverless functions) with the same parameters and the connections won&apos;t get duplicated.\n"
  example: []
  syntax:
    content: public static Task InitAsync(string database, MongoClientSettings settings)
    parameters:
    - id: database
      type: System.String
      description: Name of the database
    - id: settings
      type: MongoClientSettings
      description: A MongoClientSettings object
    return:
      type: Task
    content.vb: Public Shared Function InitAsync(database As String, settings As MongoClientSettings) As Task
  overload: MongoDB.Entities.DB.InitAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MongoDB.Entities.DB.AllDatabaseNamesAsync(System.String,System.Int32)
  commentId: M:MongoDB.Entities.DB.AllDatabaseNamesAsync(System.String,System.Int32)
  id: AllDatabaseNamesAsync(System.String,System.Int32)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: AllDatabaseNamesAsync(String, Int32)
  nameWithType: DB.AllDatabaseNamesAsync(String, Int32)
  fullName: MongoDB.Entities.DB.AllDatabaseNamesAsync(System.String, System.Int32)
  type: Method
  source:
    id: AllDatabaseNamesAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 98
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets a list of all database names from the server\n"
  example: []
  syntax:
    content: public static Task<IEnumerable<string>> AllDatabaseNamesAsync(string host = "127.0.0.1", int port = 27017)
    parameters:
    - id: host
      type: System.String
      description: Address of the MongoDB server
    - id: port
      type: System.Int32
      description: Port number of the server
    return:
      type: Task{IEnumerable{System.String}}
    content.vb: Public Shared Function AllDatabaseNamesAsync(host As String = "127.0.0.1", port As Integer = 27017) As Task(Of IEnumerable(Of String))
  overload: MongoDB.Entities.DB.AllDatabaseNamesAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MongoDB.Entities.DB.AllDatabaseNamesAsync(MongoClientSettings)
  commentId: M:MongoDB.Entities.DB.AllDatabaseNamesAsync(MongoClientSettings)
  id: AllDatabaseNamesAsync(MongoClientSettings)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: AllDatabaseNamesAsync(MongoClientSettings)
  nameWithType: DB.AllDatabaseNamesAsync(MongoClientSettings)
  fullName: MongoDB.Entities.DB.AllDatabaseNamesAsync(MongoClientSettings)
  type: Method
  source:
    id: AllDatabaseNamesAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 107
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets a list of all database names from the server\n"
  example: []
  syntax:
    content: public static async Task<IEnumerable<string>> AllDatabaseNamesAsync(MongoClientSettings settings)
    parameters:
    - id: settings
      type: MongoClientSettings
      description: A MongoClientSettings object
    return:
      type: Task{IEnumerable{System.String}}
    content.vb: Public Shared Function AllDatabaseNamesAsync(settings As MongoClientSettings) As Task(Of IEnumerable(Of String))
  overload: MongoDB.Entities.DB.AllDatabaseNamesAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: MongoDB.Entities.DB.DatabaseFor``1(System.String)
  commentId: M:MongoDB.Entities.DB.DatabaseFor``1(System.String)
  id: DatabaseFor``1(System.String)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: DatabaseFor<T>(String)
  nameWithType: DB.DatabaseFor<T>(String)
  fullName: MongoDB.Entities.DB.DatabaseFor<T>(System.String)
  type: Method
  source:
    id: DatabaseFor
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 121
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecifies the database that a given entity type should be stored in. \nOnly needed for entity types you want stored in a db other than the default db.\n"
  example: []
  syntax:
    content: >-
      public static void DatabaseFor<T>(string database)

          where T : IEntity
    parameters:
    - id: database
      type: System.String
      description: The name of the database
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    content.vb: Public Shared Sub DatabaseFor(Of T As IEntity)(database As String)
  overload: MongoDB.Entities.DB.DatabaseFor*
  nameWithType.vb: DB.DatabaseFor(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.DatabaseFor(Of T)(System.String)
  name.vb: DatabaseFor(Of T)(String)
- uid: MongoDB.Entities.DB.Database``1
  commentId: M:MongoDB.Entities.DB.Database``1
  id: Database``1
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Database<T>()
  nameWithType: DB.Database<T>()
  fullName: MongoDB.Entities.DB.Database<T>()
  type: Method
  source:
    id: Database
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 128
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets the IMongoDatabase for the given entity type\n"
  example: []
  syntax:
    content: >-
      public static IMongoDatabase Database<T>()

          where T : IEntity
    typeParameters:
    - id: T
      description: The type of entity
    return:
      type: IMongoDatabase
    content.vb: Public Shared Function Database(Of T As IEntity) As IMongoDatabase
  overload: MongoDB.Entities.DB.Database*
  nameWithType.vb: DB.Database(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Database(Of T)()
  name.vb: Database(Of T)()
- uid: MongoDB.Entities.DB.Database(System.String)
  commentId: M:MongoDB.Entities.DB.Database(System.String)
  id: Database(System.String)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Database(String)
  nameWithType: DB.Database(String)
  fullName: MongoDB.Entities.DB.Database(System.String)
  type: Method
  source:
    id: Database
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 138
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets the IMongoDatabase for a given database name if it has been previously initialized.\nYou can also get the default database by passing &apos;default&apos; or &apos;null&apos; for the name parameter.\n"
  example: []
  syntax:
    content: public static IMongoDatabase Database(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the database to retrieve
    return:
      type: IMongoDatabase
    content.vb: Public Shared Function Database(name As String) As IMongoDatabase
  overload: MongoDB.Entities.DB.Database*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MongoDB.Entities.DB.DatabaseName``1
  commentId: M:MongoDB.Entities.DB.DatabaseName``1
  id: DatabaseName``1
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: DatabaseName<T>()
  nameWithType: DB.DatabaseName<T>()
  fullName: MongoDB.Entities.DB.DatabaseName<T>()
  type: Method
  source:
    id: DatabaseName
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 160
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets the name of the database a given entity type is attached to. Returns name of default database if not specifically attached.\n"
  example: []
  syntax:
    content: >-
      public static string DatabaseName<T>()

          where T : IEntity
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: System.String
    content.vb: Public Shared Function DatabaseName(Of T As IEntity) As String
  overload: MongoDB.Entities.DB.DatabaseName*
  nameWithType.vb: DB.DatabaseName(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.DatabaseName(Of T)()
  name.vb: DatabaseName(Of T)()
- uid: MongoDB.Entities.DB.ChangeDefaultDatabase(System.String)
  commentId: M:MongoDB.Entities.DB.ChangeDefaultDatabase(System.String)
  id: ChangeDefaultDatabase(System.String)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: ChangeDefaultDatabase(String)
  nameWithType: DB.ChangeDefaultDatabase(String)
  fullName: MongoDB.Entities.DB.ChangeDefaultDatabase(System.String)
  type: Method
  source:
    id: ChangeDefaultDatabase
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 171
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSwitches the default database at runtime\n<p>WARNING: Use at your own risk!!! Might result in entities getting saved in the wrong databases under high concurrency situations.</p>\n<p>TIP: Make sure to cancel any watchers (change-streams) before switching the default database.</p>\n"
  example: []
  syntax:
    content: public static void ChangeDefaultDatabase(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the database to mark as the new default database
    content.vb: Public Shared Sub ChangeDefaultDatabase(name As String)
  overload: MongoDB.Entities.DB.ChangeDefaultDatabase*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MongoDB.Entities.DB.Filter``1
  commentId: M:MongoDB.Entities.DB.Filter``1
  id: Filter``1
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Filter<T>()
  nameWithType: DB.Filter<T>()
  fullName: MongoDB.Entities.DB.Filter<T>()
  type: Method
  source:
    id: Filter
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 187
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nExposes the mongodb Filter Definition Builder for a given type.\n"
  example: []
  syntax:
    content: >-
      public static FilterDefinitionBuilder<T> Filter<T>()

          where T : IEntity
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: FilterDefinitionBuilder{{T}}
    content.vb: Public Shared Function Filter(Of T As IEntity) As FilterDefinitionBuilder(Of T)
  overload: MongoDB.Entities.DB.Filter*
  nameWithType.vb: DB.Filter(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Filter(Of T)()
  name.vb: Filter(Of T)()
- uid: MongoDB.Entities.DB.Sort``1
  commentId: M:MongoDB.Entities.DB.Sort``1
  id: Sort``1
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Sort<T>()
  nameWithType: DB.Sort<T>()
  fullName: MongoDB.Entities.DB.Sort<T>()
  type: Method
  source:
    id: Sort
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 196
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nExposes the mongodb Sort Definition Builder for a given type.\n"
  example: []
  syntax:
    content: >-
      public static SortDefinitionBuilder<T> Sort<T>()

          where T : IEntity
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: SortDefinitionBuilder{{T}}
    content.vb: Public Shared Function Sort(Of T As IEntity) As SortDefinitionBuilder(Of T)
  overload: MongoDB.Entities.DB.Sort*
  nameWithType.vb: DB.Sort(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Sort(Of T)()
  name.vb: Sort(Of T)()
- uid: MongoDB.Entities.DB.Projection``1
  commentId: M:MongoDB.Entities.DB.Projection``1
  id: Projection``1
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Projection<T>()
  nameWithType: DB.Projection<T>()
  fullName: MongoDB.Entities.DB.Projection<T>()
  type: Method
  source:
    id: Projection
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 205
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nExposes the mongodb Projection Definition Builder for a given type.\n"
  example: []
  syntax:
    content: >-
      public static ProjectionDefinitionBuilder<T> Projection<T>()

          where T : IEntity
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: ProjectionDefinitionBuilder{{T}}
    content.vb: Public Shared Function Projection(Of T As IEntity) As ProjectionDefinitionBuilder(Of T)
  overload: MongoDB.Entities.DB.Projection*
  nameWithType.vb: DB.Projection(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Projection(Of T)()
  name.vb: Projection(Of T)()
- uid: MongoDB.Entities.DB.Entity``1
  commentId: M:MongoDB.Entities.DB.Entity``1
  id: Entity``1
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Entity<T>()
  nameWithType: DB.Entity<T>()
  fullName: MongoDB.Entities.DB.Entity<T>()
  type: Method
  source:
    id: Entity
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 214
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns a new instance of the supplied IEntity type\n"
  example: []
  syntax:
    content: >-
      public static T Entity<T>()

          where T : IEntity, new()
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: '{T}'
    content.vb: Public Shared Function Entity(Of T As {IEntity, New}) As T
  overload: MongoDB.Entities.DB.Entity*
  nameWithType.vb: DB.Entity(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Entity(Of T)()
  name.vb: Entity(Of T)()
- uid: MongoDB.Entities.DB.Entity``1(System.String)
  commentId: M:MongoDB.Entities.DB.Entity``1(System.String)
  id: Entity``1(System.String)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Entity<T>(String)
  nameWithType: DB.Entity<T>(String)
  fullName: MongoDB.Entities.DB.Entity<T>(System.String)
  type: Method
  source:
    id: Entity
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.cs
    startLine: 224
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns a new instance of the supplied IEntity type with the ID set to the supplied value\n"
  example: []
  syntax:
    content: >-
      public static T Entity<T>(string ID)

          where T : IEntity, new()
    parameters:
    - id: ID
      type: System.String
      description: The ID to set on the returned instance
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: '{T}'
    content.vb: Public Shared Function Entity(Of T As {IEntity, New})(ID As String) As T
  overload: MongoDB.Entities.DB.Entity*
  nameWithType.vb: DB.Entity(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Entity(Of T)(System.String)
  name.vb: Entity(Of T)(String)
- uid: MongoDB.Entities.DB.DeleteAsync``1(System.String,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.DeleteAsync``1(System.String,IClientSessionHandle,CancellationToken)
  id: DeleteAsync``1(System.String,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: DeleteAsync<T>(String, IClientSessionHandle, CancellationToken)
  nameWithType: DB.DeleteAsync<T>(String, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.DeleteAsync<T>(System.String, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: DeleteAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Delete.cs
    startLine: 72
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nDeletes a single entity from MongoDB.\n<p>HINT: If this entity is referenced by one-to-many/many-to-many relationships, those references are also deleted.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<DeleteResult> DeleteAsync<T>(string ID, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: ID
      type: System.String
      description: The Id of the entity to delete
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{DeleteResult}
    content.vb: Public Shared Function DeleteAsync(Of T As IEntity)(ID As String, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of DeleteResult)
  overload: MongoDB.Entities.DB.DeleteAsync*
  nameWithType.vb: DB.DeleteAsync(Of T)(String, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.DeleteAsync(Of T)(System.String, IClientSessionHandle, CancellationToken)
  name.vb: DeleteAsync(Of T)(String, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.DeleteAsync``1(IEnumerable{System.String},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.DeleteAsync``1(IEnumerable{System.String},IClientSessionHandle,CancellationToken)
  id: DeleteAsync``1(IEnumerable{System.String},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: DeleteAsync<T>(IEnumerable<String>, IClientSessionHandle, CancellationToken)
  nameWithType: DB.DeleteAsync<T>(IEnumerable<String>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.DeleteAsync<T>(IEnumerable<System.String>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: DeleteAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Delete.cs
    startLine: 87
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nDeletes entities using a collection of IDs\n<p>HINT: If more than 100,000 IDs are passed in, they will be processed in batches of 100k.</p>\n<p>HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted.</p>\n"
  example: []
  syntax:
    content: >-
      public static async Task<DeleteResult> DeleteAsync<T>(IEnumerable<string> IDs, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: IDs
      type: IEnumerable{System.String}
      description: An IEnumerable of entity IDs
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{DeleteResult}
    content.vb: Public Shared Function DeleteAsync(Of T As IEntity)(IDs As IEnumerable(Of String), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of DeleteResult)
  overload: MongoDB.Entities.DB.DeleteAsync*
  nameWithType.vb: DB.DeleteAsync(Of T)(IEnumerable(Of String), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.DeleteAsync(Of T)(IEnumerable(Of System.String), IClientSessionHandle, CancellationToken)
  name.vb: DeleteAsync(Of T)(IEnumerable(Of String), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.DeleteAsync``1(Expression{Func{``0,System.Boolean}},IClientSessionHandle,CancellationToken,Collation)
  commentId: M:MongoDB.Entities.DB.DeleteAsync``1(Expression{Func{``0,System.Boolean}},IClientSessionHandle,CancellationToken,Collation)
  id: DeleteAsync``1(Expression{Func{``0,System.Boolean}},IClientSessionHandle,CancellationToken,Collation)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: DeleteAsync<T>(Expression<Func<T, Boolean>>, IClientSessionHandle, CancellationToken, Collation)
  nameWithType: DB.DeleteAsync<T>(Expression<Func<T, Boolean>>, IClientSessionHandle, CancellationToken, Collation)
  fullName: MongoDB.Entities.DB.DeleteAsync<T>(Expression<Func<T, System.Boolean>>, IClientSessionHandle, CancellationToken, Collation)
  type: Method
  source:
    id: DeleteAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Delete.cs
    startLine: 119
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nDeletes matching entities with an expression\n<p>HINT: If the expression matches more than 100,000 entities, they will be deleted in batches of 100k.</p>\n<p>HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<DeleteResult> DeleteAsync<T>(Expression<Func<T, bool>> expression, IClientSessionHandle session = null, CancellationToken cancellation = null, Collation collation = null)

          where T : IEntity
    parameters:
    - id: expression
      type: Expression{Func{{T},System.Boolean}}
      description: A lambda expression for matching entities to delete.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    - id: collation
      type: Collation
      description: An optional collation object
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{DeleteResult}
    content.vb: Public Shared Function DeleteAsync(Of T As IEntity)(expression As Expression(Of Func(Of T, Boolean)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing, collation As Collation = Nothing) As Task(Of DeleteResult)
  overload: MongoDB.Entities.DB.DeleteAsync*
  nameWithType.vb: DB.DeleteAsync(Of T)(Expression(Of Func(Of T, Boolean)), IClientSessionHandle, CancellationToken, Collation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.DeleteAsync(Of T)(Expression(Of Func(Of T, System.Boolean)), IClientSessionHandle, CancellationToken, Collation)
  name.vb: DeleteAsync(Of T)(Expression(Of Func(Of T, Boolean)), IClientSessionHandle, CancellationToken, Collation)
- uid: MongoDB.Entities.DB.DeleteAsync``1(Func{FilterDefinitionBuilder{``0},FilterDefinition{``0}},IClientSessionHandle,CancellationToken,Collation)
  commentId: M:MongoDB.Entities.DB.DeleteAsync``1(Func{FilterDefinitionBuilder{``0},FilterDefinition{``0}},IClientSessionHandle,CancellationToken,Collation)
  id: DeleteAsync``1(Func{FilterDefinitionBuilder{``0},FilterDefinition{``0}},IClientSessionHandle,CancellationToken,Collation)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: DeleteAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, IClientSessionHandle, CancellationToken, Collation)
  nameWithType: DB.DeleteAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, IClientSessionHandle, CancellationToken, Collation)
  fullName: MongoDB.Entities.DB.DeleteAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, IClientSessionHandle, CancellationToken, Collation)
  type: Method
  source:
    id: DeleteAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Delete.cs
    startLine: 134
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nDeletes matching entities with a filter expression\n<p>HINT: If the expression matches more than 100,000 entities, they will be deleted in batches of 100k.</p>\n<p>HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<DeleteResult> DeleteAsync<T>(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter, IClientSessionHandle session = null, CancellationToken cancellation = null, Collation collation = null)

          where T : IEntity
    parameters:
    - id: filter
      type: Func{FilterDefinitionBuilder{{T}},FilterDefinition{{T}}}
      description: f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    - id: collation
      type: Collation
      description: An optional collation object
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{DeleteResult}
    content.vb: Public Shared Function DeleteAsync(Of T As IEntity)(filter As Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing, collation As Collation = Nothing) As Task(Of DeleteResult)
  overload: MongoDB.Entities.DB.DeleteAsync*
  nameWithType.vb: DB.DeleteAsync(Of T)(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), IClientSessionHandle, CancellationToken, Collation)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.DeleteAsync(Of T)(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), IClientSessionHandle, CancellationToken, Collation)
  name.vb: DeleteAsync(Of T)(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), IClientSessionHandle, CancellationToken, Collation)
- uid: MongoDB.Entities.DB.DeleteAsync``1(FilterDefinition{``0},IClientSessionHandle,CancellationToken,Collation)
  commentId: M:MongoDB.Entities.DB.DeleteAsync``1(FilterDefinition{``0},IClientSessionHandle,CancellationToken,Collation)
  id: DeleteAsync``1(FilterDefinition{``0},IClientSessionHandle,CancellationToken,Collation)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: DeleteAsync<T>(FilterDefinition<T>, IClientSessionHandle, CancellationToken, Collation)
  nameWithType: DB.DeleteAsync<T>(FilterDefinition<T>, IClientSessionHandle, CancellationToken, Collation)
  fullName: MongoDB.Entities.DB.DeleteAsync<T>(FilterDefinition<T>, IClientSessionHandle, CancellationToken, Collation)
  type: Method
  source:
    id: DeleteAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Delete.cs
    startLine: 149
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nDeletes matching entities with a filter definition\n<p>HINT: If the expression matches more than 100,000 entities, they will be deleted in batches of 100k.</p>\n<p>HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted.</p>\n"
  example: []
  syntax:
    content: >-
      public static async Task<DeleteResult> DeleteAsync<T>(FilterDefinition<T> filter, IClientSessionHandle session = null, CancellationToken cancellation = null, Collation collation = null)

          where T : IEntity
    parameters:
    - id: filter
      type: FilterDefinition{{T}}
      description: A filter definition for matching entities to delete.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    - id: collation
      type: Collation
      description: An optional collation object
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{DeleteResult}
    content.vb: Public Shared Function DeleteAsync(Of T As IEntity)(filter As FilterDefinition(Of T), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing, collation As Collation = Nothing) As Task(Of DeleteResult)
  overload: MongoDB.Entities.DB.DeleteAsync*
  nameWithType.vb: DB.DeleteAsync(Of T)(FilterDefinition(Of T), IClientSessionHandle, CancellationToken, Collation)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.DeleteAsync(Of T)(FilterDefinition(Of T), IClientSessionHandle, CancellationToken, Collation)
  name.vb: DeleteAsync(Of T)(FilterDefinition(Of T), IClientSessionHandle, CancellationToken, Collation)
- uid: MongoDB.Entities.DB.Distinct``2(IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.Distinct``2(IClientSessionHandle)
  id: Distinct``2(IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Distinct<T, TProperty>(IClientSessionHandle)
  nameWithType: DB.Distinct<T, TProperty>(IClientSessionHandle)
  fullName: MongoDB.Entities.DB.Distinct<T, TProperty>(IClientSessionHandle)
  type: Method
  source:
    id: Distinct
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Distinct.cs
    startLine: 12
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents a MongoDB Distinct command where you can get back distinct values for a given property of a given Entity.\n"
  example: []
  syntax:
    content: >-
      public static Distinct<T, TProperty> Distinct<T, TProperty>(IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    typeParameters:
    - id: T
      description: Any Entity that implements IEntity interface
    - id: TProperty
      description: The type of the property of the entity you&apos;d like to get unique values for
    return:
      type: MongoDB.Entities.Distinct{{T},{TProperty}}
    content.vb: Public Shared Function Distinct(Of T As IEntity, TProperty)(session As IClientSessionHandle = Nothing) As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.DB.Distinct*
  nameWithType.vb: DB.Distinct(Of T, TProperty)(IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Distinct(Of T, TProperty)(IClientSessionHandle)
  name.vb: Distinct(Of T, TProperty)(IClientSessionHandle)
- uid: MongoDB.Entities.DB.File``1(System.String)
  commentId: M:MongoDB.Entities.DB.File``1(System.String)
  id: File``1(System.String)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: File<T>(String)
  nameWithType: DB.File<T>(String)
  fullName: MongoDB.Entities.DB.File<T>(System.String)
  type: Method
  source:
    id: File
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.File.cs
    startLine: 12
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns a DataStreamer object to enable downloading file data directly by supplying the ID of the file entity\n"
  example: []
  syntax:
    content: >-
      public static DataStreamer File<T>(string ID)

          where T : FileEntity, new()
    parameters:
    - id: ID
      type: System.String
      description: The ID of the file entity
    typeParameters:
    - id: T
      description: The file entity type
    return:
      type: MongoDB.Entities.DataStreamer
    content.vb: Public Shared Function File(Of T As {FileEntity, New})(ID As String) As DataStreamer
  overload: MongoDB.Entities.DB.File*
  nameWithType.vb: DB.File(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.File(Of T)(System.String)
  name.vb: File(Of T)(String)
- uid: MongoDB.Entities.DB.Find``1(IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.Find``1(IClientSessionHandle)
  id: Find``1(IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Find<T>(IClientSessionHandle)
  nameWithType: DB.Find<T>(IClientSessionHandle)
  fullName: MongoDB.Entities.DB.Find<T>(IClientSessionHandle)
  type: Method
  source:
    id: Find
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Find.cs
    startLine: 12
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents a MongoDB Find command\n<p>TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute()</p>\n"
  example: []
  syntax:
    content: >-
      public static Find<T> Find<T>(IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: MongoDB.Entities.Find{{T}}
    content.vb: Public Shared Function Find(Of T As IEntity)(session As IClientSessionHandle = Nothing) As Find(Of T)
  overload: MongoDB.Entities.DB.Find*
  nameWithType.vb: DB.Find(Of T)(IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Find(Of T)(IClientSessionHandle)
  name.vb: Find(Of T)(IClientSessionHandle)
- uid: MongoDB.Entities.DB.Find``2(IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.Find``2(IClientSessionHandle)
  id: Find``2(IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Find<T, TProjection>(IClientSessionHandle)
  nameWithType: DB.Find<T, TProjection>(IClientSessionHandle)
  fullName: MongoDB.Entities.DB.Find<T, TProjection>(IClientSessionHandle)
  type: Method
  source:
    id: Find
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Find.cs
    startLine: 22
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents a MongoDB Find command\n<p>TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute()</p>\n"
  example: []
  syntax:
    content: >-
      public static Find<T, TProjection> Find<T, TProjection>(IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    - id: TProjection
      description: The type that is returned by projection
    return:
      type: MongoDB.Entities.Find{{T},{TProjection}}
    content.vb: Public Shared Function Find(Of T As IEntity, TProjection)(session As IClientSessionHandle = Nothing) As Find(Of T, TProjection)
  overload: MongoDB.Entities.DB.Find*
  nameWithType.vb: DB.Find(Of T, TProjection)(IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Find(Of T, TProjection)(IClientSessionHandle)
  name.vb: Find(Of T, TProjection)(IClientSessionHandle)
- uid: MongoDB.Entities.DB.Fluent``1(AggregateOptions,IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.Fluent``1(AggregateOptions,IClientSessionHandle)
  id: Fluent``1(AggregateOptions,IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Fluent<T>(AggregateOptions, IClientSessionHandle)
  nameWithType: DB.Fluent<T>(AggregateOptions, IClientSessionHandle)
  fullName: MongoDB.Entities.DB.Fluent<T>(AggregateOptions, IClientSessionHandle)
  type: Method
  source:
    id: Fluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Fluent.cs
    startLine: 12
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nExposes the MongoDB collection for the given IEntity as an IAggregateFluent in order to facilitate Fluent queries.\n"
  example: []
  syntax:
    content: >-
      public static IAggregateFluent<T> Fluent<T>(AggregateOptions options = null, IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: options
      type: AggregateOptions
      description: The options for the aggregation. This is not required.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: IAggregateFluent{{T}}
    content.vb: Public Shared Function Fluent(Of T As IEntity)(options As AggregateOptions = Nothing, session As IClientSessionHandle = Nothing) As IAggregateFluent(Of T)
  overload: MongoDB.Entities.DB.Fluent*
  nameWithType.vb: DB.Fluent(Of T)(AggregateOptions, IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Fluent(Of T)(AggregateOptions, IClientSessionHandle)
  name.vb: Fluent(Of T)(AggregateOptions, IClientSessionHandle)
- uid: MongoDB.Entities.DB.FluentTextSearch``1(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String,AggregateOptions,IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.FluentTextSearch``1(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String,AggregateOptions,IClientSessionHandle)
  id: FluentTextSearch``1(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String,AggregateOptions,IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: FluentTextSearch<T>(Search, String, Boolean, Boolean, String, AggregateOptions, IClientSessionHandle)
  nameWithType: DB.FluentTextSearch<T>(Search, String, Boolean, Boolean, String, AggregateOptions, IClientSessionHandle)
  fullName: MongoDB.Entities.DB.FluentTextSearch<T>(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String, AggregateOptions, IClientSessionHandle)
  type: Method
  source:
    id: FluentTextSearch
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Fluent.cs
    startLine: 30
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nStart a fluent aggregation pipeline with a $text stage with the supplied parameters.\n<p>TIP: Make sure to define a text index with DB.Index&lt;T>() before searching</p>\n"
  example: []
  syntax:
    content: >-
      public static IAggregateFluent<T> FluentTextSearch<T>(Search searchType, string searchTerm, bool caseSensitive = false, bool diacriticSensitive = false, string language = null, AggregateOptions options = null, IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: searchType
      type: MongoDB.Entities.Search
      description: The type of text matching to do
    - id: searchTerm
      type: System.String
      description: The search term
    - id: caseSensitive
      type: System.Boolean
      description: Case sensitivity of the search (optional)
    - id: diacriticSensitive
      type: System.Boolean
      description: Diacritic sensitivity of the search (optional)
    - id: language
      type: System.String
      description: The language for the search (optional)
    - id: options
      type: AggregateOptions
      description: Options for finding documents (not required)
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    typeParameters:
    - id: T
    return:
      type: IAggregateFluent{{T}}
    content.vb: Public Shared Function FluentTextSearch(Of T As IEntity)(searchType As Search, searchTerm As String, caseSensitive As Boolean = False, diacriticSensitive As Boolean = False, language As String = Nothing, options As AggregateOptions = Nothing, session As IClientSessionHandle = Nothing) As IAggregateFluent(Of T)
  overload: MongoDB.Entities.DB.FluentTextSearch*
  nameWithType.vb: DB.FluentTextSearch(Of T)(Search, String, Boolean, Boolean, String, AggregateOptions, IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.FluentTextSearch(Of T)(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String, AggregateOptions, IClientSessionHandle)
  name.vb: FluentTextSearch(Of T)(Search, String, Boolean, Boolean, String, AggregateOptions, IClientSessionHandle)
- uid: MongoDB.Entities.DB.FluentGeoNear``1(MongoDB.Entities.Coordinates2D,Expression{Func{``0,System.Object}},System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32},BsonDocument,System.Nullable{System.Double},Expression{Func{``0,System.Object}},System.String,AggregateOptions,IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.FluentGeoNear``1(MongoDB.Entities.Coordinates2D,Expression{Func{``0,System.Object}},System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32},BsonDocument,System.Nullable{System.Double},Expression{Func{``0,System.Object}},System.String,AggregateOptions,IClientSessionHandle)
  id: FluentGeoNear``1(MongoDB.Entities.Coordinates2D,Expression{Func{``0,System.Object}},System.Boolean,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Int32},BsonDocument,System.Nullable{System.Double},Expression{Func{``0,System.Object}},System.String,AggregateOptions,IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: FluentGeoNear<T>(Coordinates2D, Expression<Func<T, Object>>, Boolean, Nullable<Double>, Nullable<Double>, Nullable<Int32>, BsonDocument, Nullable<Double>, Expression<Func<T, Object>>, String, AggregateOptions, IClientSessionHandle)
  nameWithType: DB.FluentGeoNear<T>(Coordinates2D, Expression<Func<T, Object>>, Boolean, Nullable<Double>, Nullable<Double>, Nullable<Int32>, BsonDocument, Nullable<Double>, Expression<Func<T, Object>>, String, AggregateOptions, IClientSessionHandle)
  fullName: MongoDB.Entities.DB.FluentGeoNear<T>(MongoDB.Entities.Coordinates2D, Expression<Func<T, System.Object>>, System.Boolean, System.Nullable<System.Double>, System.Nullable<System.Double>, System.Nullable<System.Int32>, BsonDocument, System.Nullable<System.Double>, Expression<Func<T, System.Object>>, System.String, AggregateOptions, IClientSessionHandle)
  type: Method
  source:
    id: FluentGeoNear
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.GeoNear.cs
    startLine: 24
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nStart a fluent aggregation pipeline with a $GeoNear stage with the supplied parameters.\n"
  example: []
  syntax:
    content: >-
      public static IAggregateFluent<T> FluentGeoNear<T>(Coordinates2D NearCoordinates, Expression<Func<T, object>> DistanceField, bool Spherical = true, double? MaxDistance = null, double? MinDistance = null, int? Limit = null, BsonDocument Query = null, double? DistanceMultiplier = null, Expression<Func<T, object>> IncludeLocations = null, string IndexKey = null, AggregateOptions options = null, IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: NearCoordinates
      type: MongoDB.Entities.Coordinates2D
      description: The coordinates from which to find documents from
    - id: DistanceField
      type: Expression{Func{{T},System.Object}}
      description: x => x.Distance
    - id: Spherical
      type: System.Boolean
      description: Calculate distances using spherical geometry or not
    - id: MaxDistance
      type: System.Nullable{System.Double}
      description: The maximum distance in meters from the center point that the documents can be
    - id: MinDistance
      type: System.Nullable{System.Double}
      description: The minimum distance in meters from the center point that the documents can be
    - id: Limit
      type: System.Nullable{System.Int32}
      description: The maximum number of documents to return
    - id: Query
      type: BsonDocument
      description: Limits the results to the documents that match the query
    - id: DistanceMultiplier
      type: System.Nullable{System.Double}
      description: The factor to multiply all distances returned by the query
    - id: IncludeLocations
      type: Expression{Func{{T},System.Object}}
      description: Specify the output field to store the point used to calculate the distance
    - id: IndexKey
      type: System.String
      description: ''
    - id: options
      type: AggregateOptions
      description: The options for the aggregation. This is not required.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    typeParameters:
    - id: T
    return:
      type: IAggregateFluent{{T}}
    content.vb: Public Shared Function FluentGeoNear(Of T As IEntity)(NearCoordinates As Coordinates2D, DistanceField As Expression(Of Func(Of T, Object)), Spherical As Boolean = True, MaxDistance As Double? = Nothing, MinDistance As Double? = Nothing, Limit As Integer? = Nothing, Query As BsonDocument = Nothing, DistanceMultiplier As Double? = Nothing, IncludeLocations As Expression(Of Func(Of T, Object)) = Nothing, IndexKey As String = Nothing, options As AggregateOptions = Nothing, session As IClientSessionHandle = Nothing) As IAggregateFluent(Of T)
  overload: MongoDB.Entities.DB.FluentGeoNear*
  nameWithType.vb: DB.FluentGeoNear(Of T)(Coordinates2D, Expression(Of Func(Of T, Object)), Boolean, Nullable(Of Double), Nullable(Of Double), Nullable(Of Int32), BsonDocument, Nullable(Of Double), Expression(Of Func(Of T, Object)), String, AggregateOptions, IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.FluentGeoNear(Of T)(MongoDB.Entities.Coordinates2D, Expression(Of Func(Of T, System.Object)), System.Boolean, System.Nullable(Of System.Double), System.Nullable(Of System.Double), System.Nullable(Of System.Int32), BsonDocument, System.Nullable(Of System.Double), Expression(Of Func(Of T, System.Object)), System.String, AggregateOptions, IClientSessionHandle)
  name.vb: FluentGeoNear(Of T)(Coordinates2D, Expression(Of Func(Of T, Object)), Boolean, Nullable(Of Double), Nullable(Of Double), Nullable(Of Int32), BsonDocument, Nullable(Of Double), Expression(Of Func(Of T, Object)), String, AggregateOptions, IClientSessionHandle)
- uid: MongoDB.Entities.DB.Index``1
  commentId: M:MongoDB.Entities.DB.Index``1
  id: Index``1
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Index<T>()
  nameWithType: DB.Index<T>()
  fullName: MongoDB.Entities.DB.Index<T>()
  type: Method
  source:
    id: Index
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Index.cs
    startLine: 9
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents an index for a given IEntity\n<p>TIP: Define the keys first with .Key() method and finally call the .Create() method.</p>\n"
  example: []
  syntax:
    content: >-
      public static Index<T> Index<T>()

          where T : IEntity
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: MongoDB.Entities.Index{{T}}
    content.vb: Public Shared Function Index(Of T As IEntity) As Index(Of T)
  overload: MongoDB.Entities.DB.Index*
  nameWithType.vb: DB.Index(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Index(Of T)()
  name.vb: Index(Of T)()
- uid: MongoDB.Entities.DB.InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
  id: InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: InsertAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType: DB.InsertAsync<T>(T, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.InsertAsync<T>(T, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: InsertAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Insert.cs
    startLine: 18
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nInserts a new entity into the colleciton.\n"
  example: []
  syntax:
    content: >-
      public static Task InsertAsync<T>(T entity, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
      description: The instance to persist
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: And optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task
    content.vb: Public Shared Function InsertAsync(Of T As IEntity)(entity As T, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.DB.InsertAsync*
  nameWithType.vb: DB.InsertAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.InsertAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  name.vb: InsertAsync(Of T)(T, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.InsertAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.InsertAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  id: InsertAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: InsertAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  nameWithType: DB.InsertAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.InsertAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: InsertAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Insert.cs
    startLine: 33
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nInserts a batch of new entities into the collection.\n"
  example: []
  syntax:
    content: >-
      public static Task<BulkWriteResult<T>> InsertAsync<T>(IEnumerable<T> entities, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entities
      type: IEnumerable{{T}}
      description: The entities to persist
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: And optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{BulkWriteResult{{T}}}
    content.vb: Public Shared Function InsertAsync(Of T As IEntity)(entities As IEnumerable(Of T), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of BulkWriteResult(Of T))
  overload: MongoDB.Entities.DB.InsertAsync*
  nameWithType.vb: DB.InsertAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.InsertAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
  name.vb: InsertAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.MigrateAsync``1
  commentId: M:MongoDB.Entities.DB.MigrateAsync``1
  id: MigrateAsync``1
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: MigrateAsync<T>()
  nameWithType: DB.MigrateAsync<T>()
  fullName: MongoDB.Entities.DB.MigrateAsync<T>()
  type: Method
  source:
    id: MigrateAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Migrate.cs
    startLine: 15
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nDiscover and run migrations from the same assembly as the specified type.\n"
  example: []
  syntax:
    content: >-
      public static async Task MigrateAsync<T>()

          where T : class
    typeParameters:
    - id: T
      description: A type that is from the same assembly as the migrations you want to run
    return:
      type: Task
    content.vb: Public Shared Function MigrateAsync(Of T As Class) As Task
  overload: MongoDB.Entities.DB.MigrateAsync*
  nameWithType.vb: DB.MigrateAsync(Of T)()
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.MigrateAsync(Of T)()
  name.vb: MigrateAsync(Of T)()
- uid: MongoDB.Entities.DB.MigrateAsync
  commentId: M:MongoDB.Entities.DB.MigrateAsync
  id: MigrateAsync
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: MigrateAsync()
  nameWithType: DB.MigrateAsync()
  fullName: MongoDB.Entities.DB.MigrateAsync()
  type: Method
  source:
    id: MigrateAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Migrate.cs
    startLine: 24
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nExecutes migration classes that implement the IMigration interface in the correct order to transform the database.\n<p>TIP: Write classes with names such as: _001_rename_a_field.cs, _002_delete_a_field.cs, etc. and implement IMigration interface on them. Call this method at the startup of the application in order to run the migrations.</p>\n"
  example: []
  syntax:
    content: public static async Task MigrateAsync()
    return:
      type: Task
    content.vb: Public Shared Function MigrateAsync As Task
  overload: MongoDB.Entities.DB.MigrateAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: MongoDB.Entities.DB.PipelineCursorAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.PipelineCursorAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  id: PipelineCursorAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: PipelineCursorAsync<T, TResult>(Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken)
  nameWithType: DB.PipelineCursorAsync<T, TResult>(Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.PipelineCursorAsync<T, TResult>(MongoDB.Entities.Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: PipelineCursorAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Pipeline.cs
    startLine: 19
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nExecutes an aggregation pipeline by supplying a &apos;Template&apos; object and returns a cursor\n"
  example: []
  syntax:
    content: >-
      public static Task<IAsyncCursor<TResult>> PipelineCursorAsync<T, TResult>(Template<T, TResult> template, AggregateOptions options = null, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: template
      type: MongoDB.Entities.Template{{T},{TResult}}
      description: A &apos;Template&apos; object with tags replaced
    - id: options
      type: AggregateOptions
      description: The options for the aggregation. This is not required.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    - id: TResult
      description: The type of the resulting objects
    return:
      type: Task{IAsyncCursor{{TResult}}}
    content.vb: Public Shared Function PipelineCursorAsync(Of T As IEntity, TResult)(template As Template(Of T, TResult), options As AggregateOptions = Nothing, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of IAsyncCursor(Of TResult))
  overload: MongoDB.Entities.DB.PipelineCursorAsync*
  nameWithType.vb: DB.PipelineCursorAsync(Of T, TResult)(Template(Of T, TResult), AggregateOptions, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.PipelineCursorAsync(Of T, TResult)(MongoDB.Entities.Template(Of T, TResult), AggregateOptions, IClientSessionHandle, CancellationToken)
  name.vb: PipelineCursorAsync(Of T, TResult)(Template(Of T, TResult), AggregateOptions, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.PipelineAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.PipelineAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  id: PipelineAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: PipelineAsync<T, TResult>(Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken)
  nameWithType: DB.PipelineAsync<T, TResult>(Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.PipelineAsync<T, TResult>(MongoDB.Entities.Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: PipelineAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Pipeline.cs
    startLine: 35
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nExecutes an aggregation pipeline by supplying a &apos;Template&apos; object and get a list of results\n"
  example: []
  syntax:
    content: >-
      public static async Task<List<TResult>> PipelineAsync<T, TResult>(Template<T, TResult> template, AggregateOptions options = null, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: template
      type: MongoDB.Entities.Template{{T},{TResult}}
      description: A &apos;Template&apos; object with tags replaced
    - id: options
      type: AggregateOptions
      description: The options for the aggregation. This is not required.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    - id: TResult
      description: The type of the resulting objects
    return:
      type: Task{List{{TResult}}}
    content.vb: Public Shared Function PipelineAsync(Of T As IEntity, TResult)(template As Template(Of T, TResult), options As AggregateOptions = Nothing, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of List(Of TResult))
  overload: MongoDB.Entities.DB.PipelineAsync*
  nameWithType.vb: DB.PipelineAsync(Of T, TResult)(Template(Of T, TResult), AggregateOptions, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.PipelineAsync(Of T, TResult)(MongoDB.Entities.Template(Of T, TResult), AggregateOptions, IClientSessionHandle, CancellationToken)
  name.vb: PipelineAsync(Of T, TResult)(Template(Of T, TResult), AggregateOptions, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.PipelineSingleAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.PipelineSingleAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  id: PipelineSingleAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: PipelineSingleAsync<T, TResult>(Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken)
  nameWithType: DB.PipelineSingleAsync<T, TResult>(Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.PipelineSingleAsync<T, TResult>(MongoDB.Entities.Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: PipelineSingleAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Pipeline.cs
    startLine: 58
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nExecutes an aggregation pipeline by supplying a &apos;Template&apos; object and get a single result or default value if not found. \nIf more than one entity is found, it will throw an exception.\n"
  example: []
  syntax:
    content: >-
      public static async Task<TResult> PipelineSingleAsync<T, TResult>(Template<T, TResult> template, AggregateOptions options = null, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: template
      type: MongoDB.Entities.Template{{T},{TResult}}
      description: A &apos;Template&apos; object with tags replaced
    - id: options
      type: AggregateOptions
      description: The options for the aggregation. This is not required.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    - id: TResult
      description: The type of the resulting object
    return:
      type: Task{{TResult}}
    content.vb: Public Shared Function PipelineSingleAsync(Of T As IEntity, TResult)(template As Template(Of T, TResult), options As AggregateOptions = Nothing, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of TResult)
  overload: MongoDB.Entities.DB.PipelineSingleAsync*
  nameWithType.vb: DB.PipelineSingleAsync(Of T, TResult)(Template(Of T, TResult), AggregateOptions, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.PipelineSingleAsync(Of T, TResult)(MongoDB.Entities.Template(Of T, TResult), AggregateOptions, IClientSessionHandle, CancellationToken)
  name.vb: PipelineSingleAsync(Of T, TResult)(Template(Of T, TResult), AggregateOptions, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.PipelineFirstAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.PipelineFirstAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  id: PipelineFirstAsync``2(MongoDB.Entities.Template{``0,``1},AggregateOptions,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: PipelineFirstAsync<T, TResult>(Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken)
  nameWithType: DB.PipelineFirstAsync<T, TResult>(Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.PipelineFirstAsync<T, TResult>(MongoDB.Entities.Template<T, TResult>, AggregateOptions, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: PipelineFirstAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Pipeline.cs
    startLine: 79
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nExecutes an aggregation pipeline by supplying a &apos;Template&apos; object and get the first result or default value if not found.\n"
  example: []
  syntax:
    content: >-
      public static async Task<TResult> PipelineFirstAsync<T, TResult>(Template<T, TResult> template, AggregateOptions options = null, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: template
      type: MongoDB.Entities.Template{{T},{TResult}}
      description: A &apos;Template&apos; object with tags replaced
    - id: options
      type: AggregateOptions
      description: The options for the aggregation. This is not required.
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    - id: TResult
      description: The type of the resulting object
    return:
      type: Task{{TResult}}
    content.vb: Public Shared Function PipelineFirstAsync(Of T As IEntity, TResult)(template As Template(Of T, TResult), options As AggregateOptions = Nothing, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of TResult)
  overload: MongoDB.Entities.DB.PipelineFirstAsync*
  nameWithType.vb: DB.PipelineFirstAsync(Of T, TResult)(Template(Of T, TResult), AggregateOptions, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.PipelineFirstAsync(Of T, TResult)(MongoDB.Entities.Template(Of T, TResult), AggregateOptions, IClientSessionHandle, CancellationToken)
  name.vb: PipelineFirstAsync(Of T, TResult)(Template(Of T, TResult), AggregateOptions, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.Queryable``1(AggregateOptions,IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.Queryable``1(AggregateOptions,IClientSessionHandle)
  id: Queryable``1(AggregateOptions,IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Queryable<T>(AggregateOptions, IClientSessionHandle)
  nameWithType: DB.Queryable<T>(AggregateOptions, IClientSessionHandle)
  fullName: MongoDB.Entities.DB.Queryable<T>(AggregateOptions, IClientSessionHandle)
  type: Method
  source:
    id: Queryable
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Queryable.cs
    startLine: 13
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nExposes the MongoDB collection for the given IEntity as an IQueryable in order to facilitate LINQ queries.\n"
  example: []
  syntax:
    content: >-
      public static IMongoQueryable<T> Queryable<T>(AggregateOptions options = null, IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: options
      type: AggregateOptions
      description: The aggregate options
    - id: session
      type: IClientSessionHandle
      description: An optional session if used within a transaction
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: IMongoQueryable{{T}}
    content.vb: Public Shared Function Queryable(Of T As IEntity)(options As AggregateOptions = Nothing, session As IClientSessionHandle = Nothing) As IMongoQueryable(Of T)
  overload: MongoDB.Entities.DB.Queryable*
  nameWithType.vb: DB.Queryable(Of T)(AggregateOptions, IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Queryable(Of T)(AggregateOptions, IClientSessionHandle)
  name.vb: Queryable(Of T)(AggregateOptions, IClientSessionHandle)
- uid: MongoDB.Entities.DB.Replace``1(IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.Replace``1(IClientSessionHandle)
  id: Replace``1(IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Replace<T>(IClientSessionHandle)
  nameWithType: DB.Replace<T>(IClientSessionHandle)
  fullName: MongoDB.Entities.DB.Replace<T>(IClientSessionHandle)
  type: Method
  source:
    id: Replace
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Replace.cs
    startLine: 12
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents a ReplaceOne command, which can replace the first matched document with a given entity\n<p>TIP: Specify a filter first with the .Match(). Then set entity with .WithEntity() and finally call .Execute() to run the command.</p>\n"
  example: []
  syntax:
    content: >-
      public static Replace<T> Replace<T>(IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: MongoDB.Entities.Replace{{T}}
    content.vb: Public Shared Function Replace(Of T As IEntity)(session As IClientSessionHandle = Nothing) As Replace(Of T)
  overload: MongoDB.Entities.DB.Replace*
  nameWithType.vb: DB.Replace(Of T)(IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Replace(Of T)(IClientSessionHandle)
  name.vb: Replace(Of T)(IClientSessionHandle)
- uid: MongoDB.Entities.DB.SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
  id: SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: SaveAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType: DB.SaveAsync<T>(T, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.SaveAsync<T>(T, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SaveAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Save.cs
    startLine: 23
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves a complete entity replacing an existing entity or creating a new one if it does not exist. \nIf ID value is null, a new entity is created. If ID has a value, then existing entity is replaced.\n"
  example: []
  syntax:
    content: >-
      public static Task SaveAsync<T>(T entity, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
      description: The instance to persist
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: And optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task
    content.vb: Public Shared Function SaveAsync(Of T As IEntity)(entity As T, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.DB.SaveAsync*
  nameWithType.vb: DB.SaveAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.SaveAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  name.vb: SaveAsync(Of T)(T, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.SaveAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.SaveAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  id: SaveAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: SaveAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  nameWithType: DB.SaveAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.SaveAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SaveAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Save.cs
    startLine: 45
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves a batch of complete entities replacing existing ones or creating new ones if they do not exist. \nIf ID value is null, a new entity is created. If ID has a value, then existing entity is replaced.\n"
  example: []
  syntax:
    content: >-
      public static Task<BulkWriteResult<T>> SaveAsync<T>(IEnumerable<T> entities, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entities
      type: IEnumerable{{T}}
      description: The entities to persist
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: And optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{BulkWriteResult{{T}}}
    content.vb: Public Shared Function SaveAsync(Of T As IEntity)(entities As IEnumerable(Of T), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of BulkWriteResult(Of T))
  overload: MongoDB.Entities.DB.SaveAsync*
  nameWithType.vb: DB.SaveAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.SaveAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
  name.vb: SaveAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  id: SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: DB.SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.SaveOnlyAsync<T>(T, Expression<Func<T, System.Object>>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SaveOnlyAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Save.cs
    startLine: 79
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves an entity partially with only the specified subset of properties. \nIf ID value is null, a new entity is created. If ID has a value, then existing entity is updated.\n<p>TIP: The properties to be saved can be specified with a &apos;New&apos; expression. \nYou can only specify root level properties with the expression.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<UpdateResult> SaveOnlyAsync<T>(T entity, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to save
    - id: members
      type: Expression{Func{{T},System.Object}}
      description: x => new { x.PropOne, x.PropTwo }
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{UpdateResult}
    content.vb: Public Shared Function SaveOnlyAsync(Of T As IEntity)(entity As T, members As Expression(Of Func(Of T, Object)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of UpdateResult)
  overload: MongoDB.Entities.DB.SaveOnlyAsync*
  nameWithType.vb: DB.SaveOnlyAsync(Of T)(T, Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.SaveOnlyAsync(Of T)(T, Expression(Of Func(Of T, System.Object)), IClientSessionHandle, CancellationToken)
  name.vb: SaveOnlyAsync(Of T)(T, Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.SaveOnlyAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.SaveOnlyAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  id: SaveOnlyAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: DB.SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, System.Object>>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SaveOnlyAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Save.cs
    startLine: 95
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves a batch of entities partially with only the specified subset of properties. \nIf ID value is null, a new entity is created. If ID has a value, then existing entity is updated.\n<p>TIP: The properties to be saved can be specified with a &apos;New&apos; expression. \nYou can only specify root level properties with the expression.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<BulkWriteResult<T>> SaveOnlyAsync<T>(IEnumerable<T> entities, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entities
      type: IEnumerable{{T}}
      description: The batch of entities to save
    - id: members
      type: Expression{Func{{T},System.Object}}
      description: x => new { x.PropOne, x.PropTwo }
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{BulkWriteResult{{T}}}
    content.vb: Public Shared Function SaveOnlyAsync(Of T As IEntity)(entities As IEnumerable(Of T), members As Expression(Of Func(Of T, Object)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of BulkWriteResult(Of T))
  overload: MongoDB.Entities.DB.SaveOnlyAsync*
  nameWithType.vb: DB.SaveOnlyAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.SaveOnlyAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, System.Object)), IClientSessionHandle, CancellationToken)
  name.vb: SaveOnlyAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  id: SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: DB.SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.SaveExceptAsync<T>(T, Expression<Func<T, System.Object>>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SaveExceptAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Save.cs
    startLine: 111
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves an entity partially excluding the specified subset of properties. \nIf ID value is null, a new entity is created. If ID has a value, then existing entity is updated.\n<p>TIP: The properties to be excluded can be specified with a &apos;New&apos; expression. \nYou can only specify root level properties with the expression.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<UpdateResult> SaveExceptAsync<T>(T entity, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to save
    - id: members
      type: Expression{Func{{T},System.Object}}
      description: x => new { x.PropOne, x.PropTwo }
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{UpdateResult}
    content.vb: Public Shared Function SaveExceptAsync(Of T As IEntity)(entity As T, members As Expression(Of Func(Of T, Object)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of UpdateResult)
  overload: MongoDB.Entities.DB.SaveExceptAsync*
  nameWithType.vb: DB.SaveExceptAsync(Of T)(T, Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.SaveExceptAsync(Of T)(T, Expression(Of Func(Of T, System.Object)), IClientSessionHandle, CancellationToken)
  name.vb: SaveExceptAsync(Of T)(T, Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.SaveExceptAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.SaveExceptAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  id: SaveExceptAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: DB.SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, System.Object>>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SaveExceptAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Save.cs
    startLine: 127
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves a batch of entities partially excluding the specified subset of properties. \nIf ID value is null, a new entity is created. If ID has a value, then existing entity is updated.\n<p>TIP: The properties to be excluded can be specified with a &apos;New&apos; expression. \nYou can only specify root level properties with the expression.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<BulkWriteResult<T>> SaveExceptAsync<T>(IEnumerable<T> entities, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entities
      type: IEnumerable{{T}}
      description: The batch of entities to save
    - id: members
      type: Expression{Func{{T},System.Object}}
      description: x => new { x.PropOne, x.PropTwo }
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{BulkWriteResult{{T}}}
    content.vb: Public Shared Function SaveExceptAsync(Of T As IEntity)(entities As IEnumerable(Of T), members As Expression(Of Func(Of T, Object)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of BulkWriteResult(Of T))
  overload: MongoDB.Entities.DB.SaveExceptAsync*
  nameWithType.vb: DB.SaveExceptAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.SaveExceptAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, System.Object)), IClientSessionHandle, CancellationToken)
  name.vb: SaveExceptAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.DB.SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
  id: SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType: DB.SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.DB.SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SavePreservingAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Save.cs
    startLine: 140
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves an entity partially while excluding some properties. \nThe properties to be excluded can be specified using the [Preserve] or [DontPreserve] attributes.\n"
  example: []
  syntax:
    content: >-
      public static Task<UpdateResult> SavePreservingAsync<T>(T entity, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to save
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{UpdateResult}
    content.vb: Public Shared Function SavePreservingAsync(Of T As IEntity)(entity As T, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of UpdateResult)
  overload: MongoDB.Entities.DB.SavePreservingAsync*
  nameWithType.vb: DB.SavePreservingAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.SavePreservingAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  name.vb: SavePreservingAsync(Of T)(T, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.DB.NextSequentialNumberAsync``1(CancellationToken)
  commentId: M:MongoDB.Entities.DB.NextSequentialNumberAsync``1(CancellationToken)
  id: NextSequentialNumberAsync``1(CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: NextSequentialNumberAsync<T>(CancellationToken)
  nameWithType: DB.NextSequentialNumberAsync<T>(CancellationToken)
  fullName: MongoDB.Entities.DB.NextSequentialNumberAsync<T>(CancellationToken)
  type: Method
  source:
    id: NextSequentialNumberAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Sequence.cs
    startLine: 14
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns an atomically generated sequential number for the given Entity type everytime the method is called\n"
  example: []
  syntax:
    content: >-
      public static Task<ulong> NextSequentialNumberAsync<T>(CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: The type of entity to get the next sequential number for
    return:
      type: Task{System.UInt64}
    content.vb: Public Shared Function NextSequentialNumberAsync(Of T As IEntity)(cancellation As CancellationToken = Nothing) As Task(Of ULong)
  overload: MongoDB.Entities.DB.NextSequentialNumberAsync*
  nameWithType.vb: DB.NextSequentialNumberAsync(Of T)(CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.NextSequentialNumberAsync(Of T)(CancellationToken)
  name.vb: NextSequentialNumberAsync(Of T)(CancellationToken)
- uid: MongoDB.Entities.DB.NextSequentialNumberAsync(System.String,CancellationToken)
  commentId: M:MongoDB.Entities.DB.NextSequentialNumberAsync(System.String,CancellationToken)
  id: NextSequentialNumberAsync(System.String,CancellationToken)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: NextSequentialNumberAsync(String, CancellationToken)
  nameWithType: DB.NextSequentialNumberAsync(String, CancellationToken)
  fullName: MongoDB.Entities.DB.NextSequentialNumberAsync(System.String, CancellationToken)
  type: Method
  source:
    id: NextSequentialNumberAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Sequence.cs
    startLine: 24
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns an atomically generated sequential number for the given sequence name everytime the method is called\n"
  example: []
  syntax:
    content: public static Task<ulong> NextSequentialNumberAsync(string sequenceName, CancellationToken cancellation = null)
    parameters:
    - id: sequenceName
      type: System.String
      description: The name of the sequence to get the next number for
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    return:
      type: Task{System.UInt64}
    content.vb: Public Shared Function NextSequentialNumberAsync(sequenceName As String, cancellation As CancellationToken = Nothing) As Task(Of ULong)
  overload: MongoDB.Entities.DB.NextSequentialNumberAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MongoDB.Entities.DB.Transaction(System.String,ClientSessionOptions,MongoDB.Entities.ModifiedBy)
  commentId: M:MongoDB.Entities.DB.Transaction(System.String,ClientSessionOptions,MongoDB.Entities.ModifiedBy)
  id: Transaction(System.String,ClientSessionOptions,MongoDB.Entities.ModifiedBy)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Transaction(String, ClientSessionOptions, ModifiedBy)
  nameWithType: DB.Transaction(String, ClientSessionOptions, ModifiedBy)
  fullName: MongoDB.Entities.DB.Transaction(System.String, ClientSessionOptions, MongoDB.Entities.ModifiedBy)
  type: Method
  source:
    id: Transaction
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Transaction.cs
    startLine: 11
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets a transaction context/scope for a given database or the default database if not specified.\n"
  example: []
  syntax:
    content: public static Transaction Transaction(string database = null, ClientSessionOptions options = null, ModifiedBy modifiedBy = null)
    parameters:
    - id: database
      type: System.String
      description: The name of the database which this transaction is for (not required)
    - id: options
      type: ClientSessionOptions
      description: Client session options (not required)
    - id: modifiedBy
      type: MongoDB.Entities.ModifiedBy
    return:
      type: MongoDB.Entities.Transaction
    content.vb: Public Shared Function Transaction(database As String = Nothing, options As ClientSessionOptions = Nothing, modifiedBy As ModifiedBy = Nothing) As Transaction
  overload: MongoDB.Entities.DB.Transaction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MongoDB.Entities.DB.Transaction``1(ClientSessionOptions,MongoDB.Entities.ModifiedBy)
  commentId: M:MongoDB.Entities.DB.Transaction``1(ClientSessionOptions,MongoDB.Entities.ModifiedBy)
  id: Transaction``1(ClientSessionOptions,MongoDB.Entities.ModifiedBy)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Transaction<T>(ClientSessionOptions, ModifiedBy)
  nameWithType: DB.Transaction<T>(ClientSessionOptions, ModifiedBy)
  fullName: MongoDB.Entities.DB.Transaction<T>(ClientSessionOptions, MongoDB.Entities.ModifiedBy)
  type: Method
  source:
    id: Transaction
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Transaction.cs
    startLine: 21
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets a transaction context/scope for a given entity type&apos;s database\n"
  example: []
  syntax:
    content: >-
      public static Transaction Transaction<T>(ClientSessionOptions options = null, ModifiedBy modifiedBy = null)

          where T : IEntity
    parameters:
    - id: options
      type: ClientSessionOptions
      description: Client session options (not required)
    - id: modifiedBy
      type: MongoDB.Entities.ModifiedBy
    typeParameters:
    - id: T
      description: The entity type to determine the database from for the transaction
    return:
      type: MongoDB.Entities.Transaction
    content.vb: Public Shared Function Transaction(Of T As IEntity)(options As ClientSessionOptions = Nothing, modifiedBy As ModifiedBy = Nothing) As Transaction
  overload: MongoDB.Entities.DB.Transaction*
  nameWithType.vb: DB.Transaction(Of T)(ClientSessionOptions, ModifiedBy)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Transaction(Of T)(ClientSessionOptions, MongoDB.Entities.ModifiedBy)
  name.vb: Transaction(Of T)(ClientSessionOptions, ModifiedBy)
- uid: MongoDB.Entities.DB.Update``1(IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.Update``1(IClientSessionHandle)
  id: Update``1(IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Update<T>(IClientSessionHandle)
  nameWithType: DB.Update<T>(IClientSessionHandle)
  fullName: MongoDB.Entities.DB.Update<T>(IClientSessionHandle)
  type: Method
  source:
    id: Update
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Update.cs
    startLine: 12
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents an update command\n<p>TIP: Specify a filter first with the .Match() method. Then set property values with .Modify() and finally call .Execute() to run the command.</p>\n"
  example: []
  syntax:
    content: >-
      public static Update<T> Update<T>(IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: MongoDB.Entities.Update{{T}}
    content.vb: Public Shared Function Update(Of T As IEntity)(session As IClientSessionHandle = Nothing) As Update(Of T)
  overload: MongoDB.Entities.DB.Update*
  nameWithType.vb: DB.Update(Of T)(IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Update(Of T)(IClientSessionHandle)
  name.vb: Update(Of T)(IClientSessionHandle)
- uid: MongoDB.Entities.DB.UpdateAndGet``2(IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.UpdateAndGet``2(IClientSessionHandle)
  id: UpdateAndGet``2(IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: UpdateAndGet<T, TProjection>(IClientSessionHandle)
  nameWithType: DB.UpdateAndGet<T, TProjection>(IClientSessionHandle)
  fullName: MongoDB.Entities.DB.UpdateAndGet<T, TProjection>(IClientSessionHandle)
  type: Method
  source:
    id: UpdateAndGet
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Update.cs
    startLine: 22
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nUpdate and retrieve the first document that was updated.\n<p>TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command.</p>\n"
  example: []
  syntax:
    content: >-
      public static UpdateAndGet<T, TProjection> UpdateAndGet<T, TProjection>(IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    - id: TProjection
      description: The type to project to
    return:
      type: MongoDB.Entities.UpdateAndGet{{T},{TProjection}}
    content.vb: Public Shared Function UpdateAndGet(Of T As IEntity, TProjection)(session As IClientSessionHandle = Nothing) As UpdateAndGet(Of T, TProjection)
  overload: MongoDB.Entities.DB.UpdateAndGet*
  nameWithType.vb: DB.UpdateAndGet(Of T, TProjection)(IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.UpdateAndGet(Of T, TProjection)(IClientSessionHandle)
  name.vb: UpdateAndGet(Of T, TProjection)(IClientSessionHandle)
- uid: MongoDB.Entities.DB.UpdateAndGet``1(IClientSessionHandle)
  commentId: M:MongoDB.Entities.DB.UpdateAndGet``1(IClientSessionHandle)
  id: UpdateAndGet``1(IClientSessionHandle)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: UpdateAndGet<T>(IClientSessionHandle)
  nameWithType: DB.UpdateAndGet<T>(IClientSessionHandle)
  fullName: MongoDB.Entities.DB.UpdateAndGet<T>(IClientSessionHandle)
  type: Method
  source:
    id: UpdateAndGet
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Update.cs
    startLine: 31
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nUpdate and retrieve the first document that was updated.\n<p>TIP: Specify a filter first with the .Match(). Then set property values with .Modify() and finally call .Execute() to run the command.</p>\n"
  example: []
  syntax:
    content: >-
      public static UpdateAndGet<T> UpdateAndGet<T>(IClientSessionHandle session = null)

          where T : IEntity
    parameters:
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: MongoDB.Entities.UpdateAndGet{{T}}
    content.vb: Public Shared Function UpdateAndGet(Of T As IEntity)(session As IClientSessionHandle = Nothing) As UpdateAndGet(Of T)
  overload: MongoDB.Entities.DB.UpdateAndGet*
  nameWithType.vb: DB.UpdateAndGet(Of T)(IClientSessionHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.UpdateAndGet(Of T)(IClientSessionHandle)
  name.vb: UpdateAndGet(Of T)(IClientSessionHandle)
- uid: MongoDB.Entities.DB.Watcher``1(System.String)
  commentId: M:MongoDB.Entities.DB.Watcher``1(System.String)
  id: Watcher``1(System.String)
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Watcher<T>(String)
  nameWithType: DB.Watcher<T>(String)
  fullName: MongoDB.Entities.DB.Watcher<T>(System.String)
  type: Method
  source:
    id: Watcher
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Watcher.cs
    startLine: 13
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRetrieves the &apos;change-stream&apos; watcher instance for a given unique name. \nIf an instance for the name does not exist, it will return a new instance. \nIf an instance already exists, that instance will be returned.\n"
  example: []
  syntax:
    content: >-
      public static Watcher<T> Watcher<T>(string name)

          where T : IEntity
    parameters:
    - id: name
      type: System.String
      description: A unique name for the watcher of this entity type. Names can be duplicate among different entity types.
    typeParameters:
    - id: T
      description: The entity type to get a watcher for
    return:
      type: MongoDB.Entities.Watcher{{T}}
    content.vb: Public Shared Function Watcher(Of T As IEntity)(name As String) As Watcher(Of T)
  overload: MongoDB.Entities.DB.Watcher*
  nameWithType.vb: DB.Watcher(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Watcher(Of T)(System.String)
  name.vb: Watcher(Of T)(String)
- uid: MongoDB.Entities.DB.Watchers``1
  commentId: M:MongoDB.Entities.DB.Watchers``1
  id: Watchers``1
  parent: MongoDB.Entities.DB
  langs:
  - csharp
  - vb
  name: Watchers<T>()
  nameWithType: DB.Watchers<T>()
  fullName: MongoDB.Entities.DB.Watchers<T>()
  type: Method
  source:
    id: Watchers
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\DB\DB.Watcher.cs
    startLine: 27
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns all the watchers for a given entity type\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<Watcher<T>> Watchers<T>()

          where T : IEntity
    typeParameters:
    - id: T
      description: The entity type to get the watcher of
    return:
      type: IEnumerable{MongoDB.Entities.Watcher{{T}}}
    content.vb: Public Shared Function Watchers(Of T As IEntity) As IEnumerable(Of Watcher(Of T))
  overload: MongoDB.Entities.DB.Watchers*
  nameWithType.vb: DB.Watchers(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.DB.Watchers(Of T)()
  name.vb: Watchers(Of T)()
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: MongoDB.Entities.DB.Collection*
  commentId: Overload:MongoDB.Entities.DB.Collection
  name: Collection
  nameWithType: DB.Collection
  fullName: MongoDB.Entities.DB.Collection
- uid: IMongoCollection{{T}}
  commentId: '!:IMongoCollection{``0}'
  definition: IMongoCollection`1
  name: IMongoCollection<T>
  nameWithType: IMongoCollection<T>
  fullName: IMongoCollection<T>
  nameWithType.vb: IMongoCollection(Of T)
  fullName.vb: IMongoCollection(Of T)
  name.vb: IMongoCollection(Of T)
  spec.csharp:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IMongoCollection`1
  isExternal: true
  name: IMongoCollection<>
  nameWithType: IMongoCollection<>
  fullName: IMongoCollection<>
  nameWithType.vb: IMongoCollection(Of )
  fullName.vb: IMongoCollection(Of )
  name.vb: IMongoCollection(Of )
  spec.csharp:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.CollectionName*
  commentId: Overload:MongoDB.Entities.DB.CollectionName
  name: CollectionName
  nameWithType: DB.CollectionName
  fullName: MongoDB.Entities.DB.CollectionName
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MongoDB.Entities.DB.CreateCollection*
  commentId: Overload:MongoDB.Entities.DB.CreateCollection
  name: CreateCollection
  nameWithType: DB.CreateCollection
  fullName: MongoDB.Entities.DB.CreateCollection
- uid: CreateCollectionOptions{{T}}
  commentId: '!:CreateCollectionOptions{``0}'
  definition: CreateCollectionOptions`1
  name: CreateCollectionOptions<T>
  nameWithType: CreateCollectionOptions<T>
  fullName: CreateCollectionOptions<T>
  nameWithType.vb: CreateCollectionOptions(Of T)
  fullName.vb: CreateCollectionOptions(Of T)
  name.vb: CreateCollectionOptions(Of T)
  spec.csharp:
  - uid: CreateCollectionOptions`1
    name: CreateCollectionOptions
    nameWithType: CreateCollectionOptions
    fullName: CreateCollectionOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CreateCollectionOptions`1
    name: CreateCollectionOptions
    nameWithType: CreateCollectionOptions
    fullName: CreateCollectionOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: IClientSessionHandle
  isExternal: true
  name: IClientSessionHandle
  nameWithType: IClientSessionHandle
  fullName: IClientSessionHandle
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: CreateCollectionOptions`1
  isExternal: true
  name: CreateCollectionOptions<>
  nameWithType: CreateCollectionOptions<>
  fullName: CreateCollectionOptions<>
  nameWithType.vb: CreateCollectionOptions(Of )
  fullName.vb: CreateCollectionOptions(Of )
  name.vb: CreateCollectionOptions(Of )
  spec.csharp:
  - uid: CreateCollectionOptions`1
    name: CreateCollectionOptions
    nameWithType: CreateCollectionOptions
    fullName: CreateCollectionOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CreateCollectionOptions`1
    name: CreateCollectionOptions
    nameWithType: CreateCollectionOptions
    fullName: CreateCollectionOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.DropCollectionAsync*
  commentId: Overload:MongoDB.Entities.DB.DropCollectionAsync
  name: DropCollectionAsync
  nameWithType: DB.DropCollectionAsync
  fullName: MongoDB.Entities.DB.DropCollectionAsync
- uid: MongoDB.Entities.DB.CountEstimatedAsync*
  commentId: Overload:MongoDB.Entities.DB.CountEstimatedAsync
  name: CountEstimatedAsync
  nameWithType: DB.CountEstimatedAsync
  fullName: MongoDB.Entities.DB.CountEstimatedAsync
- uid: Task{System.Int64}
  commentId: '!:Task{System.Int64}'
  definition: Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullName.vb: Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.CountAsync*
  commentId: Overload:MongoDB.Entities.DB.CountAsync
  name: CountAsync
  nameWithType: DB.CountAsync
  fullName: MongoDB.Entities.DB.CountAsync
- uid: Expression{Func{{T},System.Boolean}}
  commentId: '!:Expression{Func{`0,System.Boolean}}'
  definition: Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: Expression<Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: Expression(Of Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CountOptions
  isExternal: true
  name: CountOptions
  nameWithType: CountOptions
  fullName: CountOptions
- uid: Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: FilterDefinition{{T}}
  commentId: '!:FilterDefinition{``0}'
  definition: FilterDefinition`1
  name: FilterDefinition<T>
  nameWithType: FilterDefinition<T>
  fullName: FilterDefinition<T>
  nameWithType.vb: FilterDefinition(Of T)
  fullName.vb: FilterDefinition(Of T)
  name.vb: FilterDefinition(Of T)
  spec.csharp:
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FilterDefinition`1
  isExternal: true
  name: FilterDefinition<>
  nameWithType: FilterDefinition<>
  fullName: FilterDefinition<>
  nameWithType.vb: FilterDefinition(Of )
  fullName.vb: FilterDefinition(Of )
  name.vb: FilterDefinition(Of )
  spec.csharp:
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{FilterDefinitionBuilder{{T}},FilterDefinition{{T}}}
  commentId: '!:Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}}'
  definition: Func`2
  name: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  nameWithType: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  fullName: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  nameWithType.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  fullName.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  name.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.InitAsync*
  commentId: Overload:MongoDB.Entities.DB.InitAsync
  name: InitAsync
  nameWithType: DB.InitAsync
  fullName: MongoDB.Entities.DB.InitAsync
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MongoClientSettings
  isExternal: true
  name: MongoClientSettings
  nameWithType: MongoClientSettings
  fullName: MongoClientSettings
- uid: MongoDB.Entities.DB.AllDatabaseNamesAsync*
  commentId: Overload:MongoDB.Entities.DB.AllDatabaseNamesAsync
  name: AllDatabaseNamesAsync
  nameWithType: DB.AllDatabaseNamesAsync
  fullName: MongoDB.Entities.DB.AllDatabaseNamesAsync
- uid: Task{IEnumerable{System.String}}
  commentId: '!:Task{IEnumerable{System.String}}'
  definition: Task`1
  name: Task<IEnumerable<String>>
  nameWithType: Task<IEnumerable<String>>
  fullName: Task<IEnumerable<System.String>>
  nameWithType.vb: Task(Of IEnumerable(Of String))
  fullName.vb: Task(Of IEnumerable(Of System.String))
  name.vb: Task(Of IEnumerable(Of String))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.DatabaseFor*
  commentId: Overload:MongoDB.Entities.DB.DatabaseFor
  name: DatabaseFor
  nameWithType: DB.DatabaseFor
  fullName: MongoDB.Entities.DB.DatabaseFor
- uid: MongoDB.Entities.DB.Database*
  commentId: Overload:MongoDB.Entities.DB.Database
  name: Database
  nameWithType: DB.Database
  fullName: MongoDB.Entities.DB.Database
- uid: IMongoDatabase
  isExternal: true
  name: IMongoDatabase
  nameWithType: IMongoDatabase
  fullName: IMongoDatabase
- uid: MongoDB.Entities.DB.DatabaseName*
  commentId: Overload:MongoDB.Entities.DB.DatabaseName
  name: DatabaseName
  nameWithType: DB.DatabaseName
  fullName: MongoDB.Entities.DB.DatabaseName
- uid: MongoDB.Entities.DB.ChangeDefaultDatabase*
  commentId: Overload:MongoDB.Entities.DB.ChangeDefaultDatabase
  name: ChangeDefaultDatabase
  nameWithType: DB.ChangeDefaultDatabase
  fullName: MongoDB.Entities.DB.ChangeDefaultDatabase
- uid: MongoDB.Entities.DB.Filter*
  commentId: Overload:MongoDB.Entities.DB.Filter
  name: Filter
  nameWithType: DB.Filter
  fullName: MongoDB.Entities.DB.Filter
- uid: FilterDefinitionBuilder{{T}}
  commentId: '!:FilterDefinitionBuilder{``0}'
  definition: FilterDefinitionBuilder`1
  name: FilterDefinitionBuilder<T>
  nameWithType: FilterDefinitionBuilder<T>
  fullName: FilterDefinitionBuilder<T>
  nameWithType.vb: FilterDefinitionBuilder(Of T)
  fullName.vb: FilterDefinitionBuilder(Of T)
  name.vb: FilterDefinitionBuilder(Of T)
  spec.csharp:
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FilterDefinitionBuilder`1
  commentId: '!:FilterDefinitionBuilder`1'
  isExternal: true
  name: FilterDefinitionBuilder<>
  nameWithType: FilterDefinitionBuilder<>
  fullName: FilterDefinitionBuilder<>
  nameWithType.vb: FilterDefinitionBuilder(Of )
  fullName.vb: FilterDefinitionBuilder(Of )
  name.vb: FilterDefinitionBuilder(Of )
  spec.csharp:
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.Sort*
  commentId: Overload:MongoDB.Entities.DB.Sort
  name: Sort
  nameWithType: DB.Sort
  fullName: MongoDB.Entities.DB.Sort
- uid: SortDefinitionBuilder{{T}}
  commentId: '!:SortDefinitionBuilder{``0}'
  definition: SortDefinitionBuilder`1
  name: SortDefinitionBuilder<T>
  nameWithType: SortDefinitionBuilder<T>
  fullName: SortDefinitionBuilder<T>
  nameWithType.vb: SortDefinitionBuilder(Of T)
  fullName.vb: SortDefinitionBuilder(Of T)
  name.vb: SortDefinitionBuilder(Of T)
  spec.csharp:
  - uid: SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: SortDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: SortDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SortDefinitionBuilder`1
  commentId: '!:SortDefinitionBuilder`1'
  isExternal: true
  name: SortDefinitionBuilder<>
  nameWithType: SortDefinitionBuilder<>
  fullName: SortDefinitionBuilder<>
  nameWithType.vb: SortDefinitionBuilder(Of )
  fullName.vb: SortDefinitionBuilder(Of )
  name.vb: SortDefinitionBuilder(Of )
  spec.csharp:
  - uid: SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: SortDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: SortDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.Projection*
  commentId: Overload:MongoDB.Entities.DB.Projection
  name: Projection
  nameWithType: DB.Projection
  fullName: MongoDB.Entities.DB.Projection
- uid: ProjectionDefinitionBuilder{{T}}
  commentId: '!:ProjectionDefinitionBuilder{``0}'
  definition: ProjectionDefinitionBuilder`1
  name: ProjectionDefinitionBuilder<T>
  nameWithType: ProjectionDefinitionBuilder<T>
  fullName: ProjectionDefinitionBuilder<T>
  nameWithType.vb: ProjectionDefinitionBuilder(Of T)
  fullName.vb: ProjectionDefinitionBuilder(Of T)
  name.vb: ProjectionDefinitionBuilder(Of T)
  spec.csharp:
  - uid: ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: ProjectionDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: ProjectionDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ProjectionDefinitionBuilder`1
  commentId: '!:ProjectionDefinitionBuilder`1'
  isExternal: true
  name: ProjectionDefinitionBuilder<>
  nameWithType: ProjectionDefinitionBuilder<>
  fullName: ProjectionDefinitionBuilder<>
  nameWithType.vb: ProjectionDefinitionBuilder(Of )
  fullName.vb: ProjectionDefinitionBuilder(Of )
  name.vb: ProjectionDefinitionBuilder(Of )
  spec.csharp:
  - uid: ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: ProjectionDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: ProjectionDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.Entity*
  commentId: Overload:MongoDB.Entities.DB.Entity
  name: Entity
  nameWithType: DB.Entity
  fullName: MongoDB.Entities.DB.Entity
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MongoDB.Entities.DB.DeleteAsync*
  commentId: Overload:MongoDB.Entities.DB.DeleteAsync
  name: DeleteAsync
  nameWithType: DB.DeleteAsync
  fullName: MongoDB.Entities.DB.DeleteAsync
- uid: Task{DeleteResult}
  commentId: '!:Task{DeleteResult}'
  definition: Task`1
  name: Task<DeleteResult>
  nameWithType: Task<DeleteResult>
  fullName: Task<DeleteResult>
  nameWithType.vb: Task(Of DeleteResult)
  fullName.vb: Task(Of DeleteResult)
  name.vb: Task(Of DeleteResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DeleteResult
    name: DeleteResult
    nameWithType: DeleteResult
    fullName: DeleteResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DeleteResult
    name: DeleteResult
    nameWithType: DeleteResult
    fullName: DeleteResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{System.String}
  commentId: '!:IEnumerable{System.String}'
  definition: IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Collation
  isExternal: true
  name: Collation
  nameWithType: Collation
  fullName: Collation
- uid: MongoDB.Entities.DB.Distinct*
  commentId: Overload:MongoDB.Entities.DB.Distinct
  name: Distinct
  nameWithType: DB.Distinct
  fullName: MongoDB.Entities.DB.Distinct
- uid: MongoDB.Entities.Distinct{{T},{TProperty}}
  commentId: T:MongoDB.Entities.Distinct{``0,``1}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.Distinct`2
  name: Distinct<T, TProperty>
  nameWithType: Distinct<T, TProperty>
  fullName: MongoDB.Entities.Distinct<T, TProperty>
  nameWithType.vb: Distinct(Of T, TProperty)
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty)
  name.vb: Distinct(Of T, TProperty)
  spec.csharp:
  - uid: MongoDB.Entities.Distinct`2
    name: Distinct
    nameWithType: Distinct
    fullName: MongoDB.Entities.Distinct
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Distinct`2
    name: Distinct
    nameWithType: Distinct
    fullName: MongoDB.Entities.Distinct
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Distinct`2
  commentId: T:MongoDB.Entities.Distinct`2
  parent: MongoDB.Entities
  name: Distinct<T, TProperty>
  nameWithType: Distinct<T, TProperty>
  fullName: MongoDB.Entities.Distinct<T, TProperty>
  nameWithType.vb: Distinct(Of T, TProperty)
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty)
  name.vb: Distinct(Of T, TProperty)
  spec.csharp:
  - uid: MongoDB.Entities.Distinct`2
    name: Distinct
    nameWithType: Distinct
    fullName: MongoDB.Entities.Distinct
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Distinct`2
    name: Distinct
    nameWithType: Distinct
    fullName: MongoDB.Entities.Distinct
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.File*
  commentId: Overload:MongoDB.Entities.DB.File
  name: File
  nameWithType: DB.File
  fullName: MongoDB.Entities.DB.File
- uid: MongoDB.Entities.DataStreamer
  commentId: T:MongoDB.Entities.DataStreamer
  parent: MongoDB.Entities
  name: DataStreamer
  nameWithType: DataStreamer
  fullName: MongoDB.Entities.DataStreamer
- uid: MongoDB.Entities.DB.Find*
  commentId: Overload:MongoDB.Entities.DB.Find
  name: Find
  nameWithType: DB.Find
  fullName: MongoDB.Entities.DB.Find
- uid: MongoDB.Entities.Find{{T}}
  commentId: T:MongoDB.Entities.Find{``0}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.Find`1
  name: Find<T>
  nameWithType: Find<T>
  fullName: MongoDB.Entities.Find<T>
  nameWithType.vb: Find(Of T)
  fullName.vb: MongoDB.Entities.Find(Of T)
  name.vb: Find(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.Find`1
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Find`1
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`1
  commentId: T:MongoDB.Entities.Find`1
  name: Find<T>
  nameWithType: Find<T>
  fullName: MongoDB.Entities.Find<T>
  nameWithType.vb: Find(Of T)
  fullName.vb: MongoDB.Entities.Find(Of T)
  name.vb: Find(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.Find`1
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Find`1
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{TProjection}}
  commentId: T:MongoDB.Entities.Find{``0,``1}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.Find`2
  name: Find<T, TProjection>
  nameWithType: Find<T, TProjection>
  fullName: MongoDB.Entities.Find<T, TProjection>
  nameWithType.vb: Find(Of T, TProjection)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection)
  name.vb: Find(Of T, TProjection)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Find`2
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2
  commentId: T:MongoDB.Entities.Find`2
  parent: MongoDB.Entities
  name: Find<T, TProjection>
  nameWithType: Find<T, TProjection>
  fullName: MongoDB.Entities.Find<T, TProjection>
  nameWithType.vb: Find(Of T, TProjection)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection)
  name.vb: Find(Of T, TProjection)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Find`2
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.Fluent*
  commentId: Overload:MongoDB.Entities.DB.Fluent
  name: Fluent
  nameWithType: DB.Fluent
  fullName: MongoDB.Entities.DB.Fluent
- uid: AggregateOptions
  isExternal: true
  name: AggregateOptions
  nameWithType: AggregateOptions
  fullName: AggregateOptions
- uid: IAggregateFluent{{T}}
  commentId: '!:IAggregateFluent{``0}'
  definition: IAggregateFluent`1
  name: IAggregateFluent<T>
  nameWithType: IAggregateFluent<T>
  fullName: IAggregateFluent<T>
  nameWithType.vb: IAggregateFluent(Of T)
  fullName.vb: IAggregateFluent(Of T)
  name.vb: IAggregateFluent(Of T)
  spec.csharp:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IAggregateFluent`1
  isExternal: true
  name: IAggregateFluent<>
  nameWithType: IAggregateFluent<>
  fullName: IAggregateFluent<>
  nameWithType.vb: IAggregateFluent(Of )
  fullName.vb: IAggregateFluent(Of )
  name.vb: IAggregateFluent(Of )
  spec.csharp:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.FluentTextSearch*
  commentId: Overload:MongoDB.Entities.DB.FluentTextSearch
  name: FluentTextSearch
  nameWithType: DB.FluentTextSearch
  fullName: MongoDB.Entities.DB.FluentTextSearch
- uid: MongoDB.Entities.Search
  commentId: T:MongoDB.Entities.Search
  parent: MongoDB.Entities
  name: Search
  nameWithType: Search
  fullName: MongoDB.Entities.Search
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MongoDB.Entities.DB.FluentGeoNear*
  commentId: Overload:MongoDB.Entities.DB.FluentGeoNear
  name: FluentGeoNear
  nameWithType: DB.FluentGeoNear
  fullName: MongoDB.Entities.DB.FluentGeoNear
- uid: MongoDB.Entities.Coordinates2D
  commentId: T:MongoDB.Entities.Coordinates2D
  parent: MongoDB.Entities
  name: Coordinates2D
  nameWithType: Coordinates2D
  fullName: MongoDB.Entities.Coordinates2D
- uid: Expression{Func{{T},System.Object}}
  commentId: '!:Expression{Func{`0,System.Object}}'
  definition: Expression`1
  name: Expression<Func<T, Object>>
  nameWithType: Expression<Func<T, Object>>
  fullName: Expression<Func<T, System.Object>>
  nameWithType.vb: Expression(Of Func(Of T, Object))
  fullName.vb: Expression(Of Func(Of T, System.Object))
  name.vb: Expression(Of Func(Of T, Object))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Double}
  commentId: '!:System.Nullable{System.Double}'
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: BsonDocument
  isExternal: true
  name: BsonDocument
  nameWithType: BsonDocument
  fullName: BsonDocument
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.Index*
  commentId: Overload:MongoDB.Entities.DB.Index
  name: Index
  nameWithType: DB.Index
  fullName: MongoDB.Entities.DB.Index
- uid: MongoDB.Entities.Index{{T}}
  commentId: T:MongoDB.Entities.Index{``0}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.Index`1
  name: Index<T>
  nameWithType: Index<T>
  fullName: MongoDB.Entities.Index<T>
  nameWithType.vb: Index(Of T)
  fullName.vb: MongoDB.Entities.Index(Of T)
  name.vb: Index(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.Index`1
    name: Index
    nameWithType: Index
    fullName: MongoDB.Entities.Index
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Index`1
    name: Index
    nameWithType: Index
    fullName: MongoDB.Entities.Index
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Index`1
  commentId: T:MongoDB.Entities.Index`1
  parent: MongoDB.Entities
  name: Index<T>
  nameWithType: Index<T>
  fullName: MongoDB.Entities.Index<T>
  nameWithType.vb: Index(Of T)
  fullName.vb: MongoDB.Entities.Index(Of T)
  name.vb: Index(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.Index`1
    name: Index
    nameWithType: Index
    fullName: MongoDB.Entities.Index
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Index`1
    name: Index
    nameWithType: Index
    fullName: MongoDB.Entities.Index
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.InsertAsync*
  commentId: Overload:MongoDB.Entities.DB.InsertAsync
  name: InsertAsync
  nameWithType: DB.InsertAsync
  fullName: MongoDB.Entities.DB.InsertAsync
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{BulkWriteResult{{T}}}
  commentId: '!:Task{BulkWriteResult{``0}}'
  definition: Task`1
  name: Task<BulkWriteResult<T>>
  nameWithType: Task<BulkWriteResult<T>>
  fullName: Task<BulkWriteResult<T>>
  nameWithType.vb: Task(Of BulkWriteResult(Of T))
  fullName.vb: Task(Of BulkWriteResult(Of T))
  name.vb: Task(Of BulkWriteResult(Of T))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BulkWriteResult`1
    name: BulkWriteResult
    nameWithType: BulkWriteResult
    fullName: BulkWriteResult
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BulkWriteResult`1
    name: BulkWriteResult
    nameWithType: BulkWriteResult
    fullName: BulkWriteResult
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.MigrateAsync*
  commentId: Overload:MongoDB.Entities.DB.MigrateAsync
  name: MigrateAsync
  nameWithType: DB.MigrateAsync
  fullName: MongoDB.Entities.DB.MigrateAsync
- uid: MongoDB.Entities.DB.PipelineCursorAsync*
  commentId: Overload:MongoDB.Entities.DB.PipelineCursorAsync
  name: PipelineCursorAsync
  nameWithType: DB.PipelineCursorAsync
  fullName: MongoDB.Entities.DB.PipelineCursorAsync
- uid: MongoDB.Entities.Template{{T},{TResult}}
  commentId: T:MongoDB.Entities.Template{``0,``1}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.Template`2
  name: Template<T, TResult>
  nameWithType: Template<T, TResult>
  fullName: MongoDB.Entities.Template<T, TResult>
  nameWithType.vb: Template(Of T, TResult)
  fullName.vb: MongoDB.Entities.Template(Of T, TResult)
  name.vb: Template(Of T, TResult)
  spec.csharp:
  - uid: MongoDB.Entities.Template`2
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Template`2
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{IAsyncCursor{{TResult}}}
  commentId: '!:Task{IAsyncCursor{``1}}'
  definition: Task`1
  name: Task<IAsyncCursor<TResult>>
  nameWithType: Task<IAsyncCursor<TResult>>
  fullName: Task<IAsyncCursor<TResult>>
  nameWithType.vb: Task(Of IAsyncCursor(Of TResult))
  fullName.vb: Task(Of IAsyncCursor(Of TResult))
  name.vb: Task(Of IAsyncCursor(Of TResult))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IAsyncCursor`1
    name: IAsyncCursor
    nameWithType: IAsyncCursor
    fullName: IAsyncCursor
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IAsyncCursor`1
    name: IAsyncCursor
    nameWithType: IAsyncCursor
    fullName: IAsyncCursor
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template`2
  commentId: T:MongoDB.Entities.Template`2
  parent: MongoDB.Entities
  name: Template<TInput, TResult>
  nameWithType: Template<TInput, TResult>
  fullName: MongoDB.Entities.Template<TInput, TResult>
  nameWithType.vb: Template(Of TInput, TResult)
  fullName.vb: MongoDB.Entities.Template(Of TInput, TResult)
  name.vb: Template(Of TInput, TResult)
  spec.csharp:
  - uid: MongoDB.Entities.Template`2
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: <
    nameWithType: <
    fullName: <
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Template`2
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.PipelineAsync*
  commentId: Overload:MongoDB.Entities.DB.PipelineAsync
  name: PipelineAsync
  nameWithType: DB.PipelineAsync
  fullName: MongoDB.Entities.DB.PipelineAsync
- uid: Task{List{{TResult}}}
  commentId: '!:Task{List{``1}}'
  definition: Task`1
  name: Task<List<TResult>>
  nameWithType: Task<List<TResult>>
  fullName: Task<List<TResult>>
  nameWithType.vb: Task(Of List(Of TResult))
  fullName.vb: Task(Of List(Of TResult))
  name.vb: Task(Of List(Of TResult))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.PipelineSingleAsync*
  commentId: Overload:MongoDB.Entities.DB.PipelineSingleAsync
  name: PipelineSingleAsync
  nameWithType: DB.PipelineSingleAsync
  fullName: MongoDB.Entities.DB.PipelineSingleAsync
- uid: Task{{TResult}}
  commentId: '!:Task{``1}'
  definition: Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.PipelineFirstAsync*
  commentId: Overload:MongoDB.Entities.DB.PipelineFirstAsync
  name: PipelineFirstAsync
  nameWithType: DB.PipelineFirstAsync
  fullName: MongoDB.Entities.DB.PipelineFirstAsync
- uid: MongoDB.Entities.DB.Queryable*
  commentId: Overload:MongoDB.Entities.DB.Queryable
  name: Queryable
  nameWithType: DB.Queryable
  fullName: MongoDB.Entities.DB.Queryable
- uid: IMongoQueryable{{T}}
  commentId: '!:IMongoQueryable{``0}'
  definition: IMongoQueryable`1
  name: IMongoQueryable<T>
  nameWithType: IMongoQueryable<T>
  fullName: IMongoQueryable<T>
  nameWithType.vb: IMongoQueryable(Of T)
  fullName.vb: IMongoQueryable(Of T)
  name.vb: IMongoQueryable(Of T)
  spec.csharp:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IMongoQueryable`1
  isExternal: true
  name: IMongoQueryable<>
  nameWithType: IMongoQueryable<>
  fullName: IMongoQueryable<>
  nameWithType.vb: IMongoQueryable(Of )
  fullName.vb: IMongoQueryable(Of )
  name.vb: IMongoQueryable(Of )
  spec.csharp:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.Replace*
  commentId: Overload:MongoDB.Entities.DB.Replace
  name: Replace
  nameWithType: DB.Replace
  fullName: MongoDB.Entities.DB.Replace
- uid: MongoDB.Entities.Replace{{T}}
  commentId: T:MongoDB.Entities.Replace{``0}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.Replace`1
  name: Replace<T>
  nameWithType: Replace<T>
  fullName: MongoDB.Entities.Replace<T>
  nameWithType.vb: Replace(Of T)
  fullName.vb: MongoDB.Entities.Replace(Of T)
  name.vb: Replace(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.Replace`1
    name: Replace
    nameWithType: Replace
    fullName: MongoDB.Entities.Replace
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Replace`1
    name: Replace
    nameWithType: Replace
    fullName: MongoDB.Entities.Replace
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Replace`1
  commentId: T:MongoDB.Entities.Replace`1
  parent: MongoDB.Entities
  name: Replace<T>
  nameWithType: Replace<T>
  fullName: MongoDB.Entities.Replace<T>
  nameWithType.vb: Replace(Of T)
  fullName.vb: MongoDB.Entities.Replace(Of T)
  name.vb: Replace(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.Replace`1
    name: Replace
    nameWithType: Replace
    fullName: MongoDB.Entities.Replace
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Replace`1
    name: Replace
    nameWithType: Replace
    fullName: MongoDB.Entities.Replace
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.SaveAsync*
  commentId: Overload:MongoDB.Entities.DB.SaveAsync
  name: SaveAsync
  nameWithType: DB.SaveAsync
  fullName: MongoDB.Entities.DB.SaveAsync
- uid: MongoDB.Entities.DB.SaveOnlyAsync*
  commentId: Overload:MongoDB.Entities.DB.SaveOnlyAsync
  name: SaveOnlyAsync
  nameWithType: DB.SaveOnlyAsync
  fullName: MongoDB.Entities.DB.SaveOnlyAsync
- uid: Task{UpdateResult}
  commentId: '!:Task{UpdateResult}'
  definition: Task`1
  name: Task<UpdateResult>
  nameWithType: Task<UpdateResult>
  fullName: Task<UpdateResult>
  nameWithType.vb: Task(Of UpdateResult)
  fullName.vb: Task(Of UpdateResult)
  name.vb: Task(Of UpdateResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UpdateResult
    name: UpdateResult
    nameWithType: UpdateResult
    fullName: UpdateResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UpdateResult
    name: UpdateResult
    nameWithType: UpdateResult
    fullName: UpdateResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.SaveExceptAsync*
  commentId: Overload:MongoDB.Entities.DB.SaveExceptAsync
  name: SaveExceptAsync
  nameWithType: DB.SaveExceptAsync
  fullName: MongoDB.Entities.DB.SaveExceptAsync
- uid: MongoDB.Entities.DB.SavePreservingAsync*
  commentId: Overload:MongoDB.Entities.DB.SavePreservingAsync
  name: SavePreservingAsync
  nameWithType: DB.SavePreservingAsync
  fullName: MongoDB.Entities.DB.SavePreservingAsync
- uid: MongoDB.Entities.DB.NextSequentialNumberAsync*
  commentId: Overload:MongoDB.Entities.DB.NextSequentialNumberAsync
  name: NextSequentialNumberAsync
  nameWithType: DB.NextSequentialNumberAsync
  fullName: MongoDB.Entities.DB.NextSequentialNumberAsync
- uid: Task{System.UInt64}
  commentId: '!:Task{System.UInt64}'
  definition: Task`1
  name: Task<UInt64>
  nameWithType: Task<UInt64>
  fullName: Task<System.UInt64>
  nameWithType.vb: Task(Of UInt64)
  fullName.vb: Task(Of System.UInt64)
  name.vb: Task(Of UInt64)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.Transaction*
  commentId: Overload:MongoDB.Entities.DB.Transaction
  name: Transaction
  nameWithType: DB.Transaction
  fullName: MongoDB.Entities.DB.Transaction
- uid: ClientSessionOptions
  isExternal: true
  name: ClientSessionOptions
  nameWithType: ClientSessionOptions
  fullName: ClientSessionOptions
- uid: MongoDB.Entities.ModifiedBy
  commentId: T:MongoDB.Entities.ModifiedBy
  parent: MongoDB.Entities
  name: ModifiedBy
  nameWithType: ModifiedBy
  fullName: MongoDB.Entities.ModifiedBy
- uid: MongoDB.Entities.Transaction
  commentId: T:MongoDB.Entities.Transaction
  parent: MongoDB.Entities
  name: Transaction
  nameWithType: Transaction
  fullName: MongoDB.Entities.Transaction
- uid: MongoDB.Entities.DB.Update*
  commentId: Overload:MongoDB.Entities.DB.Update
  name: Update
  nameWithType: DB.Update
  fullName: MongoDB.Entities.DB.Update
- uid: MongoDB.Entities.Update{{T}}
  commentId: T:MongoDB.Entities.Update{``0}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.Update`1
  name: Update<T>
  nameWithType: Update<T>
  fullName: MongoDB.Entities.Update<T>
  nameWithType.vb: Update(Of T)
  fullName.vb: MongoDB.Entities.Update(Of T)
  name.vb: Update(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.Update`1
    name: Update
    nameWithType: Update
    fullName: MongoDB.Entities.Update
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Update`1
    name: Update
    nameWithType: Update
    fullName: MongoDB.Entities.Update
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Update`1
  commentId: T:MongoDB.Entities.Update`1
  parent: MongoDB.Entities
  name: Update<T>
  nameWithType: Update<T>
  fullName: MongoDB.Entities.Update<T>
  nameWithType.vb: Update(Of T)
  fullName.vb: MongoDB.Entities.Update(Of T)
  name.vb: Update(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.Update`1
    name: Update
    nameWithType: Update
    fullName: MongoDB.Entities.Update
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Update`1
    name: Update
    nameWithType: Update
    fullName: MongoDB.Entities.Update
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.UpdateAndGet*
  commentId: Overload:MongoDB.Entities.DB.UpdateAndGet
  name: UpdateAndGet
  nameWithType: DB.UpdateAndGet
  fullName: MongoDB.Entities.DB.UpdateAndGet
- uid: MongoDB.Entities.UpdateAndGet{{T},{TProjection}}
  commentId: T:MongoDB.Entities.UpdateAndGet{``0,``1}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.UpdateAndGet`2
  name: UpdateAndGet<T, TProjection>
  nameWithType: UpdateAndGet<T, TProjection>
  fullName: MongoDB.Entities.UpdateAndGet<T, TProjection>
  nameWithType.vb: UpdateAndGet(Of T, TProjection)
  fullName.vb: MongoDB.Entities.UpdateAndGet(Of T, TProjection)
  name.vb: UpdateAndGet(Of T, TProjection)
  spec.csharp:
  - uid: MongoDB.Entities.UpdateAndGet`2
    name: UpdateAndGet
    nameWithType: UpdateAndGet
    fullName: MongoDB.Entities.UpdateAndGet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.UpdateAndGet`2
    name: UpdateAndGet
    nameWithType: UpdateAndGet
    fullName: MongoDB.Entities.UpdateAndGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.UpdateAndGet`2
  commentId: T:MongoDB.Entities.UpdateAndGet`2
  parent: MongoDB.Entities
  name: UpdateAndGet<T, TProjection>
  nameWithType: UpdateAndGet<T, TProjection>
  fullName: MongoDB.Entities.UpdateAndGet<T, TProjection>
  nameWithType.vb: UpdateAndGet(Of T, TProjection)
  fullName.vb: MongoDB.Entities.UpdateAndGet(Of T, TProjection)
  name.vb: UpdateAndGet(Of T, TProjection)
  spec.csharp:
  - uid: MongoDB.Entities.UpdateAndGet`2
    name: UpdateAndGet
    nameWithType: UpdateAndGet
    fullName: MongoDB.Entities.UpdateAndGet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.UpdateAndGet`2
    name: UpdateAndGet
    nameWithType: UpdateAndGet
    fullName: MongoDB.Entities.UpdateAndGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.UpdateAndGet{{T}}
  commentId: T:MongoDB.Entities.UpdateAndGet{``0}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.UpdateAndGet`1
  name: UpdateAndGet<T>
  nameWithType: UpdateAndGet<T>
  fullName: MongoDB.Entities.UpdateAndGet<T>
  nameWithType.vb: UpdateAndGet(Of T)
  fullName.vb: MongoDB.Entities.UpdateAndGet(Of T)
  name.vb: UpdateAndGet(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.UpdateAndGet`1
    name: UpdateAndGet
    nameWithType: UpdateAndGet
    fullName: MongoDB.Entities.UpdateAndGet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.UpdateAndGet`1
    name: UpdateAndGet
    nameWithType: UpdateAndGet
    fullName: MongoDB.Entities.UpdateAndGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.UpdateAndGet`1
  commentId: T:MongoDB.Entities.UpdateAndGet`1
  name: UpdateAndGet<T>
  nameWithType: UpdateAndGet<T>
  fullName: MongoDB.Entities.UpdateAndGet<T>
  nameWithType.vb: UpdateAndGet(Of T)
  fullName.vb: MongoDB.Entities.UpdateAndGet(Of T)
  name.vb: UpdateAndGet(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.UpdateAndGet`1
    name: UpdateAndGet
    nameWithType: UpdateAndGet
    fullName: MongoDB.Entities.UpdateAndGet
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.UpdateAndGet`1
    name: UpdateAndGet
    nameWithType: UpdateAndGet
    fullName: MongoDB.Entities.UpdateAndGet
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.Watcher*
  commentId: Overload:MongoDB.Entities.DB.Watcher
  name: Watcher
  nameWithType: DB.Watcher
  fullName: MongoDB.Entities.DB.Watcher
- uid: MongoDB.Entities.Watcher{{T}}
  commentId: T:MongoDB.Entities.Watcher{``0}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.Watcher`1
  name: Watcher<T>
  nameWithType: Watcher<T>
  fullName: MongoDB.Entities.Watcher<T>
  nameWithType.vb: Watcher(Of T)
  fullName.vb: MongoDB.Entities.Watcher(Of T)
  name.vb: Watcher(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.Watcher`1
    name: Watcher
    nameWithType: Watcher
    fullName: MongoDB.Entities.Watcher
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Watcher`1
    name: Watcher
    nameWithType: Watcher
    fullName: MongoDB.Entities.Watcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Watcher`1
  commentId: T:MongoDB.Entities.Watcher`1
  name: Watcher<T>
  nameWithType: Watcher<T>
  fullName: MongoDB.Entities.Watcher<T>
  nameWithType.vb: Watcher(Of T)
  fullName.vb: MongoDB.Entities.Watcher(Of T)
  name.vb: Watcher(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.Watcher`1
    name: Watcher
    nameWithType: Watcher
    fullName: MongoDB.Entities.Watcher
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Watcher`1
    name: Watcher
    nameWithType: Watcher
    fullName: MongoDB.Entities.Watcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.DB.Watchers*
  commentId: Overload:MongoDB.Entities.DB.Watchers
  name: Watchers
  nameWithType: DB.Watchers
  fullName: MongoDB.Entities.DB.Watchers
- uid: IEnumerable{MongoDB.Entities.Watcher{{T}}}
  commentId: '!:IEnumerable{MongoDB.Entities.Watcher{``0}}'
  definition: IEnumerable`1
  name: IEnumerable<Watcher<T>>
  nameWithType: IEnumerable<Watcher<T>>
  fullName: IEnumerable<MongoDB.Entities.Watcher<T>>
  nameWithType.vb: IEnumerable(Of Watcher(Of T))
  fullName.vb: IEnumerable(Of MongoDB.Entities.Watcher(Of T))
  name.vb: IEnumerable(Of Watcher(Of T))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.Watcher`1
    name: Watcher
    nameWithType: Watcher
    fullName: MongoDB.Entities.Watcher
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.Watcher`1
    name: Watcher
    nameWithType: Watcher
    fullName: MongoDB.Entities.Watcher
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
