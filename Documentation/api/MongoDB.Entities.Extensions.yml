### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.Extensions
  commentId: T:MongoDB.Entities.Extensions
  id: Extensions
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.Extensions.Collection``1(``0)
  - MongoDB.Entities.Extensions.CollectionName``1(``0)
  - MongoDB.Entities.Extensions.Database``1(``0)
  - MongoDB.Entities.Extensions.DatabaseName``1(``0)
  - MongoDB.Entities.Extensions.DeleteAllAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Extensions.DeleteAsync``1(``0,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Extensions.Distinct``1(IAggregateFluent{``0})
  - MongoDB.Entities.Extensions.DropAsync(IMongoCollection{MongoDB.Entities.JoinRecord})
  - MongoDB.Entities.Extensions.ExistsAsync(IMongoDatabase,System.Int32)
  - MongoDB.Entities.Extensions.Fluent``1(``0,IClientSessionHandle,AggregateOptions)
  - MongoDB.Entities.Extensions.FullPath``1(Expression{Func{``0,System.Object}})
  - MongoDB.Entities.Extensions.InitManyToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}},Expression{Func{``0,System.Object}})
  - MongoDB.Entities.Extensions.InitOneToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}})
  - MongoDB.Entities.Extensions.InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Extensions.InsertAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Extensions.IsAccessibleAsync(IMongoDatabase,System.Int32)
  - MongoDB.Entities.Extensions.Match``1(IAggregateFluent{``0},Func{FilterDefinitionBuilder{``0},FilterDefinition{``0}})
  - MongoDB.Entities.Extensions.MatchExpression``1(IAggregateFluent{``0},System.String)
  - MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(``0,CancellationToken)
  - MongoDB.Entities.Extensions.Queryable``1(``0,AggregateOptions)
  - MongoDB.Entities.Extensions.SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Extensions.SaveAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Extensions.SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Extensions.SaveExceptAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Extensions.SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Extensions.SaveOnlyAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Extensions.SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.Extensions.SortByRelevance``1(IEnumerable{``0},System.String,Func{``0,System.String},System.Nullable{System.Int32})
  - MongoDB.Entities.Extensions.ToBatches``1(IEnumerable{``0},System.Int32)
  - MongoDB.Entities.Extensions.ToDocument``1(``0)
  - MongoDB.Entities.Extensions.ToDocuments``1(``0[])
  - MongoDB.Entities.Extensions.ToDocuments``1(IEnumerable{``0})
  - MongoDB.Entities.Extensions.ToDoubleMetaphoneHash(System.String)
  - MongoDB.Entities.Extensions.ToReference``1(``0)
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: MongoDB.Entities.Extensions
  type: Class
  source:
    id: Extensions
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 16
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nExtension methods for entities\n"
  example: []
  syntax:
    content: 'public static class Extensions : object'
    content.vb: >-
      Public Module Extensions

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: MongoDB.Entities.Extensions.ToBatches``1(IEnumerable{``0},System.Int32)
  commentId: M:MongoDB.Entities.Extensions.ToBatches``1(IEnumerable{``0},System.Int32)
  id: ToBatches``1(IEnumerable{``0},System.Int32)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: ToBatches<T>(IEnumerable<T>, Int32)
  nameWithType: Extensions.ToBatches<T>(IEnumerable<T>, Int32)
  fullName: MongoDB.Entities.Extensions.ToBatches<T>(IEnumerable<T>, System.Int32)
  type: Method
  source:
    id: ToBatches
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 47
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nExtension method for processing collections in batches with streaming (yield return)\n"
  example: []
  syntax:
    content: public static IEnumerable<IEnumerable<T>> ToBatches<T>(this IEnumerable<T> collection, int batchSize = 100)
    parameters:
    - id: collection
      type: IEnumerable{{T}}
      description: The source collection
    - id: batchSize
      type: System.Int32
      description: The size of each batch
    typeParameters:
    - id: T
      description: The type of the objects inside the source collection
    return:
      type: IEnumerable{IEnumerable{{T}}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBatches(Of T)(collection As IEnumerable(Of T), batchSize As Integer = 100) As IEnumerable(Of IEnumerable(Of T))
  overload: MongoDB.Entities.Extensions.ToBatches*
  nameWithType.vb: Extensions.ToBatches(Of T)(IEnumerable(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.ToBatches(Of T)(IEnumerable(Of T), System.Int32)
  name.vb: ToBatches(Of T)(IEnumerable(Of T), Int32)
- uid: MongoDB.Entities.Extensions.Database``1(``0)
  commentId: M:MongoDB.Entities.Extensions.Database``1(``0)
  id: Database``1(``0)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: Database<T>(T)
  nameWithType: Extensions.Database<T>(T)
  fullName: MongoDB.Entities.Extensions.Database<T>(T)
  type: Method
  source:
    id: Database
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 68
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets the IMongoDatabase for the given entity type\n"
  example: []
  syntax:
    content: >-
      public static IMongoDatabase Database<T>(this T _)

          where T : IEntity
    parameters:
    - id: _
      type: '{T}'
    typeParameters:
    - id: T
      description: The type of entity
    return:
      type: IMongoDatabase
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Database(Of T As IEntity)(_ As T) As IMongoDatabase
  overload: MongoDB.Entities.Extensions.Database*
  nameWithType.vb: Extensions.Database(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.Database(Of T)(T)
  name.vb: Database(Of T)(T)
- uid: MongoDB.Entities.Extensions.DatabaseName``1(``0)
  commentId: M:MongoDB.Entities.Extensions.DatabaseName``1(``0)
  id: DatabaseName``1(``0)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: DatabaseName<T>(T)
  nameWithType: Extensions.DatabaseName<T>(T)
  fullName: MongoDB.Entities.Extensions.DatabaseName<T>(T)
  type: Method
  source:
    id: DatabaseName
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 73
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets the name of the database this entity is attached to. Returns name of default database if not specifically attached.\n"
  example: []
  syntax:
    content: >-
      public static string DatabaseName<T>(this T _)

          where T : IEntity
    parameters:
    - id: _
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DatabaseName(Of T As IEntity)(_ As T) As String
  overload: MongoDB.Entities.Extensions.DatabaseName*
  nameWithType.vb: Extensions.DatabaseName(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.DatabaseName(Of T)(T)
  name.vb: DatabaseName(Of T)(T)
- uid: MongoDB.Entities.Extensions.Collection``1(``0)
  commentId: M:MongoDB.Entities.Extensions.Collection``1(``0)
  id: Collection``1(``0)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: Collection<T>(T)
  nameWithType: Extensions.Collection<T>(T)
  fullName: MongoDB.Entities.Extensions.Collection<T>(T)
  type: Method
  source:
    id: Collection
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 80
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets the IMongoCollection for a given IEntity type.\n<p>TIP: Try never to use this unless really neccessary.</p>\n"
  example: []
  syntax:
    content: >-
      public static IMongoCollection<T> Collection<T>(this T _)

          where T : IEntity
    parameters:
    - id: _
      type: '{T}'
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: IMongoCollection{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Collection(Of T As IEntity)(_ As T) As IMongoCollection(Of T)
  overload: MongoDB.Entities.Extensions.Collection*
  nameWithType.vb: Extensions.Collection(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.Collection(Of T)(T)
  name.vb: Collection(Of T)(T)
- uid: MongoDB.Entities.Extensions.CollectionName``1(``0)
  commentId: M:MongoDB.Entities.Extensions.CollectionName``1(``0)
  id: CollectionName``1(``0)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: CollectionName<T>(T)
  nameWithType: Extensions.CollectionName<T>(T)
  fullName: MongoDB.Entities.Extensions.CollectionName<T>(T)
  type: Method
  source:
    id: CollectionName
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 85
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGets the collection name for this entity\n"
  example: []
  syntax:
    content: >-
      public static string CollectionName<T>(this T _)

          where T : IEntity
    parameters:
    - id: _
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CollectionName(Of T As IEntity)(_ As T) As String
  overload: MongoDB.Entities.Extensions.CollectionName*
  nameWithType.vb: Extensions.CollectionName(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.CollectionName(Of T)(T)
  name.vb: CollectionName(Of T)(T)
- uid: MongoDB.Entities.Extensions.FullPath``1(Expression{Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Extensions.FullPath``1(Expression{Func{``0,System.Object}})
  id: FullPath``1(Expression{Func{``0,System.Object}})
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: FullPath<T>(Expression<Func<T, Object>>)
  nameWithType: Extensions.FullPath<T>(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Extensions.FullPath<T>(Expression<Func<T, System.Object>>)
  type: Method
  source:
    id: FullPath
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 94
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns the full dotted path of a property for the given expression\n"
  example: []
  syntax:
    content: public static string FullPath<T>(this Expression<Func<T, object>> expression)
    parameters:
    - id: expression
      type: Expression{Func{{T},System.Object}}
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FullPath(Of T)(expression As Expression(Of Func(Of T, Object))) As String
  overload: MongoDB.Entities.Extensions.FullPath*
  nameWithType.vb: Extensions.FullPath(Of T)(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.FullPath(Of T)(Expression(Of Func(Of T, System.Object)))
  name.vb: FullPath(Of T)(Expression(Of Func(Of T, Object)))
- uid: MongoDB.Entities.Extensions.DropAsync(IMongoCollection{MongoDB.Entities.JoinRecord})
  commentId: M:MongoDB.Entities.Extensions.DropAsync(IMongoCollection{MongoDB.Entities.JoinRecord})
  id: DropAsync(IMongoCollection{MongoDB.Entities.JoinRecord})
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: DropAsync(IMongoCollection<JoinRecord>)
  nameWithType: Extensions.DropAsync(IMongoCollection<JoinRecord>)
  fullName: MongoDB.Entities.Extensions.DropAsync(IMongoCollection<MongoDB.Entities.JoinRecord>)
  type: Method
  source:
    id: DropAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 103
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nDrops a join collection\n"
  example: []
  syntax:
    content: public static Task DropAsync(this IMongoCollection<JoinRecord> collection)
    parameters:
    - id: collection
      type: IMongoCollection{MongoDB.Entities.JoinRecord}
      description: ''
    return:
      type: Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DropAsync(collection As IMongoCollection(Of JoinRecord)) As Task
  overload: MongoDB.Entities.Extensions.DropAsync*
  nameWithType.vb: Extensions.DropAsync(IMongoCollection(Of JoinRecord))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.DropAsync(IMongoCollection(Of MongoDB.Entities.JoinRecord))
  name.vb: DropAsync(IMongoCollection(Of JoinRecord))
- uid: MongoDB.Entities.Extensions.Queryable``1(``0,AggregateOptions)
  commentId: M:MongoDB.Entities.Extensions.Queryable``1(``0,AggregateOptions)
  id: Queryable``1(``0,AggregateOptions)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: Queryable<T>(T, AggregateOptions)
  nameWithType: Extensions.Queryable<T>(T, AggregateOptions)
  fullName: MongoDB.Entities.Extensions.Queryable<T>(T, AggregateOptions)
  type: Method
  source:
    id: Queryable
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 111
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAn IQueryable collection of sibling Entities.\n"
  example: []
  syntax:
    content: >-
      public static IMongoQueryable<T> Queryable<T>(this T _, AggregateOptions options = null)

          where T : IEntity
    parameters:
    - id: _
      type: '{T}'
    - id: options
      type: AggregateOptions
    typeParameters:
    - id: T
    return:
      type: IMongoQueryable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Queryable(Of T As IEntity)(_ As T, options As AggregateOptions = Nothing) As IMongoQueryable(Of T)
  overload: MongoDB.Entities.Extensions.Queryable*
  nameWithType.vb: Extensions.Queryable(Of T)(T, AggregateOptions)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.Queryable(Of T)(T, AggregateOptions)
  name.vb: Queryable(Of T)(T, AggregateOptions)
- uid: MongoDB.Entities.Extensions.Fluent``1(``0,IClientSessionHandle,AggregateOptions)
  commentId: M:MongoDB.Entities.Extensions.Fluent``1(``0,IClientSessionHandle,AggregateOptions)
  id: Fluent``1(``0,IClientSessionHandle,AggregateOptions)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: Fluent<T>(T, IClientSessionHandle, AggregateOptions)
  nameWithType: Extensions.Fluent<T>(T, IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Extensions.Fluent<T>(T, IClientSessionHandle, AggregateOptions)
  type: Method
  source:
    id: Fluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 122
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAn IAggregateFluent collection of sibling Entities.\n"
  example: []
  syntax:
    content: >-
      public static IAggregateFluent<T> Fluent<T>(this T _, IClientSessionHandle session = null, AggregateOptions options = null)

          where T : IEntity
    parameters:
    - id: _
      type: '{T}'
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: options
      type: AggregateOptions
      description: The options for the aggregation. This is not required.
    typeParameters:
    - id: T
      description: ''
    return:
      type: IAggregateFluent{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Fluent(Of T As IEntity)(_ As T, session As IClientSessionHandle = Nothing, options As AggregateOptions = Nothing) As IAggregateFluent(Of T)
  overload: MongoDB.Entities.Extensions.Fluent*
  nameWithType.vb: Extensions.Fluent(Of T)(T, IClientSessionHandle, AggregateOptions)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.Fluent(Of T)(T, IClientSessionHandle, AggregateOptions)
  name.vb: Fluent(Of T)(T, IClientSessionHandle, AggregateOptions)
- uid: MongoDB.Entities.Extensions.Distinct``1(IAggregateFluent{``0})
  commentId: M:MongoDB.Entities.Extensions.Distinct``1(IAggregateFluent{``0})
  id: Distinct``1(IAggregateFluent{``0})
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: Distinct<T>(IAggregateFluent<T>)
  nameWithType: Extensions.Distinct<T>(IAggregateFluent<T>)
  fullName: MongoDB.Entities.Extensions.Distinct<T>(IAggregateFluent<T>)
  type: Method
  source:
    id: Distinct
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 131
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAdds a distinct aggregation stage to a fluent pipeline.\n"
  example: []
  syntax:
    content: >-
      public static IAggregateFluent<T> Distinct<T>(this IAggregateFluent<T> aggregate)

          where T : IEntity
    parameters:
    - id: aggregate
      type: IAggregateFluent{{T}}
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: IAggregateFluent{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of T As IEntity)(aggregate As IAggregateFluent(Of T)) As IAggregateFluent(Of T)
  overload: MongoDB.Entities.Extensions.Distinct*
  nameWithType.vb: Extensions.Distinct(Of T)(IAggregateFluent(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.Distinct(Of T)(IAggregateFluent(Of T))
  name.vb: Distinct(Of T)(IAggregateFluent(Of T))
- uid: MongoDB.Entities.Extensions.Match``1(IAggregateFluent{``0},Func{FilterDefinitionBuilder{``0},FilterDefinition{``0}})
  commentId: M:MongoDB.Entities.Extensions.Match``1(IAggregateFluent{``0},Func{FilterDefinitionBuilder{``0},FilterDefinition{``0}})
  id: Match``1(IAggregateFluent{``0},Func{FilterDefinitionBuilder{``0},FilterDefinition{``0}})
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: Match<T>(IAggregateFluent<T>, Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  nameWithType: Extensions.Match<T>(IAggregateFluent<T>, Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  fullName: MongoDB.Entities.Extensions.Match<T>(IAggregateFluent<T>, Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 159
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAppends a match stage to the pipeline with a filter expression\n"
  example: []
  syntax:
    content: >-
      public static IAggregateFluent<T> Match<T>(this IAggregateFluent<T> aggregate, Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter)

          where T : IEntity
    parameters:
    - id: aggregate
      type: IAggregateFluent{{T}}
      description: ''
    - id: filter
      type: Func{FilterDefinitionBuilder{{T}},FilterDefinition{{T}}}
      description: f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: IAggregateFluent{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Match(Of T As IEntity)(aggregate As IAggregateFluent(Of T), filter As Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))) As IAggregateFluent(Of T)
  overload: MongoDB.Entities.Extensions.Match*
  nameWithType.vb: Extensions.Match(Of T)(IAggregateFluent(Of T), Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.Match(Of T)(IAggregateFluent(Of T), Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  name.vb: Match(Of T)(IAggregateFluent(Of T), Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
- uid: MongoDB.Entities.Extensions.MatchExpression``1(IAggregateFluent{``0},System.String)
  commentId: M:MongoDB.Entities.Extensions.MatchExpression``1(IAggregateFluent{``0},System.String)
  id: MatchExpression``1(IAggregateFluent{``0},System.String)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: MatchExpression<T>(IAggregateFluent<T>, String)
  nameWithType: Extensions.MatchExpression<T>(IAggregateFluent<T>, String)
  fullName: MongoDB.Entities.Extensions.MatchExpression<T>(IAggregateFluent<T>, System.String)
  type: Method
  source:
    id: MatchExpression
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 170
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nAppends a match stage to the pipeline with an aggregation expression (i.e. $expr)\n"
  example: []
  syntax:
    content: >-
      public static IAggregateFluent<T> MatchExpression<T>(this IAggregateFluent<T> aggregate, string expression)

          where T : IEntity
    parameters:
    - id: aggregate
      type: IAggregateFluent{{T}}
      description: ''
    - id: expression
      type: System.String
      description: '{ $gt: [&apos;$Property1&apos;, &apos;$Property2&apos;] }'
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: IAggregateFluent{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MatchExpression(Of T As IEntity)(aggregate As IAggregateFluent(Of T), expression As String) As IAggregateFluent(Of T)
  overload: MongoDB.Entities.Extensions.MatchExpression*
  nameWithType.vb: Extensions.MatchExpression(Of T)(IAggregateFluent(Of T), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.MatchExpression(Of T)(IAggregateFluent(Of T), System.String)
  name.vb: MatchExpression(Of T)(IAggregateFluent(Of T), String)
- uid: MongoDB.Entities.Extensions.ToReference``1(``0)
  commentId: M:MongoDB.Entities.Extensions.ToReference``1(``0)
  id: ToReference``1(``0)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: ToReference<T>(T)
  nameWithType: Extensions.ToReference<T>(T)
  fullName: MongoDB.Entities.Extensions.ToReference<T>(T)
  type: Method
  source:
    id: ToReference
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 180
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns a reference to this entity.\n"
  example: []
  syntax:
    content: >-
      public static One<T> ToReference<T>(this T entity)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: MongoDB.Entities.One{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToReference(Of T As IEntity)(entity As T) As One(Of T)
  overload: MongoDB.Entities.Extensions.ToReference*
  nameWithType.vb: Extensions.ToReference(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.ToReference(Of T)(T)
  name.vb: ToReference(Of T)(T)
- uid: MongoDB.Entities.Extensions.ToDocument``1(``0)
  commentId: M:MongoDB.Entities.Extensions.ToDocument``1(``0)
  id: ToDocument``1(``0)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: ToDocument<T>(T)
  nameWithType: Extensions.ToDocument<T>(T)
  fullName: MongoDB.Entities.Extensions.ToDocument<T>(T)
  type: Method
  source:
    id: ToDocument
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 188
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nCreates an unlinked duplicate of the original IEntity ready for embedding with a blank ID.\n"
  example: []
  syntax:
    content: >-
      public static T ToDocument<T>(this T entity)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDocument(Of T As IEntity)(entity As T) As T
  overload: MongoDB.Entities.Extensions.ToDocument*
  nameWithType.vb: Extensions.ToDocument(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.ToDocument(Of T)(T)
  name.vb: ToDocument(Of T)(T)
- uid: MongoDB.Entities.Extensions.ToDocuments``1(``0[])
  commentId: M:MongoDB.Entities.Extensions.ToDocuments``1(``0[])
  id: ToDocuments``1(``0[])
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: ToDocuments<T>(T[])
  nameWithType: Extensions.ToDocuments<T>(T[])
  fullName: MongoDB.Entities.Extensions.ToDocuments<T>(T[])
  type: Method
  source:
    id: ToDocuments
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 198
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nCreates unlinked duplicates of the original Entities ready for embedding with blank IDs.\n"
  example: []
  syntax:
    content: >-
      public static T[] ToDocuments<T>(this T[] entities)

          where T : IEntity
    parameters:
    - id: entities
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDocuments(Of T As IEntity)(entities As T()) As T()
  overload: MongoDB.Entities.Extensions.ToDocuments*
  nameWithType.vb: Extensions.ToDocuments(Of T)(T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.ToDocuments(Of T)(T())
  name.vb: ToDocuments(Of T)(T())
- uid: MongoDB.Entities.Extensions.ToDocuments``1(IEnumerable{``0})
  commentId: M:MongoDB.Entities.Extensions.ToDocuments``1(IEnumerable{``0})
  id: ToDocuments``1(IEnumerable{``0})
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: ToDocuments<T>(IEnumerable<T>)
  nameWithType: Extensions.ToDocuments<T>(IEnumerable<T>)
  fullName: MongoDB.Entities.Extensions.ToDocuments<T>(IEnumerable<T>)
  type: Method
  source:
    id: ToDocuments
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 209
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nCreates unlinked duplicates of the original Entities ready for embedding with blank IDs.\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<T> ToDocuments<T>(this IEnumerable<T> entities)

          where T : IEntity
    parameters:
    - id: entities
      type: IEnumerable{{T}}
    typeParameters:
    - id: T
    return:
      type: IEnumerable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDocuments(Of T As IEntity)(entities As IEnumerable(Of T)) As IEnumerable(Of T)
  overload: MongoDB.Entities.Extensions.ToDocuments*
  nameWithType.vb: Extensions.ToDocuments(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.ToDocuments(Of T)(IEnumerable(Of T))
  name.vb: ToDocuments(Of T)(IEnumerable(Of T))
- uid: MongoDB.Entities.Extensions.SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
  id: SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: SaveAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveAsync<T>(T, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveAsync<T>(T, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SaveAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 223
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves a complete entity replacing an existing entity or creating a new one if it does not exist. \nIf ID value is null, a new entity is created. If ID has a value, then existing entity is replaced.\n"
  example: []
  syntax:
    content: >-
      public static Task SaveAsync<T>(this T entity, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
    return:
      type: Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveAsync(Of T As IEntity)(entity As T, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Extensions.SaveAsync*
  nameWithType.vb: Extensions.SaveAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.SaveAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  name.vb: SaveAsync(Of T)(T, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Extensions.SaveAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  id: SaveAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: SaveAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SaveAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 234
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves a batch of complete entities replacing existing ones or creating new ones if they do not exist. \nIf ID value is null, a new entity is created. If ID has a value, then existing entity is replaced.\n"
  example: []
  syntax:
    content: >-
      public static Task<BulkWriteResult<T>> SaveAsync<T>(this IEnumerable<T> entities, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entities
      type: IEnumerable{{T}}
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
    return:
      type: Task{BulkWriteResult{{T}}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveAsync(Of T As IEntity)(entities As IEnumerable(Of T), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of BulkWriteResult(Of T))
  overload: MongoDB.Entities.Extensions.SaveAsync*
  nameWithType.vb: Extensions.SaveAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.SaveAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
  name.vb: SaveAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Extensions.InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
  id: InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: InsertAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.InsertAsync<T>(T, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.InsertAsync<T>(T, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: InsertAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 244
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nInserts a new entity into the colleciton.\n"
  example: []
  syntax:
    content: >-
      public static Task InsertAsync<T>(this T entity, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
    return:
      type: Task
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InsertAsync(Of T As IEntity)(entity As T, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task
  overload: MongoDB.Entities.Extensions.InsertAsync*
  nameWithType.vb: Extensions.InsertAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.InsertAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  name.vb: InsertAsync(Of T)(T, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Extensions.InsertAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.InsertAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  id: InsertAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: InsertAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.InsertAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.InsertAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: InsertAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 254
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nInserts a batch of new entities into the collection.\n"
  example: []
  syntax:
    content: >-
      public static Task<BulkWriteResult<T>> InsertAsync<T>(this IEnumerable<T> entities, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entities
      type: IEnumerable{{T}}
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
    return:
      type: Task{BulkWriteResult{{T}}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InsertAsync(Of T As IEntity)(entities As IEnumerable(Of T), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of BulkWriteResult(Of T))
  overload: MongoDB.Entities.Extensions.InsertAsync*
  nameWithType.vb: Extensions.InsertAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.InsertAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
  name.vb: InsertAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Extensions.SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  id: SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveOnlyAsync<T>(T, Expression<Func<T, System.Object>>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SaveOnlyAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 270
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves an entity partially with only the specified subset of properties. \nIf ID value is null, a new entity is created. If ID has a value, then existing entity is updated.\n<p>TIP: The properties to be saved can be specified with a &apos;New&apos; expression. \nYou can only specify root level properties with the expression.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<UpdateResult> SaveOnlyAsync<T>(this T entity, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to save
    - id: members
      type: Expression{Func{{T},System.Object}}
      description: x => new { x.PropOne, x.PropTwo }
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{UpdateResult}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveOnlyAsync(Of T As IEntity)(entity As T, members As Expression(Of Func(Of T, Object)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of UpdateResult)
  overload: MongoDB.Entities.Extensions.SaveOnlyAsync*
  nameWithType.vb: Extensions.SaveOnlyAsync(Of T)(T, Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.SaveOnlyAsync(Of T)(T, Expression(Of Func(Of T, System.Object)), IClientSessionHandle, CancellationToken)
  name.vb: SaveOnlyAsync(Of T)(T, Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Extensions.SaveOnlyAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveOnlyAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  id: SaveOnlyAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveOnlyAsync<T>(IEnumerable<T>, Expression<Func<T, System.Object>>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SaveOnlyAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 286
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves a batch of entities partially with only the specified subset of properties. \nIf ID value is null, a new entity is created. If ID has a value, then existing entity is updated.\n<p>TIP: The properties to be saved can be specified with a &apos;New&apos; expression. \nYou can only specify root level properties with the expression.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<BulkWriteResult<T>> SaveOnlyAsync<T>(this IEnumerable<T> entities, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entities
      type: IEnumerable{{T}}
      description: The batch of entities to save
    - id: members
      type: Expression{Func{{T},System.Object}}
      description: x => new { x.PropOne, x.PropTwo }
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{BulkWriteResult{{T}}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveOnlyAsync(Of T As IEntity)(entities As IEnumerable(Of T), members As Expression(Of Func(Of T, Object)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of BulkWriteResult(Of T))
  overload: MongoDB.Entities.Extensions.SaveOnlyAsync*
  nameWithType.vb: Extensions.SaveOnlyAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.SaveOnlyAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, System.Object)), IClientSessionHandle, CancellationToken)
  name.vb: SaveOnlyAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Extensions.SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  id: SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveExceptAsync<T>(T, Expression<Func<T, System.Object>>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SaveExceptAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 302
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves an entity partially excluding the specified subset of properties. \nIf ID value is null, a new entity is created. If ID has a value, then existing entity is updated.\n<p>TIP: The properties to be excluded can be specified with a &apos;New&apos; expression. \nYou can only specify root level properties with the expression.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<UpdateResult> SaveExceptAsync<T>(this T entity, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to save
    - id: members
      type: Expression{Func{{T},System.Object}}
      description: x => new { x.PropOne, x.PropTwo }
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{UpdateResult}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveExceptAsync(Of T As IEntity)(entity As T, members As Expression(Of Func(Of T, Object)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of UpdateResult)
  overload: MongoDB.Entities.Extensions.SaveExceptAsync*
  nameWithType.vb: Extensions.SaveExceptAsync(Of T)(T, Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.SaveExceptAsync(Of T)(T, Expression(Of Func(Of T, System.Object)), IClientSessionHandle, CancellationToken)
  name.vb: SaveExceptAsync(Of T)(T, Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Extensions.SaveExceptAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveExceptAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  id: SaveExceptAsync``1(IEnumerable{``0},Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveExceptAsync<T>(IEnumerable<T>, Expression<Func<T, System.Object>>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SaveExceptAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 318
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves a batch of entities partially excluding the specified subset of properties. \nIf ID value is null, a new entity is created. If ID has a value, then existing entity is updated.\n<p>TIP: The properties to be excluded can be specified with a &apos;New&apos; expression. \nYou can only specify root level properties with the expression.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<BulkWriteResult<T>> SaveExceptAsync<T>(this IEnumerable<T> entities, Expression<Func<T, object>> members, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entities
      type: IEnumerable{{T}}
      description: The batch of entities to save
    - id: members
      type: Expression{Func{{T},System.Object}}
      description: x => new { x.PropOne, x.PropTwo }
    - id: session
      type: IClientSessionHandle
      description: An optional session if using within a transaction
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{BulkWriteResult{{T}}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SaveExceptAsync(Of T As IEntity)(entities As IEnumerable(Of T), members As Expression(Of Func(Of T, Object)), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of BulkWriteResult(Of T))
  overload: MongoDB.Entities.Extensions.SaveExceptAsync*
  nameWithType.vb: Extensions.SaveExceptAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.SaveExceptAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, System.Object)), IClientSessionHandle, CancellationToken)
  name.vb: SaveExceptAsync(Of T)(IEnumerable(Of T), Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Extensions.SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
  id: SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: SavePreservingAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 330
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSaves an entity partially while excluding some properties. \nThe properties to be excluded can be specified using the [Preserve] attribute.\n"
  example: []
  syntax:
    content: >-
      public static Task<UpdateResult> SavePreservingAsync<T>(this T entity, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
      description: The entity to save
    - id: session
      type: IClientSessionHandle
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    return:
      type: Task{UpdateResult}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SavePreservingAsync(Of T As IEntity)(entity As T, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of UpdateResult)
  overload: MongoDB.Entities.Extensions.SavePreservingAsync*
  nameWithType.vb: Extensions.SavePreservingAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.SavePreservingAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  name.vb: SavePreservingAsync(Of T)(T, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Extensions.DeleteAsync``1(``0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.DeleteAsync``1(``0,IClientSessionHandle,CancellationToken)
  id: DeleteAsync``1(``0,IClientSessionHandle,CancellationToken)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: DeleteAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.DeleteAsync<T>(T, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.DeleteAsync<T>(T, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: DeleteAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 340
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nDeletes a single entity from MongoDB.\n<p>HINT: If this entity is referenced by one-to-many/many-to-many relationships, those references are also deleted.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<DeleteResult> DeleteAsync<T>(this T entity, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entity
      type: '{T}'
    - id: session
      type: IClientSessionHandle
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
    return:
      type: Task{DeleteResult}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DeleteAsync(Of T As IEntity)(entity As T, session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of DeleteResult)
  overload: MongoDB.Entities.Extensions.DeleteAsync*
  nameWithType.vb: Extensions.DeleteAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.DeleteAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  name.vb: DeleteAsync(Of T)(T, IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Extensions.DeleteAllAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.DeleteAllAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  id: DeleteAllAsync``1(IEnumerable{``0},IClientSessionHandle,CancellationToken)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: DeleteAllAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.DeleteAllAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.DeleteAllAsync<T>(IEnumerable<T>, IClientSessionHandle, CancellationToken)
  type: Method
  source:
    id: DeleteAllAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 350
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nDeletes multiple entities from the database\n<p>HINT: If these entities are referenced by one-to-many/many-to-many relationships, those references are also deleted.</p>\n"
  example: []
  syntax:
    content: >-
      public static Task<DeleteResult> DeleteAllAsync<T>(this IEnumerable<T> entities, IClientSessionHandle session = null, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: entities
      type: IEnumerable{{T}}
    - id: session
      type: IClientSessionHandle
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
    return:
      type: Task{DeleteResult}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DeleteAllAsync(Of T As IEntity)(entities As IEnumerable(Of T), session As IClientSessionHandle = Nothing, cancellation As CancellationToken = Nothing) As Task(Of DeleteResult)
  overload: MongoDB.Entities.Extensions.DeleteAllAsync*
  nameWithType.vb: Extensions.DeleteAllAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.DeleteAllAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
  name.vb: DeleteAllAsync(Of T)(IEnumerable(Of T), IClientSessionHandle, CancellationToken)
- uid: MongoDB.Entities.Extensions.SortByRelevance``1(IEnumerable{``0},System.String,Func{``0,System.String},System.Nullable{System.Int32})
  commentId: M:MongoDB.Entities.Extensions.SortByRelevance``1(IEnumerable{``0},System.String,Func{``0,System.String},System.Nullable{System.Int32})
  id: SortByRelevance``1(IEnumerable{``0},System.String,Func{``0,System.String},System.Nullable{System.Int32})
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: SortByRelevance<T>(IEnumerable<T>, String, Func<T, String>, Nullable<Int32>)
  nameWithType: Extensions.SortByRelevance<T>(IEnumerable<T>, String, Func<T, String>, Nullable<Int32>)
  fullName: MongoDB.Entities.Extensions.SortByRelevance<T>(IEnumerable<T>, System.String, Func<T, System.String>, System.Nullable<System.Int32>)
  type: Method
  source:
    id: SortByRelevance
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 363
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSort a list of objects by relevance to a given string using Levenshtein Distance\n"
  example: []
  syntax:
    content: public static IEnumerable<T> SortByRelevance<T>(this IEnumerable<T> objects, string searchTerm, Func<T, string> propertyToSortBy, int? maxDistance = null)
    parameters:
    - id: objects
      type: IEnumerable{{T}}
      description: The list of objects to sort
    - id: searchTerm
      type: System.String
      description: The term to measure relevance to
    - id: propertyToSortBy
      type: Func{{T},System.String}
      description: x => x.PropertyName [the term will be matched against the value of this property]
    - id: maxDistance
      type: System.Nullable{System.Int32}
      description: The maximum levenstein distance to qualify an item for inclusion in the returned list
    typeParameters:
    - id: T
      description: Any object type
    return:
      type: IEnumerable{{T}}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SortByRelevance(Of T)(objects As IEnumerable(Of T), searchTerm As String, propertyToSortBy As Func(Of T, String), maxDistance As Integer? = Nothing) As IEnumerable(Of T)
  overload: MongoDB.Entities.Extensions.SortByRelevance*
  nameWithType.vb: Extensions.SortByRelevance(Of T)(IEnumerable(Of T), String, Func(Of T, String), Nullable(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.SortByRelevance(Of T)(IEnumerable(Of T), System.String, Func(Of T, System.String), System.Nullable(Of System.Int32))
  name.vb: SortByRelevance(Of T)(IEnumerable(Of T), String, Func(Of T, String), Nullable(Of Int32))
- uid: MongoDB.Entities.Extensions.ToDoubleMetaphoneHash(System.String)
  commentId: M:MongoDB.Entities.Extensions.ToDoubleMetaphoneHash(System.String)
  id: ToDoubleMetaphoneHash(System.String)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: ToDoubleMetaphoneHash(String)
  nameWithType: Extensions.ToDoubleMetaphoneHash(String)
  fullName: MongoDB.Entities.Extensions.ToDoubleMetaphoneHash(System.String)
  type: Method
  source:
    id: ToDoubleMetaphoneHash
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 384
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nConverts a search term to Double Metaphone hash code suitable for fuzzy text searching.\n"
  example: []
  syntax:
    content: public static string ToDoubleMetaphoneHash(this string term)
    parameters:
    - id: term
      type: System.String
      description: A single or multiple word search term
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDoubleMetaphoneHash(term As String) As String
  overload: MongoDB.Entities.Extensions.ToDoubleMetaphoneHash*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(``0,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(``0,CancellationToken)
  id: NextSequentialNumberAsync``1(``0,CancellationToken)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: NextSequentialNumberAsync<T>(T, CancellationToken)
  nameWithType: Extensions.NextSequentialNumberAsync<T>(T, CancellationToken)
  fullName: MongoDB.Entities.Extensions.NextSequentialNumberAsync<T>(T, CancellationToken)
  type: Method
  source:
    id: NextSequentialNumberAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 393
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nReturns an atomically generated sequential number for the given Entity type everytime the method is called\n"
  example: []
  syntax:
    content: >-
      public static Task<ulong> NextSequentialNumberAsync<T>(this T _, CancellationToken cancellation = null)

          where T : IEntity
    parameters:
    - id: _
      type: '{T}'
    - id: cancellation
      type: CancellationToken
      description: An optional cancellation token
    typeParameters:
    - id: T
    return:
      type: Task{System.UInt64}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NextSequentialNumberAsync(Of T As IEntity)(_ As T, cancellation As CancellationToken = Nothing) As Task(Of ULong)
  overload: MongoDB.Entities.Extensions.NextSequentialNumberAsync*
  nameWithType.vb: Extensions.NextSequentialNumberAsync(Of T)(T, CancellationToken)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.NextSequentialNumberAsync(Of T)(T, CancellationToken)
  name.vb: NextSequentialNumberAsync(Of T)(T, CancellationToken)
- uid: MongoDB.Entities.Extensions.InitOneToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}})
  commentId: M:MongoDB.Entities.Extensions.InitOneToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}})
  id: InitOneToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}})
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: InitOneToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>)
  nameWithType: Extensions.InitOneToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>)
  fullName: MongoDB.Entities.Extensions.InitOneToMany<TChild>(MongoDB.Entities.IEntity, Expression<Func<MongoDB.Entities.Many<TChild>>>)
  type: Method
  source:
    id: InitOneToMany
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 403
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nInitializes supplied property with a new One-To-Many relationship.\n"
  example: []
  syntax:
    content: >-
      public static void InitOneToMany<TChild>(this IEntity parent, Expression<Func<Many<TChild>>> propertyToInit)

          where TChild : IEntity
    parameters:
    - id: parent
      type: MongoDB.Entities.IEntity
      description: ''
    - id: propertyToInit
      type: Expression{Func{MongoDB.Entities.Many{{TChild}}}}
      description: () => PropertyName
    typeParameters:
    - id: TChild
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub InitOneToMany(Of TChild As IEntity)(parent As IEntity, propertyToInit As Expression(Of Func(Of Many(Of TChild))))
  overload: MongoDB.Entities.Extensions.InitOneToMany*
  nameWithType.vb: Extensions.InitOneToMany(Of TChild)(IEntity, Expression(Of Func(Of Many(Of TChild))))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.InitOneToMany(Of TChild)(MongoDB.Entities.IEntity, Expression(Of Func(Of MongoDB.Entities.Many(Of TChild))))
  name.vb: InitOneToMany(Of TChild)(IEntity, Expression(Of Func(Of Many(Of TChild))))
- uid: MongoDB.Entities.Extensions.InitManyToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}},Expression{Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Extensions.InitManyToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}},Expression{Func{``0,System.Object}})
  id: InitManyToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}},Expression{Func{``0,System.Object}})
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: InitManyToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>)
  nameWithType: Extensions.InitManyToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>)
  fullName: MongoDB.Entities.Extensions.InitManyToMany<TChild>(MongoDB.Entities.IEntity, Expression<Func<MongoDB.Entities.Many<TChild>>>, Expression<Func<TChild, System.Object>>)
  type: Method
  source:
    id: InitManyToMany
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 415
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nInitializes supplied property with a new Many-To-Many relationship.\n"
  example: []
  syntax:
    content: >-
      public static void InitManyToMany<TChild>(this IEntity parent, Expression<Func<Many<TChild>>> propertyToInit, Expression<Func<TChild, object>> propertyOtherSide)

          where TChild : IEntity
    parameters:
    - id: parent
      type: MongoDB.Entities.IEntity
      description: ''
    - id: propertyToInit
      type: Expression{Func{MongoDB.Entities.Many{{TChild}}}}
      description: () = > PropertyName
    - id: propertyOtherSide
      type: Expression{Func{{TChild},System.Object}}
      description: x => x.PropertyName
    typeParameters:
    - id: TChild
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub InitManyToMany(Of TChild As IEntity)(parent As IEntity, propertyToInit As Expression(Of Func(Of Many(Of TChild))), propertyOtherSide As Expression(Of Func(Of TChild, Object)))
  overload: MongoDB.Entities.Extensions.InitManyToMany*
  nameWithType.vb: Extensions.InitManyToMany(Of TChild)(IEntity, Expression(Of Func(Of Many(Of TChild))), Expression(Of Func(Of TChild, Object)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MongoDB.Entities.Extensions.InitManyToMany(Of TChild)(MongoDB.Entities.IEntity, Expression(Of Func(Of MongoDB.Entities.Many(Of TChild))), Expression(Of Func(Of TChild, System.Object)))
  name.vb: InitManyToMany(Of TChild)(IEntity, Expression(Of Func(Of Many(Of TChild))), Expression(Of Func(Of TChild, Object)))
- uid: MongoDB.Entities.Extensions.IsAccessibleAsync(IMongoDatabase,System.Int32)
  commentId: M:MongoDB.Entities.Extensions.IsAccessibleAsync(IMongoDatabase,System.Int32)
  id: IsAccessibleAsync(IMongoDatabase,System.Int32)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: IsAccessibleAsync(IMongoDatabase, Int32)
  nameWithType: Extensions.IsAccessibleAsync(IMongoDatabase, Int32)
  fullName: MongoDB.Entities.Extensions.IsAccessibleAsync(IMongoDatabase, System.Int32)
  type: Method
  source:
    id: IsAccessibleAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 438
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nPings the mongodb server to check if it&apos;s still connectable\n"
  example: []
  syntax:
    content: public static async Task<bool> IsAccessibleAsync(this IMongoDatabase db, int timeoutSeconds = 5)
    parameters:
    - id: db
      type: IMongoDatabase
    - id: timeoutSeconds
      type: System.Int32
      description: The number of seconds to keep trying
    return:
      type: Task{System.Boolean}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAccessibleAsync(db As IMongoDatabase, timeoutSeconds As Integer = 5) As Task(Of Boolean)
  overload: MongoDB.Entities.Extensions.IsAccessibleAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
- uid: MongoDB.Entities.Extensions.ExistsAsync(IMongoDatabase,System.Int32)
  commentId: M:MongoDB.Entities.Extensions.ExistsAsync(IMongoDatabase,System.Int32)
  id: ExistsAsync(IMongoDatabase,System.Int32)
  isExtensionMethod: true
  parent: MongoDB.Entities.Extensions
  langs:
  - csharp
  - vb
  name: ExistsAsync(IMongoDatabase, Int32)
  nameWithType: Extensions.ExistsAsync(IMongoDatabase, Int32)
  fullName: MongoDB.Entities.Extensions.ExistsAsync(IMongoDatabase, System.Int32)
  type: Method
  source:
    id: ExistsAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\Extensions.cs
    startLine: 458
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nChecks to see if the database already exists on the mongodb server\n"
  example: []
  syntax:
    content: public static async Task<bool> ExistsAsync(this IMongoDatabase db, int timeoutSeconds = 5)
    parameters:
    - id: db
      type: IMongoDatabase
    - id: timeoutSeconds
      type: System.Int32
      description: The number of seconds to keep trying
    return:
      type: Task{System.Boolean}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExistsAsync(db As IMongoDatabase, timeoutSeconds As Integer = 5) As Task(Of Boolean)
  overload: MongoDB.Entities.Extensions.ExistsAsync*
  modifiers.csharp:
  - public
  - static
  - async
  modifiers.vb:
  - Public
  - Shared
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: MongoDB.Entities.Extensions.ToBatches*
  commentId: Overload:MongoDB.Entities.Extensions.ToBatches
  name: ToBatches
  nameWithType: Extensions.ToBatches
  fullName: MongoDB.Entities.Extensions.ToBatches
- uid: IEnumerable{{T}}
  commentId: '!:IEnumerable{``0}'
  definition: IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: IEnumerable{IEnumerable{{T}}}
  commentId: '!:IEnumerable{IEnumerable{``0}}'
  definition: IEnumerable`1
  name: IEnumerable<IEnumerable<T>>
  nameWithType: IEnumerable<IEnumerable<T>>
  fullName: IEnumerable<IEnumerable<T>>
  nameWithType.vb: IEnumerable(Of IEnumerable(Of T))
  fullName.vb: IEnumerable(Of IEnumerable(Of T))
  name.vb: IEnumerable(Of IEnumerable(Of T))
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.Database*
  commentId: Overload:MongoDB.Entities.Extensions.Database
  name: Database
  nameWithType: Extensions.Database
  fullName: MongoDB.Entities.Extensions.Database
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: IMongoDatabase
  isExternal: true
  name: IMongoDatabase
  nameWithType: IMongoDatabase
  fullName: IMongoDatabase
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MongoDB.Entities.Extensions.DatabaseName*
  commentId: Overload:MongoDB.Entities.Extensions.DatabaseName
  name: DatabaseName
  nameWithType: Extensions.DatabaseName
  fullName: MongoDB.Entities.Extensions.DatabaseName
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MongoDB.Entities.Extensions.Collection*
  commentId: Overload:MongoDB.Entities.Extensions.Collection
  name: Collection
  nameWithType: Extensions.Collection
  fullName: MongoDB.Entities.Extensions.Collection
- uid: IMongoCollection{{T}}
  commentId: '!:IMongoCollection{``0}'
  definition: IMongoCollection`1
  name: IMongoCollection<T>
  nameWithType: IMongoCollection<T>
  fullName: IMongoCollection<T>
  nameWithType.vb: IMongoCollection(Of T)
  fullName.vb: IMongoCollection(Of T)
  name.vb: IMongoCollection(Of T)
  spec.csharp:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IMongoCollection`1
  isExternal: true
  name: IMongoCollection<>
  nameWithType: IMongoCollection<>
  fullName: IMongoCollection<>
  nameWithType.vb: IMongoCollection(Of )
  fullName.vb: IMongoCollection(Of )
  name.vb: IMongoCollection(Of )
  spec.csharp:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.CollectionName*
  commentId: Overload:MongoDB.Entities.Extensions.CollectionName
  name: CollectionName
  nameWithType: Extensions.CollectionName
  fullName: MongoDB.Entities.Extensions.CollectionName
- uid: MongoDB.Entities.Extensions.FullPath*
  commentId: Overload:MongoDB.Entities.Extensions.FullPath
  name: FullPath
  nameWithType: Extensions.FullPath
  fullName: MongoDB.Entities.Extensions.FullPath
- uid: Expression{Func{{T},System.Object}}
  commentId: '!:Expression{Func{`0,System.Object}}'
  definition: Expression`1
  name: Expression<Func<T, Object>>
  nameWithType: Expression<Func<T, Object>>
  fullName: Expression<Func<T, System.Object>>
  nameWithType.vb: Expression(Of Func(Of T, Object))
  fullName.vb: Expression(Of Func(Of T, System.Object))
  name.vb: Expression(Of Func(Of T, Object))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Expression`1
  isExternal: true
  name: Expression<>
  nameWithType: Expression<>
  fullName: Expression<>
  nameWithType.vb: Expression(Of )
  fullName.vb: Expression(Of )
  name.vb: Expression(Of )
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.DropAsync*
  commentId: Overload:MongoDB.Entities.Extensions.DropAsync
  name: DropAsync
  nameWithType: Extensions.DropAsync
  fullName: MongoDB.Entities.Extensions.DropAsync
- uid: IMongoCollection{MongoDB.Entities.JoinRecord}
  commentId: '!:IMongoCollection{MongoDB.Entities.JoinRecord}'
  definition: IMongoCollection`1
  name: IMongoCollection<JoinRecord>
  nameWithType: IMongoCollection<JoinRecord>
  fullName: IMongoCollection<MongoDB.Entities.JoinRecord>
  nameWithType.vb: IMongoCollection(Of JoinRecord)
  fullName.vb: IMongoCollection(Of MongoDB.Entities.JoinRecord)
  name.vb: IMongoCollection(Of JoinRecord)
  spec.csharp:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoCollection`1
    name: IMongoCollection
    nameWithType: IMongoCollection
    fullName: IMongoCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.JoinRecord
    name: JoinRecord
    nameWithType: JoinRecord
    fullName: MongoDB.Entities.JoinRecord
  - name: )
    nameWithType: )
    fullName: )
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: MongoDB.Entities.Extensions.Queryable*
  commentId: Overload:MongoDB.Entities.Extensions.Queryable
  name: Queryable
  nameWithType: Extensions.Queryable
  fullName: MongoDB.Entities.Extensions.Queryable
- uid: AggregateOptions
  isExternal: true
  name: AggregateOptions
  nameWithType: AggregateOptions
  fullName: AggregateOptions
- uid: IMongoQueryable{{T}}
  commentId: '!:IMongoQueryable{``0}'
  definition: IMongoQueryable`1
  name: IMongoQueryable<T>
  nameWithType: IMongoQueryable<T>
  fullName: IMongoQueryable<T>
  nameWithType.vb: IMongoQueryable(Of T)
  fullName.vb: IMongoQueryable(Of T)
  name.vb: IMongoQueryable(Of T)
  spec.csharp:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IMongoQueryable`1
  isExternal: true
  name: IMongoQueryable<>
  nameWithType: IMongoQueryable<>
  fullName: IMongoQueryable<>
  nameWithType.vb: IMongoQueryable(Of )
  fullName.vb: IMongoQueryable(Of )
  name.vb: IMongoQueryable(Of )
  spec.csharp:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IMongoQueryable`1
    name: IMongoQueryable
    nameWithType: IMongoQueryable
    fullName: IMongoQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.Fluent*
  commentId: Overload:MongoDB.Entities.Extensions.Fluent
  name: Fluent
  nameWithType: Extensions.Fluent
  fullName: MongoDB.Entities.Extensions.Fluent
- uid: IClientSessionHandle
  isExternal: true
  name: IClientSessionHandle
  nameWithType: IClientSessionHandle
  fullName: IClientSessionHandle
- uid: IAggregateFluent{{T}}
  commentId: '!:IAggregateFluent{``0}'
  definition: IAggregateFluent`1
  name: IAggregateFluent<T>
  nameWithType: IAggregateFluent<T>
  fullName: IAggregateFluent<T>
  nameWithType.vb: IAggregateFluent(Of T)
  fullName.vb: IAggregateFluent(Of T)
  name.vb: IAggregateFluent(Of T)
  spec.csharp:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IAggregateFluent`1
  isExternal: true
  name: IAggregateFluent<>
  nameWithType: IAggregateFluent<>
  fullName: IAggregateFluent<>
  nameWithType.vb: IAggregateFluent(Of )
  fullName.vb: IAggregateFluent(Of )
  name.vb: IAggregateFluent(Of )
  spec.csharp:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAggregateFluent`1
    name: IAggregateFluent
    nameWithType: IAggregateFluent
    fullName: IAggregateFluent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.Distinct*
  commentId: Overload:MongoDB.Entities.Extensions.Distinct
  name: Distinct
  nameWithType: Extensions.Distinct
  fullName: MongoDB.Entities.Extensions.Distinct
- uid: MongoDB.Entities.Extensions.Match*
  commentId: Overload:MongoDB.Entities.Extensions.Match
  name: Match
  nameWithType: Extensions.Match
  fullName: MongoDB.Entities.Extensions.Match
- uid: Func{FilterDefinitionBuilder{{T}},FilterDefinition{{T}}}
  commentId: '!:Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}}'
  definition: Func`2
  name: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  nameWithType: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  fullName: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  nameWithType.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  fullName.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  name.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.MatchExpression*
  commentId: Overload:MongoDB.Entities.Extensions.MatchExpression
  name: MatchExpression
  nameWithType: Extensions.MatchExpression
  fullName: MongoDB.Entities.Extensions.MatchExpression
- uid: MongoDB.Entities.Extensions.ToReference*
  commentId: Overload:MongoDB.Entities.Extensions.ToReference
  name: ToReference
  nameWithType: Extensions.ToReference
  fullName: MongoDB.Entities.Extensions.ToReference
- uid: MongoDB.Entities.One{{T}}
  commentId: T:MongoDB.Entities.One{``0}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.One`1
  name: One<T>
  nameWithType: One<T>
  fullName: MongoDB.Entities.One<T>
  nameWithType.vb: One(Of T)
  fullName.vb: MongoDB.Entities.One(Of T)
  name.vb: One(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.One`1
    name: One
    nameWithType: One
    fullName: MongoDB.Entities.One
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.One`1
    name: One
    nameWithType: One
    fullName: MongoDB.Entities.One
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.One`1
  commentId: T:MongoDB.Entities.One`1
  parent: MongoDB.Entities
  name: One<T>
  nameWithType: One<T>
  fullName: MongoDB.Entities.One<T>
  nameWithType.vb: One(Of T)
  fullName.vb: MongoDB.Entities.One(Of T)
  name.vb: One(Of T)
  spec.csharp:
  - uid: MongoDB.Entities.One`1
    name: One
    nameWithType: One
    fullName: MongoDB.Entities.One
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.One`1
    name: One
    nameWithType: One
    fullName: MongoDB.Entities.One
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.ToDocument*
  commentId: Overload:MongoDB.Entities.Extensions.ToDocument
  name: ToDocument
  nameWithType: Extensions.ToDocument
  fullName: MongoDB.Entities.Extensions.ToDocument
- uid: MongoDB.Entities.Extensions.ToDocuments*
  commentId: Overload:MongoDB.Entities.Extensions.ToDocuments
  name: ToDocuments
  nameWithType: Extensions.ToDocuments
  fullName: MongoDB.Entities.Extensions.ToDocuments
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MongoDB.Entities.Extensions.SaveAsync*
  commentId: Overload:MongoDB.Entities.Extensions.SaveAsync
  name: SaveAsync
  nameWithType: Extensions.SaveAsync
  fullName: MongoDB.Entities.Extensions.SaveAsync
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task{BulkWriteResult{{T}}}
  commentId: '!:Task{BulkWriteResult{``0}}'
  definition: Task`1
  name: Task<BulkWriteResult<T>>
  nameWithType: Task<BulkWriteResult<T>>
  fullName: Task<BulkWriteResult<T>>
  nameWithType.vb: Task(Of BulkWriteResult(Of T))
  fullName.vb: Task(Of BulkWriteResult(Of T))
  name.vb: Task(Of BulkWriteResult(Of T))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BulkWriteResult`1
    name: BulkWriteResult
    nameWithType: BulkWriteResult
    fullName: BulkWriteResult
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BulkWriteResult`1
    name: BulkWriteResult
    nameWithType: BulkWriteResult
    fullName: BulkWriteResult
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.InsertAsync*
  commentId: Overload:MongoDB.Entities.Extensions.InsertAsync
  name: InsertAsync
  nameWithType: Extensions.InsertAsync
  fullName: MongoDB.Entities.Extensions.InsertAsync
- uid: MongoDB.Entities.Extensions.SaveOnlyAsync*
  commentId: Overload:MongoDB.Entities.Extensions.SaveOnlyAsync
  name: SaveOnlyAsync
  nameWithType: Extensions.SaveOnlyAsync
  fullName: MongoDB.Entities.Extensions.SaveOnlyAsync
- uid: Task{UpdateResult}
  commentId: '!:Task{UpdateResult}'
  definition: Task`1
  name: Task<UpdateResult>
  nameWithType: Task<UpdateResult>
  fullName: Task<UpdateResult>
  nameWithType.vb: Task(Of UpdateResult)
  fullName.vb: Task(Of UpdateResult)
  name.vb: Task(Of UpdateResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: UpdateResult
    name: UpdateResult
    nameWithType: UpdateResult
    fullName: UpdateResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: UpdateResult
    name: UpdateResult
    nameWithType: UpdateResult
    fullName: UpdateResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.SaveExceptAsync*
  commentId: Overload:MongoDB.Entities.Extensions.SaveExceptAsync
  name: SaveExceptAsync
  nameWithType: Extensions.SaveExceptAsync
  fullName: MongoDB.Entities.Extensions.SaveExceptAsync
- uid: MongoDB.Entities.Extensions.SavePreservingAsync*
  commentId: Overload:MongoDB.Entities.Extensions.SavePreservingAsync
  name: SavePreservingAsync
  nameWithType: Extensions.SavePreservingAsync
  fullName: MongoDB.Entities.Extensions.SavePreservingAsync
- uid: MongoDB.Entities.Extensions.DeleteAsync*
  commentId: Overload:MongoDB.Entities.Extensions.DeleteAsync
  name: DeleteAsync
  nameWithType: Extensions.DeleteAsync
  fullName: MongoDB.Entities.Extensions.DeleteAsync
- uid: Task{DeleteResult}
  commentId: '!:Task{DeleteResult}'
  definition: Task`1
  name: Task<DeleteResult>
  nameWithType: Task<DeleteResult>
  fullName: Task<DeleteResult>
  nameWithType.vb: Task(Of DeleteResult)
  fullName.vb: Task(Of DeleteResult)
  name.vb: Task(Of DeleteResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: DeleteResult
    name: DeleteResult
    nameWithType: DeleteResult
    fullName: DeleteResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: DeleteResult
    name: DeleteResult
    nameWithType: DeleteResult
    fullName: DeleteResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.DeleteAllAsync*
  commentId: Overload:MongoDB.Entities.Extensions.DeleteAllAsync
  name: DeleteAllAsync
  nameWithType: Extensions.DeleteAllAsync
  fullName: MongoDB.Entities.Extensions.DeleteAllAsync
- uid: MongoDB.Entities.Extensions.SortByRelevance*
  commentId: Overload:MongoDB.Entities.Extensions.SortByRelevance
  name: SortByRelevance
  nameWithType: Extensions.SortByRelevance
  fullName: MongoDB.Entities.Extensions.SortByRelevance
- uid: Func{{T},System.String}
  commentId: '!:Func{``0,System.String}'
  definition: Func`2
  name: Func<T, String>
  nameWithType: Func<T, String>
  fullName: Func<T, System.String>
  nameWithType.vb: Func(Of T, String)
  fullName.vb: Func(Of T, System.String)
  name.vb: Func(Of T, String)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.ToDoubleMetaphoneHash*
  commentId: Overload:MongoDB.Entities.Extensions.ToDoubleMetaphoneHash
  name: ToDoubleMetaphoneHash
  nameWithType: Extensions.ToDoubleMetaphoneHash
  fullName: MongoDB.Entities.Extensions.ToDoubleMetaphoneHash
- uid: MongoDB.Entities.Extensions.NextSequentialNumberAsync*
  commentId: Overload:MongoDB.Entities.Extensions.NextSequentialNumberAsync
  name: NextSequentialNumberAsync
  nameWithType: Extensions.NextSequentialNumberAsync
  fullName: MongoDB.Entities.Extensions.NextSequentialNumberAsync
- uid: Task{System.UInt64}
  commentId: '!:Task{System.UInt64}'
  definition: Task`1
  name: Task<UInt64>
  nameWithType: Task<UInt64>
  fullName: Task<System.UInt64>
  nameWithType.vb: Task(Of UInt64)
  fullName.vb: Task(Of System.UInt64)
  name.vb: Task(Of UInt64)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.InitOneToMany*
  commentId: Overload:MongoDB.Entities.Extensions.InitOneToMany
  name: InitOneToMany
  nameWithType: Extensions.InitOneToMany
  fullName: MongoDB.Entities.Extensions.InitOneToMany
- uid: MongoDB.Entities.IEntity
  commentId: T:MongoDB.Entities.IEntity
  parent: MongoDB.Entities
  name: IEntity
  nameWithType: IEntity
  fullName: MongoDB.Entities.IEntity
- uid: Expression{Func{MongoDB.Entities.Many{{TChild}}}}
  commentId: '!:Expression{Func{MongoDB.Entities.Many{``0}}}'
  definition: Expression`1
  name: Expression<Func<Many<TChild>>>
  nameWithType: Expression<Func<Many<TChild>>>
  fullName: Expression<Func<MongoDB.Entities.Many<TChild>>>
  nameWithType.vb: Expression(Of Func(Of Many(Of TChild)))
  fullName.vb: Expression(Of Func(Of MongoDB.Entities.Many(Of TChild)))
  name.vb: Expression(Of Func(Of Many(Of TChild)))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.Many`1
    name: Many
    nameWithType: Many
    fullName: MongoDB.Entities.Many
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.Many`1
    name: Many
    nameWithType: Many
    fullName: MongoDB.Entities.Many
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.InitManyToMany*
  commentId: Overload:MongoDB.Entities.Extensions.InitManyToMany
  name: InitManyToMany
  nameWithType: Extensions.InitManyToMany
  fullName: MongoDB.Entities.Extensions.InitManyToMany
- uid: Expression{Func{{TChild},System.Object}}
  commentId: '!:Expression{Func{``0,System.Object}}'
  definition: Expression`1
  name: Expression<Func<TChild, Object>>
  nameWithType: Expression<Func<TChild, Object>>
  fullName: Expression<Func<TChild, System.Object>>
  nameWithType.vb: Expression(Of Func(Of TChild, Object))
  fullName.vb: Expression(Of Func(Of TChild, System.Object))
  name.vb: Expression(Of Func(Of TChild, Object))
  spec.csharp:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.IsAccessibleAsync*
  commentId: Overload:MongoDB.Entities.Extensions.IsAccessibleAsync
  name: IsAccessibleAsync
  nameWithType: Extensions.IsAccessibleAsync
  fullName: MongoDB.Entities.Extensions.IsAccessibleAsync
- uid: Task{System.Boolean}
  commentId: '!:Task{System.Boolean}'
  definition: Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.ExistsAsync*
  commentId: Overload:MongoDB.Entities.Extensions.ExistsAsync
  name: ExistsAsync
  nameWithType: Extensions.ExistsAsync
  fullName: MongoDB.Entities.Extensions.ExistsAsync
