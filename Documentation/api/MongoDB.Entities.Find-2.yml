### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.Find`2
  commentId: T:MongoDB.Entities.Find`2
  id: Find`2
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.Find`2.ExecuteAsync(System.Threading.CancellationToken)
  - MongoDB.Entities.Find`2.ExecuteCursorAsync(System.Threading.CancellationToken)
  - MongoDB.Entities.Find`2.ExecuteFirstAsync(System.Threading.CancellationToken)
  - MongoDB.Entities.Find`2.ExecuteSingleAsync(System.Threading.CancellationToken)
  - MongoDB.Entities.Find`2.Limit(System.Int32)
  - MongoDB.Entities.Find`2.ManyAsync(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}},System.Threading.CancellationToken)
  - MongoDB.Entities.Find`2.ManyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  - MongoDB.Entities.Find`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  - MongoDB.Entities.Find`2.Match(MongoDB.Entities.Template)
  - MongoDB.Entities.Find`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  - MongoDB.Entities.Find`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - MongoDB.Entities.Find`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  - MongoDB.Entities.Find`2.Match(System.String)
  - MongoDB.Entities.Find`2.MatchExpression(MongoDB.Entities.Template)
  - MongoDB.Entities.Find`2.MatchExpression(System.String)
  - MongoDB.Entities.Find`2.MatchID(System.String)
  - MongoDB.Entities.Find`2.MatchString(System.String)
  - MongoDB.Entities.Find`2.OneAsync(System.String,System.Threading.CancellationToken)
  - MongoDB.Entities.Find`2.Option(System.Action{MongoDB.Driver.FindOptions{`0,`1}})
  - MongoDB.Entities.Find`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
  - MongoDB.Entities.Find`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  - MongoDB.Entities.Find`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  - MongoDB.Entities.Find`2.Skip(System.Int32)
  - MongoDB.Entities.Find`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
  - MongoDB.Entities.Find`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
  - MongoDB.Entities.Find`2.SortByTextScore
  - MongoDB.Entities.Find`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  langs:
  - csharp
  - vb
  name: Find<T, TProjection>
  nameWithType: Find<T, TProjection>
  fullName: MongoDB.Entities.Find<T, TProjection>
  type: Class
  source:
    id: Find
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 30
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents a MongoDB Find command with the ability to project to a different result type.\n<p>TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute()</p>\n"
  example: []
  syntax:
    content: >-
      public class Find<T, TProjection>

          where T : IEntity
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    - id: TProjection
      description: The type you&apos;d like to project the results to.
    content.vb: Public Class Find(Of T As IEntity, TProjection)
  inheritance:
  - System.Object
  derivedClasses:
  - MongoDB.Entities.Find`1
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Find(Of T, TProjection)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection)
  name.vb: Find(Of T, TProjection)
- uid: MongoDB.Entities.Find`2.OneAsync(System.String,System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.OneAsync(System.String,System.Threading.CancellationToken)
  id: OneAsync(System.String,System.Threading.CancellationToken)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: OneAsync(String, CancellationToken)
  nameWithType: Find<T, TProjection>.OneAsync(String, CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.OneAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    id: OneAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 48
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nFind a single IEntity by ID\n"
  example: []
  syntax:
    content: public Task<TProjection> OneAsync(string ID, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: ID
      type: System.String
      description: The unique ID of an IEntity
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{{TProjection}}
      description: A single entity or null if not found
    content.vb: Public Function OneAsync(ID As String, cancellation As CancellationToken = Nothing) As Task(Of TProjection)
  overload: MongoDB.Entities.Find`2.OneAsync*
  nameWithType.vb: Find(Of T, TProjection).OneAsync(String, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).OneAsync(System.String, System.Threading.CancellationToken)
- uid: MongoDB.Entities.Find`2.ManyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ManyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  id: ManyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: ManyAsync(Expression<Func<T, Boolean>>, CancellationToken)
  nameWithType: Find<T, TProjection>.ManyAsync(Expression<Func<T, Boolean>>, CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ManyAsync(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ManyAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 60
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nFind entities by supplying a lambda expression\n"
  example: []
  syntax:
    content: public Task<List<TProjection>> ManyAsync(Expression<Func<T, bool>> expression, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: x => x.Property == Value
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TProjection}}}
      description: A list of Entities
    content.vb: Public Function ManyAsync(expression As Expression(Of Func(Of T, Boolean)), cancellation As CancellationToken = Nothing) As Task(Of List(Of TProjection))
  overload: MongoDB.Entities.Find`2.ManyAsync*
  nameWithType.vb: Find(Of T, TProjection).ManyAsync(Expression(Of Func(Of T, Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ManyAsync(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)), System.Threading.CancellationToken)
  name.vb: ManyAsync(Expression(Of Func(Of T, Boolean)), CancellationToken)
- uid: MongoDB.Entities.Find`2.ManyAsync(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}},System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ManyAsync(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}},System.Threading.CancellationToken)
  id: ManyAsync(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}},System.Threading.CancellationToken)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: ManyAsync(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, CancellationToken)
  nameWithType: Find<T, TProjection>.ManyAsync(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ManyAsync(System.Func<MongoDB.Driver.FilterDefinitionBuilder<T>, MongoDB.Driver.FilterDefinition<T>>, System.Threading.CancellationToken)
  type: Method
  source:
    id: ManyAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 72
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nFind entities by supplying a filter expression\n"
  example: []
  syntax:
    content: public Task<List<TProjection>> ManyAsync(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter, CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: filter
      type: System.Func{MongoDB.Driver.FilterDefinitionBuilder{{T}},MongoDB.Driver.FilterDefinition{{T}}}
      description: f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TProjection}}}
      description: A list of Entities
    content.vb: Public Function ManyAsync(filter As Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), cancellation As CancellationToken = Nothing) As Task(Of List(Of TProjection))
  overload: MongoDB.Entities.Find`2.ManyAsync*
  nameWithType.vb: Find(Of T, TProjection).ManyAsync(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ManyAsync(System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of T), MongoDB.Driver.FilterDefinition(Of T)), System.Threading.CancellationToken)
  name.vb: ManyAsync(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), CancellationToken)
- uid: MongoDB.Entities.Find`2.MatchID(System.String)
  commentId: M:MongoDB.Entities.Find`2.MatchID(System.String)
  id: MatchID(System.String)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: MatchID(String)
  nameWithType: Find<T, TProjection>.MatchID(String)
  fullName: MongoDB.Entities.Find<T, TProjection>.MatchID(System.String)
  type: Method
  source:
    id: MatchID
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 82
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an IEntity ID as the matching criteria\n"
  example: []
  syntax:
    content: public Find<T, TProjection> MatchID(string ID)
    parameters:
    - id: ID
      type: System.String
      description: A unique IEntity ID
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function MatchID(ID As String) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.MatchID*
  nameWithType.vb: Find(Of T, TProjection).MatchID(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).MatchID(System.String)
- uid: MongoDB.Entities.Find`2.Match(System.String)
  commentId: M:MongoDB.Entities.Find`2.Match(System.String)
  id: Match(System.String)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Match(String)
  nameWithType: Find<T, TProjection>.Match(String)
  fullName: MongoDB.Entities.Find<T, TProjection>.Match(System.String)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 91
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an IEntity ID as the matching criteria\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Match(string ID)
    parameters:
    - id: ID
      type: System.String
      description: A unique IEntity ID
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function Match(ID As String) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Match*
  nameWithType.vb: Find(Of T, TProjection).Match(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match(System.String)
- uid: MongoDB.Entities.Find`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:MongoDB.Entities.Find`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Match(Expression<Func<T, Boolean>>)
  nameWithType: Find<T, TProjection>.Match(Expression<Func<T, Boolean>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Match(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 100
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a lambda expression\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Match(Expression<Func<T, bool>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: x => x.Property == Value
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function Match(expression As Expression(Of Func(Of T, Boolean))) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Match*
  nameWithType.vb: Find(Of T, TProjection).Match(Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Match(Expression(Of Func(Of T, Boolean)))
- uid: MongoDB.Entities.Find`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  commentId: M:MongoDB.Entities.Find`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  id: Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  nameWithType: Find<T, TProjection>.Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Match(System.Func<MongoDB.Driver.FilterDefinitionBuilder<T>, MongoDB.Driver.FilterDefinition<T>>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 109
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a filter expression\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter)
    parameters:
    - id: filter
      type: System.Func{MongoDB.Driver.FilterDefinitionBuilder{{T}},MongoDB.Driver.FilterDefinition{{T}}}
      description: f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function Match(filter As Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Match*
  nameWithType.vb: Find(Of T, TProjection).Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match(System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of T), MongoDB.Driver.FilterDefinition(Of T)))
  name.vb: Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
- uid: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Find`2.Match(MongoDB.Entities.Template)
  id: Match(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Match(Template)
  nameWithType: Find<T, TProjection>.Match(Template)
  fullName: MongoDB.Entities.Find<T, TProjection>.Match(MongoDB.Entities.Template)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 119
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a template\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Match(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: A Template with a find query
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function Match(template As Template) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Match*
  nameWithType.vb: Find(Of T, TProjection).Match(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match(MongoDB.Entities.Template)
- uid: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  commentId: M:MongoDB.Entities.Find`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  id: Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Match(Search, String, Boolean, Boolean, String)
  nameWithType: Find<T, TProjection>.Match(Search, String, Boolean, Boolean, String)
  fullName: MongoDB.Entities.Find<T, TProjection>.Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 134
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify a search term to find results from the text index of this particular collection.\n<p>TIP: Make sure to define a text index with DB.Index&lt;T>() before searching</p>\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Match(Search searchType, string searchTerm, bool caseSensitive = false, bool diacriticSensitive = false, string language = null)
    parameters:
    - id: searchType
      type: MongoDB.Entities.Search
      description: The type of text matching to do
    - id: searchTerm
      type: System.String
      description: The search term
    - id: caseSensitive
      type: System.Boolean
      description: Case sensitivity of the search (optional)
    - id: diacriticSensitive
      type: System.Boolean
      description: Diacritic sensitivity of the search (optional)
    - id: language
      type: System.String
      description: The language for the search (optional)
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function Match(searchType As Search, searchTerm As String, caseSensitive As Boolean = False, diacriticSensitive As Boolean = False, language As String = Nothing) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Match*
  nameWithType.vb: Find(Of T, TProjection).Match(Search, String, Boolean, Boolean, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
- uid: MongoDB.Entities.Find`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  commentId: M:MongoDB.Entities.Find`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  id: Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  nameWithType: Find<T, TProjection>.Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Match(System.Linq.Expressions.Expression<System.Func<T, System.Object>>, MongoDB.Entities.Coordinates2D, System.Nullable<System.Double>, System.Nullable<System.Double>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 164
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify criteria for matching entities based on GeoSpatial data (longitude &amp; latitude)\n<p>TIP: Make sure to define a Geo2DSphere index with DB.Index&lt;T>() before searching</p>\n<p>Note: DB.FluentGeoNear() supports more advanced options</p>\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Match(Expression<Func<T, object>> coordinatesProperty, Coordinates2D nearCoordinates, double? maxDistance = default(double? ), double? minDistance = default(double? ))
    parameters:
    - id: coordinatesProperty
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: The property where 2DCoordinates are stored
    - id: nearCoordinates
      type: MongoDB.Entities.Coordinates2D
      description: The search point
    - id: maxDistance
      type: System.Nullable{System.Double}
      description: Maximum distance in meters from the search point
    - id: minDistance
      type: System.Nullable{System.Double}
      description: Minimum distance in meters from the search point
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function Match(coordinatesProperty As Expression(Of Func(Of T, Object)), nearCoordinates As Coordinates2D, maxDistance As Double? = Nothing, minDistance As Double? = Nothing) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Match*
  nameWithType.vb: Find(Of T, TProjection).Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), MongoDB.Entities.Coordinates2D, System.Nullable(Of System.Double), System.Nullable(Of System.Double))
  name.vb: Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
- uid: MongoDB.Entities.Find`2.MatchString(System.String)
  commentId: M:MongoDB.Entities.Find`2.MatchString(System.String)
  id: MatchString(System.String)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: MatchString(String)
  nameWithType: Find<T, TProjection>.MatchString(String)
  fullName: MongoDB.Entities.Find<T, TProjection>.MatchString(System.String)
  type: Method
  source:
    id: MatchString
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 173
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a JSON string\n"
  example: []
  syntax:
    content: public Find<T, TProjection> MatchString(string jsonString)
    parameters:
    - id: jsonString
      type: System.String
      description: '{ Title : &apos;The Power Of Now&apos; }'
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function MatchString(jsonString As String) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.MatchString*
  nameWithType.vb: Find(Of T, TProjection).MatchString(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).MatchString(System.String)
- uid: MongoDB.Entities.Find`2.MatchExpression(System.String)
  commentId: M:MongoDB.Entities.Find`2.MatchExpression(System.String)
  id: MatchExpression(System.String)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: MatchExpression(String)
  nameWithType: Find<T, TProjection>.MatchExpression(String)
  fullName: MongoDB.Entities.Find<T, TProjection>.MatchExpression(System.String)
  type: Method
  source:
    id: MatchExpression
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 183
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with an aggregation expression (i.e. $expr)\n"
  example: []
  syntax:
    content: public Find<T, TProjection> MatchExpression(string expression)
    parameters:
    - id: expression
      type: System.String
      description: '{ $gt: [&apos;$Property1&apos;, &apos;$Property2&apos;] }'
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function MatchExpression(expression As String) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.MatchExpression*
  nameWithType.vb: Find(Of T, TProjection).MatchExpression(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).MatchExpression(System.String)
- uid: MongoDB.Entities.Find`2.MatchExpression(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Find`2.MatchExpression(MongoDB.Entities.Template)
  id: MatchExpression(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: MatchExpression(Template)
  nameWithType: Find<T, TProjection>.MatchExpression(Template)
  fullName: MongoDB.Entities.Find<T, TProjection>.MatchExpression(MongoDB.Entities.Template)
  type: Method
  source:
    id: MatchExpression
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 193
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a Template\n"
  example: []
  syntax:
    content: public Find<T, TProjection> MatchExpression(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: A Template object
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function MatchExpression(template As Template) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.MatchExpression*
  nameWithType.vb: Find(Of T, TProjection).MatchExpression(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).MatchExpression(MongoDB.Entities.Template)
- uid: MongoDB.Entities.Find`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
  commentId: M:MongoDB.Entities.Find`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
  id: Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Sort(Expression<Func<T, Object>>, Order)
  nameWithType: Find<T, TProjection>.Sort(Expression<Func<T, Object>>, Order)
  fullName: MongoDB.Entities.Find<T, TProjection>.Sort(System.Linq.Expressions.Expression<System.Func<T, System.Object>>, MongoDB.Entities.Order)
  type: Method
  source:
    id: Sort
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 204
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify which property and order to use for sorting (use multiple times if needed)\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Sort(Expression<Func<T, object>> propertyToSortBy, Order sortOrder)
    parameters:
    - id: propertyToSortBy
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: x => x.Prop
    - id: sortOrder
      type: MongoDB.Entities.Order
      description: The sort order
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function Sort(propertyToSortBy As Expression(Of Func(Of T, Object)), sortOrder As Order) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Sort*
  nameWithType.vb: Find(Of T, TProjection).Sort(Expression(Of Func(Of T, Object)), Order)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Sort(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), MongoDB.Entities.Order)
  name.vb: Sort(Expression(Of Func(Of T, Object)), Order)
- uid: MongoDB.Entities.Find`2.SortByTextScore
  commentId: M:MongoDB.Entities.Find`2.SortByTextScore
  id: SortByTextScore
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: SortByTextScore()
  nameWithType: Find<T, TProjection>.SortByTextScore()
  fullName: MongoDB.Entities.Find<T, TProjection>.SortByTextScore()
  type: Method
  source:
    id: SortByTextScore
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 223
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSort the results of a text search by the MetaTextScore\n<p>TIP: Use this method after .Project() if you need to do a projection also</p>\n"
  example: []
  syntax:
    content: public Find<T, TProjection> SortByTextScore()
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function SortByTextScore As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.SortByTextScore*
  nameWithType.vb: Find(Of T, TProjection).SortByTextScore()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).SortByTextScore()
- uid: MongoDB.Entities.Find`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Find`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: SortByTextScore(Expression<Func<T, Object>>)
  nameWithType: Find<T, TProjection>.SortByTextScore(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.SortByTextScore(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  type: Method
  source:
    id: SortByTextScore
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 233
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSort the results of a text search by the MetaTextScore and get back the score as well\n<p>TIP: Use this method after .Project() if you need to do a projection also</p>\n"
  example: []
  syntax:
    content: public Find<T, TProjection> SortByTextScore(Expression<Func<T, object>> scoreProperty)
    parameters:
    - id: scoreProperty
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: x => x.TextScoreProp
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function SortByTextScore(scoreProperty As Expression(Of Func(Of T, Object))) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.SortByTextScore*
  nameWithType.vb: Find(Of T, TProjection).SortByTextScore(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).SortByTextScore(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: SortByTextScore(Expression(Of Func(Of T, Object)))
- uid: MongoDB.Entities.Find`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
  commentId: M:MongoDB.Entities.Find`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
  id: Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  nameWithType: Find<T, TProjection>.Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Sort(System.Func<MongoDB.Driver.SortDefinitionBuilder<T>, MongoDB.Driver.SortDefinition<T>>)
  type: Method
  source:
    id: Sort
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 252
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify how to sort using a sort expression\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>> sortFunction)
    parameters:
    - id: sortFunction
      type: System.Func{MongoDB.Driver.SortDefinitionBuilder{{T}},MongoDB.Driver.SortDefinition{{T}}}
      description: s => s.Ascending(&quot;Prop1&quot;).MetaTextScore(&quot;Prop2&quot;)
    return:
      type: MongoDB.Entities.Find`2
      description: ''
    content.vb: Public Function Sort(sortFunction As Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T))) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Sort*
  nameWithType.vb: Find(Of T, TProjection).Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Sort(System.Func(Of MongoDB.Driver.SortDefinitionBuilder(Of T), MongoDB.Driver.SortDefinition(Of T)))
  name.vb: Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
- uid: MongoDB.Entities.Find`2.Skip(System.Int32)
  commentId: M:MongoDB.Entities.Find`2.Skip(System.Int32)
  id: Skip(System.Int32)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Skip(Int32)
  nameWithType: Find<T, TProjection>.Skip(Int32)
  fullName: MongoDB.Entities.Find<T, TProjection>.Skip(System.Int32)
  type: Method
  source:
    id: Skip
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 262
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify how many entities to skip\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Skip(int skipCount)
    parameters:
    - id: skipCount
      type: System.Int32
      description: The number to skip
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function Skip(skipCount As Integer) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Skip*
  nameWithType.vb: Find(Of T, TProjection).Skip(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Skip(System.Int32)
- uid: MongoDB.Entities.Find`2.Limit(System.Int32)
  commentId: M:MongoDB.Entities.Find`2.Limit(System.Int32)
  id: Limit(System.Int32)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Limit(Int32)
  nameWithType: Find<T, TProjection>.Limit(Int32)
  fullName: MongoDB.Entities.Find<T, TProjection>.Limit(System.Int32)
  type: Method
  source:
    id: Limit
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 272
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify how many entities to Take/Limit\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Limit(int takeCount)
    parameters:
    - id: takeCount
      type: System.Int32
      description: The number to limit/take
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function Limit(takeCount As Integer) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Limit*
  nameWithType.vb: Find(Of T, TProjection).Limit(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Limit(System.Int32)
- uid: MongoDB.Entities.Find`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  commentId: M:MongoDB.Entities.Find`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  id: Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Project(Expression<Func<T, TProjection>>)
  nameWithType: Find<T, TProjection>.Project(Expression<Func<T, TProjection>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Project(System.Linq.Expressions.Expression<System.Func<T, TProjection>>)
  type: Method
  source:
    id: Project
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 282
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify how to project the results using a lambda expression\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Project(Expression<Func<T, TProjection>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},{TProjection}}}
      description: x => new Test { PropName = x.Prop }
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function Project(expression As Expression(Of Func(Of T, TProjection))) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Project*
  nameWithType.vb: Find(Of T, TProjection).Project(Expression(Of Func(Of T, TProjection)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Project(System.Linq.Expressions.Expression(Of System.Func(Of T, TProjection)))
  name.vb: Project(Expression(Of Func(Of T, TProjection)))
- uid: MongoDB.Entities.Find`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
  commentId: M:MongoDB.Entities.Find`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
  id: Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>)
  nameWithType: Find<T, TProjection>.Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Project(System.Func<MongoDB.Driver.ProjectionDefinitionBuilder<T>, MongoDB.Driver.ProjectionDefinition<T, TProjection>>)
  type: Method
  source:
    id: Project
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 291
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify how to project the results using a projection expression\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>> projection)
    parameters:
    - id: projection
      type: System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{{T}},MongoDB.Driver.ProjectionDefinition{{T},{TProjection}}}
      description: p => p.Include(&quot;Prop1&quot;).Exclude(&quot;Prop2&quot;)
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function Project(projection As Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection))) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Project*
  nameWithType.vb: Find(Of T, TProjection).Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Project(System.Func(Of MongoDB.Driver.ProjectionDefinitionBuilder(Of T), MongoDB.Driver.ProjectionDefinition(Of T, TProjection)))
  name.vb: Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection)))
- uid: MongoDB.Entities.Find`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Find`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: ProjectExcluding(Expression<Func<T, Object>>)
  nameWithType: Find<T, TProjection>.ProjectExcluding(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.ProjectExcluding(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  type: Method
  source:
    id: ProjectExcluding
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 301
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify how to project the results using an exclusion projection expression.\n"
  example: []
  syntax:
    content: public Find<T, TProjection> ProjectExcluding(Expression<Func<T, object>> exclusion)
    parameters:
    - id: exclusion
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: x => new { x.PropToExclude, x.AnotherPropToExclude }
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function ProjectExcluding(exclusion As Expression(Of Func(Of T, Object))) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.ProjectExcluding*
  nameWithType.vb: Find(Of T, TProjection).ProjectExcluding(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ProjectExcluding(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: ProjectExcluding(Expression(Of Func(Of T, Object)))
- uid: MongoDB.Entities.Find`2.Option(System.Action{MongoDB.Driver.FindOptions{`0,`1}})
  commentId: M:MongoDB.Entities.Find`2.Option(System.Action{MongoDB.Driver.FindOptions{`0,`1}})
  id: Option(System.Action{MongoDB.Driver.FindOptions{`0,`1}})
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: Option(Action<FindOptions<T, TProjection>>)
  nameWithType: Find<T, TProjection>.Option(Action<FindOptions<T, TProjection>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Option(System.Action<MongoDB.Driver.FindOptions<T, TProjection>>)
  type: Method
  source:
    id: Option
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 325
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an option for this find command (use multiple times if needed)\n"
  example: []
  syntax:
    content: public Find<T, TProjection> Option(Action<FindOptions<T, TProjection>> option)
    parameters:
    - id: option
      type: System.Action{MongoDB.Driver.FindOptions{{T},{TProjection}}}
      description: x => x.OptionName = OptionValue
    return:
      type: MongoDB.Entities.Find`2
    content.vb: Public Function Option(option As Action(Of FindOptions(Of T, TProjection))) As Find(Of T, TProjection)
  overload: MongoDB.Entities.Find`2.Option*
  nameWithType.vb: Find(Of T, TProjection).Option(Action(Of FindOptions(Of T, TProjection)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Option(System.Action(Of MongoDB.Driver.FindOptions(Of T, TProjection)))
  name.vb: Option(Action(Of FindOptions(Of T, TProjection)))
- uid: MongoDB.Entities.Find`2.ExecuteAsync(System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ExecuteAsync(System.Threading.CancellationToken)
  id: ExecuteAsync(System.Threading.CancellationToken)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: ExecuteAsync(CancellationToken)
  nameWithType: Find<T, TProjection>.ExecuteAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    id: ExecuteAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 335
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRun the Find command in MongoDB server and get a list of results\n"
  example: []
  syntax:
    content: public Task<List<TProjection>> ExecuteAsync(CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TProjection}}}
    content.vb: Public Function ExecuteAsync(cancellation As CancellationToken = Nothing) As Task(Of List(Of TProjection))
  overload: MongoDB.Entities.Find`2.ExecuteAsync*
  nameWithType.vb: Find(Of T, TProjection).ExecuteAsync(CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteAsync(System.Threading.CancellationToken)
- uid: MongoDB.Entities.Find`2.ExecuteSingleAsync(System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ExecuteSingleAsync(System.Threading.CancellationToken)
  id: ExecuteSingleAsync(System.Threading.CancellationToken)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: ExecuteSingleAsync(CancellationToken)
  nameWithType: Find<T, TProjection>.ExecuteSingleAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteSingleAsync(System.Threading.CancellationToken)
  type: Method
  source:
    id: ExecuteSingleAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 347
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRun the Find command in MongoDB server and get a single result or the default value if not found.\nIf more than one entity is found, it will throw an exception.\n"
  example: []
  syntax:
    content: public Task<TProjection> ExecuteSingleAsync(CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{{TProjection}}
    content.vb: Public Function ExecuteSingleAsync(cancellation As CancellationToken = Nothing) As Task(Of TProjection)
  overload: MongoDB.Entities.Find`2.ExecuteSingleAsync*
  nameWithType.vb: Find(Of T, TProjection).ExecuteSingleAsync(CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteSingleAsync(System.Threading.CancellationToken)
- uid: MongoDB.Entities.Find`2.ExecuteFirstAsync(System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ExecuteFirstAsync(System.Threading.CancellationToken)
  id: ExecuteFirstAsync(System.Threading.CancellationToken)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: ExecuteFirstAsync(CancellationToken)
  nameWithType: Find<T, TProjection>.ExecuteFirstAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteFirstAsync(System.Threading.CancellationToken)
  type: Method
  source:
    id: ExecuteFirstAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 358
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRun the Find command in MongoDB server and get the first result or the default value if not found\n"
  example: []
  syntax:
    content: public Task<TProjection> ExecuteFirstAsync(CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{{TProjection}}
    content.vb: Public Function ExecuteFirstAsync(cancellation As CancellationToken = Nothing) As Task(Of TProjection)
  overload: MongoDB.Entities.Find`2.ExecuteFirstAsync*
  nameWithType.vb: Find(Of T, TProjection).ExecuteFirstAsync(CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteFirstAsync(System.Threading.CancellationToken)
- uid: MongoDB.Entities.Find`2.ExecuteCursorAsync(System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ExecuteCursorAsync(System.Threading.CancellationToken)
  id: ExecuteCursorAsync(System.Threading.CancellationToken)
  parent: MongoDB.Entities.Find`2
  langs:
  - csharp
  - vb
  name: ExecuteCursorAsync(CancellationToken)
  nameWithType: Find<T, TProjection>.ExecuteCursorAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteCursorAsync(System.Threading.CancellationToken)
  type: Method
  source:
    id: ExecuteCursorAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 369
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRun the Find command in MongoDB server and get a cursor instead of materialized results\n"
  example: []
  syntax:
    content: public Task<IAsyncCursor<TProjection>> ExecuteCursorAsync(CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{MongoDB.Driver.IAsyncCursor{{TProjection}}}
    content.vb: Public Function ExecuteCursorAsync(cancellation As CancellationToken = Nothing) As Task(Of IAsyncCursor(Of TProjection))
  overload: MongoDB.Entities.Find`2.ExecuteCursorAsync*
  nameWithType.vb: Find(Of T, TProjection).ExecuteCursorAsync(CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteCursorAsync(System.Threading.CancellationToken)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MongoDB.Entities.Find`2.OneAsync*
  commentId: Overload:MongoDB.Entities.Find`2.OneAsync
  name: OneAsync
  nameWithType: Find<T, TProjection>.OneAsync
  fullName: MongoDB.Entities.Find<T, TProjection>.OneAsync
  nameWithType.vb: Find(Of T, TProjection).OneAsync
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).OneAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TProjection}}
  commentId: T:System.Threading.Tasks.Task{`1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TProjection>
  nameWithType: Task<TProjection>
  fullName: System.Threading.Tasks.Task<TProjection>
  nameWithType.vb: Task(Of TProjection)
  fullName.vb: System.Threading.Tasks.Task(Of TProjection)
  name.vb: Task(Of TProjection)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: MongoDB.Entities.Find`2.ManyAsync*
  commentId: Overload:MongoDB.Entities.Find`2.ManyAsync
  name: ManyAsync
  nameWithType: Find<T, TProjection>.ManyAsync
  fullName: MongoDB.Entities.Find<T, TProjection>.ManyAsync
  nameWithType.vb: Find(Of T, TProjection).ManyAsync
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ManyAsync
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{TProjection}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{`1}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<TProjection>>
  nameWithType: Task<List<TProjection>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<TProjection>>
  nameWithType.vb: Task(Of List(Of TProjection))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of TProjection))
  name.vb: Task(Of List(Of TProjection))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Func{MongoDB.Driver.FilterDefinitionBuilder{{T}},MongoDB.Driver.FilterDefinition{{T}}}
  commentId: T:System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}}
  parent: System
  definition: System.Func`2
  name: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  nameWithType: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  fullName: System.Func<MongoDB.Driver.FilterDefinitionBuilder<T>, MongoDB.Driver.FilterDefinition<T>>
  nameWithType.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  fullName.vb: System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of T), MongoDB.Driver.FilterDefinition(Of T))
  name.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.MatchID*
  commentId: Overload:MongoDB.Entities.Find`2.MatchID
  name: MatchID
  nameWithType: Find<T, TProjection>.MatchID
  fullName: MongoDB.Entities.Find<T, TProjection>.MatchID
  nameWithType.vb: Find(Of T, TProjection).MatchID
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).MatchID
- uid: MongoDB.Entities.Find`2
  commentId: T:MongoDB.Entities.Find`2
  parent: MongoDB.Entities
  name: Find<T, TProjection>
  nameWithType: Find<T, TProjection>
  fullName: MongoDB.Entities.Find<T, TProjection>
  nameWithType.vb: Find(Of T, TProjection)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection)
  name.vb: Find(Of T, TProjection)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Find`2
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Match*
  commentId: Overload:MongoDB.Entities.Find`2.Match
  name: Match
  nameWithType: Find<T, TProjection>.Match
  fullName: MongoDB.Entities.Find<T, TProjection>.Match
  nameWithType.vb: Find(Of T, TProjection).Match
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match
- uid: MongoDB.Entities.Template
  commentId: T:MongoDB.Entities.Template
  parent: MongoDB.Entities
  name: Template
  nameWithType: Template
  fullName: MongoDB.Entities.Template
- uid: MongoDB.Entities.Search
  commentId: T:MongoDB.Entities.Search
  parent: MongoDB.Entities
  name: Search
  nameWithType: Search
  fullName: MongoDB.Entities.Search
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Object}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Object>>
  nameWithType: Expression<Func<T, Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>
  nameWithType.vb: Expression(Of Func(Of T, Object))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))
  name.vb: Expression(Of Func(Of T, Object))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Coordinates2D
  commentId: T:MongoDB.Entities.Coordinates2D
  parent: MongoDB.Entities
  name: Coordinates2D
  nameWithType: Coordinates2D
  fullName: MongoDB.Entities.Coordinates2D
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.MatchString*
  commentId: Overload:MongoDB.Entities.Find`2.MatchString
  name: MatchString
  nameWithType: Find<T, TProjection>.MatchString
  fullName: MongoDB.Entities.Find<T, TProjection>.MatchString
  nameWithType.vb: Find(Of T, TProjection).MatchString
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).MatchString
- uid: MongoDB.Entities.Find`2.MatchExpression*
  commentId: Overload:MongoDB.Entities.Find`2.MatchExpression
  name: MatchExpression
  nameWithType: Find<T, TProjection>.MatchExpression
  fullName: MongoDB.Entities.Find<T, TProjection>.MatchExpression
  nameWithType.vb: Find(Of T, TProjection).MatchExpression
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).MatchExpression
- uid: MongoDB.Entities.Find`2.Sort*
  commentId: Overload:MongoDB.Entities.Find`2.Sort
  name: Sort
  nameWithType: Find<T, TProjection>.Sort
  fullName: MongoDB.Entities.Find<T, TProjection>.Sort
  nameWithType.vb: Find(Of T, TProjection).Sort
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Sort
- uid: MongoDB.Entities.Order
  commentId: T:MongoDB.Entities.Order
  parent: MongoDB.Entities
  name: Order
  nameWithType: Order
  fullName: MongoDB.Entities.Order
- uid: MongoDB.Entities.Find`2.SortByTextScore*
  commentId: Overload:MongoDB.Entities.Find`2.SortByTextScore
  name: SortByTextScore
  nameWithType: Find<T, TProjection>.SortByTextScore
  fullName: MongoDB.Entities.Find<T, TProjection>.SortByTextScore
  nameWithType.vb: Find(Of T, TProjection).SortByTextScore
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).SortByTextScore
- uid: System.Func{MongoDB.Driver.SortDefinitionBuilder{{T}},MongoDB.Driver.SortDefinition{{T}}}
  commentId: T:System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}}
  parent: System
  definition: System.Func`2
  name: Func<SortDefinitionBuilder<T>, SortDefinition<T>>
  nameWithType: Func<SortDefinitionBuilder<T>, SortDefinition<T>>
  fullName: System.Func<MongoDB.Driver.SortDefinitionBuilder<T>, MongoDB.Driver.SortDefinition<T>>
  nameWithType.vb: Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T))
  fullName.vb: System.Func(Of MongoDB.Driver.SortDefinitionBuilder(Of T), MongoDB.Driver.SortDefinition(Of T))
  name.vb: Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: MongoDB.Driver.SortDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.SortDefinition`1
    name: SortDefinition
    nameWithType: SortDefinition
    fullName: MongoDB.Driver.SortDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: MongoDB.Driver.SortDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.SortDefinition`1
    name: SortDefinition
    nameWithType: SortDefinition
    fullName: MongoDB.Driver.SortDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Skip*
  commentId: Overload:MongoDB.Entities.Find`2.Skip
  name: Skip
  nameWithType: Find<T, TProjection>.Skip
  fullName: MongoDB.Entities.Find<T, TProjection>.Skip
  nameWithType.vb: Find(Of T, TProjection).Skip
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Skip
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MongoDB.Entities.Find`2.Limit*
  commentId: Overload:MongoDB.Entities.Find`2.Limit
  name: Limit
  nameWithType: Find<T, TProjection>.Limit
  fullName: MongoDB.Entities.Find<T, TProjection>.Limit
  nameWithType.vb: Find(Of T, TProjection).Limit
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Limit
- uid: MongoDB.Entities.Find`2.Project*
  commentId: Overload:MongoDB.Entities.Find`2.Project
  name: Project
  nameWithType: Find<T, TProjection>.Project
  fullName: MongoDB.Entities.Find<T, TProjection>.Project
  nameWithType.vb: Find(Of T, TProjection).Project
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Project
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TProjection}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TProjection>>
  nameWithType: Expression<Func<T, TProjection>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TProjection>>
  nameWithType.vb: Expression(Of Func(Of T, TProjection))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TProjection))
  name.vb: Expression(Of Func(Of T, TProjection))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{{T}},MongoDB.Driver.ProjectionDefinition{{T},{TProjection}}}
  commentId: T:System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}}
  parent: System
  definition: System.Func`2
  name: Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>
  nameWithType: Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>
  fullName: System.Func<MongoDB.Driver.ProjectionDefinitionBuilder<T>, MongoDB.Driver.ProjectionDefinition<T, TProjection>>
  nameWithType.vb: Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection))
  fullName.vb: System.Func(Of MongoDB.Driver.ProjectionDefinitionBuilder(Of T), MongoDB.Driver.ProjectionDefinition(Of T, TProjection))
  name.vb: Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: MongoDB.Driver.ProjectionDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: MongoDB.Driver.ProjectionDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: MongoDB.Driver.ProjectionDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: MongoDB.Driver.ProjectionDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.ProjectExcluding*
  commentId: Overload:MongoDB.Entities.Find`2.ProjectExcluding
  name: ProjectExcluding
  nameWithType: Find<T, TProjection>.ProjectExcluding
  fullName: MongoDB.Entities.Find<T, TProjection>.ProjectExcluding
  nameWithType.vb: Find(Of T, TProjection).ProjectExcluding
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ProjectExcluding
- uid: MongoDB.Entities.Find`2.Option*
  commentId: Overload:MongoDB.Entities.Find`2.Option
  name: Option
  nameWithType: Find<T, TProjection>.Option
  fullName: MongoDB.Entities.Find<T, TProjection>.Option
  nameWithType.vb: Find(Of T, TProjection).Option
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Option
- uid: System.Action{MongoDB.Driver.FindOptions{{T},{TProjection}}}
  commentId: T:System.Action{MongoDB.Driver.FindOptions{`0,`1}}
  parent: System
  definition: System.Action`1
  name: Action<FindOptions<T, TProjection>>
  nameWithType: Action<FindOptions<T, TProjection>>
  fullName: System.Action<MongoDB.Driver.FindOptions<T, TProjection>>
  nameWithType.vb: Action(Of FindOptions(Of T, TProjection))
  fullName.vb: System.Action(Of MongoDB.Driver.FindOptions(Of T, TProjection))
  name.vb: Action(Of FindOptions(Of T, TProjection))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.FindOptions`2
    name: FindOptions
    nameWithType: FindOptions
    fullName: MongoDB.Driver.FindOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.FindOptions`2
    name: FindOptions
    nameWithType: FindOptions
    fullName: MongoDB.Driver.FindOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.ExecuteAsync*
  commentId: Overload:MongoDB.Entities.Find`2.ExecuteAsync
  name: ExecuteAsync
  nameWithType: Find<T, TProjection>.ExecuteAsync
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteAsync
  nameWithType.vb: Find(Of T, TProjection).ExecuteAsync
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteAsync
- uid: MongoDB.Entities.Find`2.ExecuteSingleAsync*
  commentId: Overload:MongoDB.Entities.Find`2.ExecuteSingleAsync
  name: ExecuteSingleAsync
  nameWithType: Find<T, TProjection>.ExecuteSingleAsync
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteSingleAsync
  nameWithType.vb: Find(Of T, TProjection).ExecuteSingleAsync
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteSingleAsync
- uid: MongoDB.Entities.Find`2.ExecuteFirstAsync*
  commentId: Overload:MongoDB.Entities.Find`2.ExecuteFirstAsync
  name: ExecuteFirstAsync
  nameWithType: Find<T, TProjection>.ExecuteFirstAsync
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteFirstAsync
  nameWithType.vb: Find(Of T, TProjection).ExecuteFirstAsync
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteFirstAsync
- uid: MongoDB.Entities.Find`2.ExecuteCursorAsync*
  commentId: Overload:MongoDB.Entities.Find`2.ExecuteCursorAsync
  name: ExecuteCursorAsync
  nameWithType: Find<T, TProjection>.ExecuteCursorAsync
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteCursorAsync
  nameWithType.vb: Find(Of T, TProjection).ExecuteCursorAsync
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteCursorAsync
- uid: System.Threading.Tasks.Task{MongoDB.Driver.IAsyncCursor{{TProjection}}}
  commentId: T:System.Threading.Tasks.Task{MongoDB.Driver.IAsyncCursor{`1}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IAsyncCursor<TProjection>>
  nameWithType: Task<IAsyncCursor<TProjection>>
  fullName: System.Threading.Tasks.Task<MongoDB.Driver.IAsyncCursor<TProjection>>
  nameWithType.vb: Task(Of IAsyncCursor(Of TProjection))
  fullName.vb: System.Threading.Tasks.Task(Of MongoDB.Driver.IAsyncCursor(Of TProjection))
  name.vb: Task(Of IAsyncCursor(Of TProjection))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.IAsyncCursor`1
    name: IAsyncCursor
    nameWithType: IAsyncCursor
    fullName: MongoDB.Driver.IAsyncCursor
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.IAsyncCursor`1
    name: IAsyncCursor
    nameWithType: IAsyncCursor
    fullName: MongoDB.Driver.IAsyncCursor
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
