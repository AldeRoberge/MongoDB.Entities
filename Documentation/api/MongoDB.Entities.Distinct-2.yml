### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.Distinct`2
  commentId: T:MongoDB.Entities.Distinct`2
  id: Distinct`2
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.Distinct`2.ExecuteAsync(System.Threading.CancellationToken)
  - MongoDB.Entities.Distinct`2.ExecuteCursorAsync(System.Threading.CancellationToken)
  - MongoDB.Entities.Distinct`2.IgnoreGlobalFilters
  - MongoDB.Entities.Distinct`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  - MongoDB.Entities.Distinct`2.Match(MongoDB.Entities.Template)
  - MongoDB.Entities.Distinct`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  - MongoDB.Entities.Distinct`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - MongoDB.Entities.Distinct`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  - MongoDB.Entities.Distinct`2.MatchExpression(MongoDB.Entities.Template)
  - MongoDB.Entities.Distinct`2.MatchExpression(System.String)
  - MongoDB.Entities.Distinct`2.MatchString(System.String)
  - MongoDB.Entities.Distinct`2.Option(System.Action{MongoDB.Driver.DistinctOptions})
  - MongoDB.Entities.Distinct`2.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  - MongoDB.Entities.Distinct`2.Property(System.String)
  langs:
  - csharp
  - vb
  name: Distinct<T, TProperty>
  nameWithType: Distinct<T, TProperty>
  fullName: MongoDB.Entities.Distinct<T, TProperty>
  type: Class
  source:
    id: Distinct
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 14
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents a MongoDB Distinct command where you can get back distinct values for a given property of a given Entity.\n"
  example: []
  syntax:
    content: >-
      public class Distinct<T, TProperty>
          where T : IEntity
    typeParameters:
    - id: T
      description: Any Entity that implements IEntity interface
    - id: TProperty
      description: The type of the property of the entity you&apos;d like to get unique values for
    content.vb: Public Class Distinct(Of T As IEntity, TProperty)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Distinct(Of T, TProperty)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty)
  name.vb: Distinct(Of T, TProperty)
- uid: MongoDB.Entities.Distinct`2.Property(System.String)
  commentId: M:MongoDB.Entities.Distinct`2.Property(System.String)
  id: Property(System.String)
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: Property(String)
  nameWithType: Distinct<T, TProperty>.Property(String)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.Property(System.String)
  type: Method
  source:
    id: Property
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 35
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the property you want to get the unique values for (as a string path)\n"
  example: []
  syntax:
    content: public Distinct<T, TProperty> Property(string property)
    parameters:
    - id: property
      type: System.String
      description: 'ex: &quot;Address.Street&quot;'
    return:
      type: MongoDB.Entities.Distinct`2
    content.vb: Public Function Property(property As String) As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.Distinct`2.Property*
  nameWithType.vb: Distinct(Of T, TProperty).Property(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).Property(System.String)
- uid: MongoDB.Entities.Distinct`2.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Distinct`2.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: Property(Expression<Func<T, Object>>)
  nameWithType: Distinct<T, TProperty>.Property(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.Property(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  type: Method
  source:
    id: Property
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 45
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the property you want to get the unique values for (as a member expression)\n"
  example: []
  syntax:
    content: public Distinct<T, TProperty> Property(Expression<Func<T, object>> property)
    parameters:
    - id: property
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: x => x.Address.Street
    return:
      type: MongoDB.Entities.Distinct`2
    content.vb: Public Function Property(property As Expression(Of Func(Of T, Object))) As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.Distinct`2.Property*
  nameWithType.vb: Distinct(Of T, TProperty).Property(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).Property(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: Property(Expression(Of Func(Of T, Object)))
- uid: MongoDB.Entities.Distinct`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  commentId: M:MongoDB.Entities.Distinct`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  id: Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  nameWithType: Distinct<T, TProperty>.Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.Match(System.Func<MongoDB.Driver.FilterDefinitionBuilder<T>, MongoDB.Driver.FilterDefinition<T>>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 55
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a filter expression\n"
  example: []
  syntax:
    content: public Distinct<T, TProperty> Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter)
    parameters:
    - id: filter
      type: System.Func{MongoDB.Driver.FilterDefinitionBuilder{{T}},MongoDB.Driver.FilterDefinition{{T}}}
      description: f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)
    return:
      type: MongoDB.Entities.Distinct`2
    content.vb: Public Function Match(filter As Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))) As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.Distinct`2.Match*
  nameWithType.vb: Distinct(Of T, TProperty).Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).Match(System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of T), MongoDB.Driver.FilterDefinition(Of T)))
  name.vb: Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
- uid: MongoDB.Entities.Distinct`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:MongoDB.Entities.Distinct`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: Match(Expression<Func<T, Boolean>>)
  nameWithType: Distinct<T, TProperty>.Match(Expression<Func<T, Boolean>>)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.Match(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 65
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a lambda expression\n"
  example: []
  syntax:
    content: public Distinct<T, TProperty> Match(Expression<Func<T, bool>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: x => x.Property == Value
    return:
      type: MongoDB.Entities.Distinct`2
    content.vb: Public Function Match(expression As Expression(Of Func(Of T, Boolean))) As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.Distinct`2.Match*
  nameWithType.vb: Distinct(Of T, TProperty).Match(Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).Match(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Match(Expression(Of Func(Of T, Boolean)))
- uid: MongoDB.Entities.Distinct`2.Match(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Distinct`2.Match(MongoDB.Entities.Template)
  id: Match(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: Match(Template)
  nameWithType: Distinct<T, TProperty>.Match(Template)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.Match(MongoDB.Entities.Template)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 74
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a template\n"
  example: []
  syntax:
    content: public Distinct<T, TProperty> Match(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: A Template with a find query
    return:
      type: MongoDB.Entities.Distinct`2
    content.vb: Public Function Match(template As Template) As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.Distinct`2.Match*
  nameWithType.vb: Distinct(Of T, TProperty).Match(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).Match(MongoDB.Entities.Template)
- uid: MongoDB.Entities.Distinct`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  commentId: M:MongoDB.Entities.Distinct`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  id: Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: Match(Search, String, Boolean, Boolean, String)
  nameWithType: Distinct<T, TProperty>.Match(Search, String, Boolean, Boolean, String)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 89
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify a search term to find results from the text index of this particular collection.\n<p>TIP: Make sure to define a text index with DB.Index&lt;T>() before searching</p>\n"
  example: []
  syntax:
    content: public Distinct<T, TProperty> Match(Search searchType, string searchTerm, bool caseSensitive = false, bool diacriticSensitive = false, string language = null)
    parameters:
    - id: searchType
      type: MongoDB.Entities.Search
      description: The type of text matching to do
    - id: searchTerm
      type: System.String
      description: The search term
    - id: caseSensitive
      type: System.Boolean
      description: Case sensitivity of the search (optional)
    - id: diacriticSensitive
      type: System.Boolean
      description: Diacritic sensitivity of the search (optional)
    - id: language
      type: System.String
      description: The language for the search (optional)
    return:
      type: MongoDB.Entities.Distinct`2
    content.vb: Public Function Match(searchType As Search, searchTerm As String, caseSensitive As Boolean = False, diacriticSensitive As Boolean = False, language As String = Nothing) As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.Distinct`2.Match*
  nameWithType.vb: Distinct(Of T, TProperty).Match(Search, String, Boolean, Boolean, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
- uid: MongoDB.Entities.Distinct`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  commentId: M:MongoDB.Entities.Distinct`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  id: Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  nameWithType: Distinct<T, TProperty>.Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.Match(System.Linq.Expressions.Expression<System.Func<T, System.Object>>, MongoDB.Entities.Coordinates2D, System.Nullable<System.Double>, System.Nullable<System.Double>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 119
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify criteria for matching entities based on GeoSpatial data (longitude &amp; latitude)\n<p>TIP: Make sure to define a Geo2DSphere index with DB.Index&lt;T>() before searching</p>\n<p>Note: DB.FluentGeoNear() supports more advanced options</p>\n"
  example: []
  syntax:
    content: public Distinct<T, TProperty> Match(Expression<Func<T, object>> coordinatesProperty, Coordinates2D nearCoordinates, double? maxDistance = default(double? ), double? minDistance = default(double? ))
    parameters:
    - id: coordinatesProperty
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: The property where 2DCoordinates are stored
    - id: nearCoordinates
      type: MongoDB.Entities.Coordinates2D
      description: The search point
    - id: maxDistance
      type: System.Nullable{System.Double}
      description: Maximum distance in meters from the search point
    - id: minDistance
      type: System.Nullable{System.Double}
      description: Minimum distance in meters from the search point
    return:
      type: MongoDB.Entities.Distinct`2
    content.vb: Public Function Match(coordinatesProperty As Expression(Of Func(Of T, Object)), nearCoordinates As Coordinates2D, maxDistance As Double? = Nothing, minDistance As Double? = Nothing) As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.Distinct`2.Match*
  nameWithType.vb: Distinct(Of T, TProperty).Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).Match(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), MongoDB.Entities.Coordinates2D, System.Nullable(Of System.Double), System.Nullable(Of System.Double))
  name.vb: Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
- uid: MongoDB.Entities.Distinct`2.MatchString(System.String)
  commentId: M:MongoDB.Entities.Distinct`2.MatchString(System.String)
  id: MatchString(System.String)
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: MatchString(String)
  nameWithType: Distinct<T, TProperty>.MatchString(String)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.MatchString(System.String)
  type: Method
  source:
    id: MatchString
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 128
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a JSON string\n"
  example: []
  syntax:
    content: public Distinct<T, TProperty> MatchString(string jsonString)
    parameters:
    - id: jsonString
      type: System.String
      description: '{ Title : &apos;The Power Of Now&apos; }'
    return:
      type: MongoDB.Entities.Distinct`2
    content.vb: Public Function MatchString(jsonString As String) As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.Distinct`2.MatchString*
  nameWithType.vb: Distinct(Of T, TProperty).MatchString(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).MatchString(System.String)
- uid: MongoDB.Entities.Distinct`2.MatchExpression(System.String)
  commentId: M:MongoDB.Entities.Distinct`2.MatchExpression(System.String)
  id: MatchExpression(System.String)
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: MatchExpression(String)
  nameWithType: Distinct<T, TProperty>.MatchExpression(String)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.MatchExpression(System.String)
  type: Method
  source:
    id: MatchExpression
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 138
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with an aggregation expression (i.e. $expr)\n"
  example: []
  syntax:
    content: public Distinct<T, TProperty> MatchExpression(string expression)
    parameters:
    - id: expression
      type: System.String
      description: '{ $gt: [&apos;$Property1&apos;, &apos;$Property2&apos;] }'
    return:
      type: MongoDB.Entities.Distinct`2
    content.vb: Public Function MatchExpression(expression As String) As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.Distinct`2.MatchExpression*
  nameWithType.vb: Distinct(Of T, TProperty).MatchExpression(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).MatchExpression(System.String)
- uid: MongoDB.Entities.Distinct`2.MatchExpression(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Distinct`2.MatchExpression(MongoDB.Entities.Template)
  id: MatchExpression(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: MatchExpression(Template)
  nameWithType: Distinct<T, TProperty>.MatchExpression(Template)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.MatchExpression(MongoDB.Entities.Template)
  type: Method
  source:
    id: MatchExpression
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 148
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a Template\n"
  example: []
  syntax:
    content: public Distinct<T, TProperty> MatchExpression(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: A Template object
    return:
      type: MongoDB.Entities.Distinct`2
    content.vb: Public Function MatchExpression(template As Template) As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.Distinct`2.MatchExpression*
  nameWithType.vb: Distinct(Of T, TProperty).MatchExpression(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).MatchExpression(MongoDB.Entities.Template)
- uid: MongoDB.Entities.Distinct`2.Option(System.Action{MongoDB.Driver.DistinctOptions})
  commentId: M:MongoDB.Entities.Distinct`2.Option(System.Action{MongoDB.Driver.DistinctOptions})
  id: Option(System.Action{MongoDB.Driver.DistinctOptions})
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: Option(Action<DistinctOptions>)
  nameWithType: Distinct<T, TProperty>.Option(Action<DistinctOptions>)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.Option(System.Action<MongoDB.Driver.DistinctOptions>)
  type: Method
  source:
    id: Option
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 158
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an option for this find command (use multiple times if needed)\n"
  example: []
  syntax:
    content: public Distinct<T, TProperty> Option(Action<DistinctOptions> option)
    parameters:
    - id: option
      type: System.Action{MongoDB.Driver.DistinctOptions}
      description: x => x.OptionName = OptionValue
    return:
      type: MongoDB.Entities.Distinct`2
    content.vb: Public Function Option(option As Action(Of DistinctOptions)) As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.Distinct`2.Option*
  nameWithType.vb: Distinct(Of T, TProperty).Option(Action(Of DistinctOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).Option(System.Action(Of MongoDB.Driver.DistinctOptions))
  name.vb: Option(Action(Of DistinctOptions))
- uid: MongoDB.Entities.Distinct`2.IgnoreGlobalFilters
  commentId: M:MongoDB.Entities.Distinct`2.IgnoreGlobalFilters
  id: IgnoreGlobalFilters
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: IgnoreGlobalFilters()
  nameWithType: Distinct<T, TProperty>.IgnoreGlobalFilters()
  fullName: MongoDB.Entities.Distinct<T, TProperty>.IgnoreGlobalFilters()
  type: Method
  source:
    id: IgnoreGlobalFilters
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 167
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify that this operation should ignore any global filters\n"
  example: []
  syntax:
    content: public Distinct<T, TProperty> IgnoreGlobalFilters()
    return:
      type: MongoDB.Entities.Distinct`2
    content.vb: Public Function IgnoreGlobalFilters As Distinct(Of T, TProperty)
  overload: MongoDB.Entities.Distinct`2.IgnoreGlobalFilters*
  nameWithType.vb: Distinct(Of T, TProperty).IgnoreGlobalFilters()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).IgnoreGlobalFilters()
- uid: MongoDB.Entities.Distinct`2.ExecuteCursorAsync(System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Distinct`2.ExecuteCursorAsync(System.Threading.CancellationToken)
  id: ExecuteCursorAsync(System.Threading.CancellationToken)
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: ExecuteCursorAsync(CancellationToken)
  nameWithType: Distinct<T, TProperty>.ExecuteCursorAsync(CancellationToken)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.ExecuteCursorAsync(System.Threading.CancellationToken)
  type: Method
  source:
    id: ExecuteCursorAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 177
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRun the Distinct command in MongoDB server and get a cursor instead of materialized results\n"
  example: []
  syntax:
    content: public Task<IAsyncCursor<TProperty>> ExecuteCursorAsync(CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{MongoDB.Driver.IAsyncCursor{{TProperty}}}
    content.vb: Public Function ExecuteCursorAsync(cancellation As CancellationToken = Nothing) As Task(Of IAsyncCursor(Of TProperty))
  overload: MongoDB.Entities.Distinct`2.ExecuteCursorAsync*
  nameWithType.vb: Distinct(Of T, TProperty).ExecuteCursorAsync(CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).ExecuteCursorAsync(System.Threading.CancellationToken)
- uid: MongoDB.Entities.Distinct`2.ExecuteAsync(System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.Distinct`2.ExecuteAsync(System.Threading.CancellationToken)
  id: ExecuteAsync(System.Threading.CancellationToken)
  parent: MongoDB.Entities.Distinct`2
  langs:
  - csharp
  - vb
  name: ExecuteAsync(CancellationToken)
  nameWithType: Distinct<T, TProperty>.ExecuteAsync(CancellationToken)
  fullName: MongoDB.Entities.Distinct<T, TProperty>.ExecuteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    id: ExecuteAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Distinct.cs
    startLine: 193
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRun the Distinct command in MongoDB server and get a list of unique property values\n"
  example: []
  syntax:
    content: public Task<List<TProperty>> ExecuteAsync(CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TProperty}}}
    content.vb: Public Function ExecuteAsync(cancellation As CancellationToken = Nothing) As Task(Of List(Of TProperty))
  overload: MongoDB.Entities.Distinct`2.ExecuteAsync*
  nameWithType.vb: Distinct(Of T, TProperty).ExecuteAsync(CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).ExecuteAsync(System.Threading.CancellationToken)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MongoDB.Entities.Distinct`2.Property*
  commentId: Overload:MongoDB.Entities.Distinct`2.Property
  name: Property
  nameWithType: Distinct<T, TProperty>.Property
  fullName: MongoDB.Entities.Distinct<T, TProperty>.Property
  nameWithType.vb: Distinct(Of T, TProperty).Property
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).Property
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MongoDB.Entities.Distinct`2
  commentId: T:MongoDB.Entities.Distinct`2
  parent: MongoDB.Entities
  name: Distinct<T, TProperty>
  nameWithType: Distinct<T, TProperty>
  fullName: MongoDB.Entities.Distinct<T, TProperty>
  nameWithType.vb: Distinct(Of T, TProperty)
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty)
  name.vb: Distinct(Of T, TProperty)
  spec.csharp:
  - uid: MongoDB.Entities.Distinct`2
    name: Distinct
    nameWithType: Distinct
    fullName: MongoDB.Entities.Distinct
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Distinct`2
    name: Distinct
    nameWithType: Distinct
    fullName: MongoDB.Entities.Distinct
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Object}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Object>>
  nameWithType: Expression<Func<T, Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>
  nameWithType.vb: Expression(Of Func(Of T, Object))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))
  name.vb: Expression(Of Func(Of T, Object))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: MongoDB.Entities.Distinct`2.Match*
  commentId: Overload:MongoDB.Entities.Distinct`2.Match
  name: Match
  nameWithType: Distinct<T, TProperty>.Match
  fullName: MongoDB.Entities.Distinct<T, TProperty>.Match
  nameWithType.vb: Distinct(Of T, TProperty).Match
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).Match
- uid: System.Func{MongoDB.Driver.FilterDefinitionBuilder{{T}},MongoDB.Driver.FilterDefinition{{T}}}
  commentId: T:System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}}
  parent: System
  definition: System.Func`2
  name: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  nameWithType: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  fullName: System.Func<MongoDB.Driver.FilterDefinitionBuilder<T>, MongoDB.Driver.FilterDefinition<T>>
  nameWithType.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  fullName.vb: System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of T), MongoDB.Driver.FilterDefinition(Of T))
  name.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Template
  commentId: T:MongoDB.Entities.Template
  parent: MongoDB.Entities
  name: Template
  nameWithType: Template
  fullName: MongoDB.Entities.Template
- uid: MongoDB.Entities.Search
  commentId: T:MongoDB.Entities.Search
  parent: MongoDB.Entities
  name: Search
  nameWithType: Search
  fullName: MongoDB.Entities.Search
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MongoDB.Entities.Coordinates2D
  commentId: T:MongoDB.Entities.Coordinates2D
  parent: MongoDB.Entities
  name: Coordinates2D
  nameWithType: Coordinates2D
  fullName: MongoDB.Entities.Coordinates2D
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Distinct`2.MatchString*
  commentId: Overload:MongoDB.Entities.Distinct`2.MatchString
  name: MatchString
  nameWithType: Distinct<T, TProperty>.MatchString
  fullName: MongoDB.Entities.Distinct<T, TProperty>.MatchString
  nameWithType.vb: Distinct(Of T, TProperty).MatchString
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).MatchString
- uid: MongoDB.Entities.Distinct`2.MatchExpression*
  commentId: Overload:MongoDB.Entities.Distinct`2.MatchExpression
  name: MatchExpression
  nameWithType: Distinct<T, TProperty>.MatchExpression
  fullName: MongoDB.Entities.Distinct<T, TProperty>.MatchExpression
  nameWithType.vb: Distinct(Of T, TProperty).MatchExpression
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).MatchExpression
- uid: MongoDB.Entities.Distinct`2.Option*
  commentId: Overload:MongoDB.Entities.Distinct`2.Option
  name: Option
  nameWithType: Distinct<T, TProperty>.Option
  fullName: MongoDB.Entities.Distinct<T, TProperty>.Option
  nameWithType.vb: Distinct(Of T, TProperty).Option
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).Option
- uid: System.Action{MongoDB.Driver.DistinctOptions}
  commentId: T:System.Action{MongoDB.Driver.DistinctOptions}
  parent: System
  definition: System.Action`1
  name: Action<DistinctOptions>
  nameWithType: Action<DistinctOptions>
  fullName: System.Action<MongoDB.Driver.DistinctOptions>
  nameWithType.vb: Action(Of DistinctOptions)
  fullName.vb: System.Action(Of MongoDB.Driver.DistinctOptions)
  name.vb: Action(Of DistinctOptions)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.DistinctOptions
    name: DistinctOptions
    nameWithType: DistinctOptions
    fullName: MongoDB.Driver.DistinctOptions
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.DistinctOptions
    name: DistinctOptions
    nameWithType: DistinctOptions
    fullName: MongoDB.Driver.DistinctOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Distinct`2.IgnoreGlobalFilters*
  commentId: Overload:MongoDB.Entities.Distinct`2.IgnoreGlobalFilters
  name: IgnoreGlobalFilters
  nameWithType: Distinct<T, TProperty>.IgnoreGlobalFilters
  fullName: MongoDB.Entities.Distinct<T, TProperty>.IgnoreGlobalFilters
  nameWithType.vb: Distinct(Of T, TProperty).IgnoreGlobalFilters
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).IgnoreGlobalFilters
- uid: MongoDB.Entities.Distinct`2.ExecuteCursorAsync*
  commentId: Overload:MongoDB.Entities.Distinct`2.ExecuteCursorAsync
  name: ExecuteCursorAsync
  nameWithType: Distinct<T, TProperty>.ExecuteCursorAsync
  fullName: MongoDB.Entities.Distinct<T, TProperty>.ExecuteCursorAsync
  nameWithType.vb: Distinct(Of T, TProperty).ExecuteCursorAsync
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).ExecuteCursorAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{MongoDB.Driver.IAsyncCursor{{TProperty}}}
  commentId: T:System.Threading.Tasks.Task{MongoDB.Driver.IAsyncCursor{`1}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IAsyncCursor<TProperty>>
  nameWithType: Task<IAsyncCursor<TProperty>>
  fullName: System.Threading.Tasks.Task<MongoDB.Driver.IAsyncCursor<TProperty>>
  nameWithType.vb: Task(Of IAsyncCursor(Of TProperty))
  fullName.vb: System.Threading.Tasks.Task(Of MongoDB.Driver.IAsyncCursor(Of TProperty))
  name.vb: Task(Of IAsyncCursor(Of TProperty))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.IAsyncCursor`1
    name: IAsyncCursor
    nameWithType: IAsyncCursor
    fullName: MongoDB.Driver.IAsyncCursor
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.IAsyncCursor`1
    name: IAsyncCursor
    nameWithType: IAsyncCursor
    fullName: MongoDB.Driver.IAsyncCursor
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: MongoDB.Entities.Distinct`2.ExecuteAsync*
  commentId: Overload:MongoDB.Entities.Distinct`2.ExecuteAsync
  name: ExecuteAsync
  nameWithType: Distinct<T, TProperty>.ExecuteAsync
  fullName: MongoDB.Entities.Distinct<T, TProperty>.ExecuteAsync
  nameWithType.vb: Distinct(Of T, TProperty).ExecuteAsync
  fullName.vb: MongoDB.Entities.Distinct(Of T, TProperty).ExecuteAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{TProperty}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{`1}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<TProperty>>
  nameWithType: Task<List<TProperty>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<TProperty>>
  nameWithType.vb: Task(Of List(Of TProperty))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of TProperty))
  name.vb: Task(Of List(Of TProperty))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
