### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.PagedSearch`1
  commentId: T:MongoDB.Entities.PagedSearch`1
  id: PagedSearch`1
  parent: MongoDB.Entities
  children: []
  langs:
  - csharp
  - vb
  name: PagedSearch<T>
  nameWithType: PagedSearch<T>
  fullName: MongoDB.Entities.PagedSearch<T>
  type: Class
  source:
    id: PagedSearch
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 16
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents an aggregation query that retrieves results with easy paging support.\n"
  example: []
  syntax:
    content: 'public class PagedSearch<T> : PagedSearch<T, T> where T : IEntity'
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    content.vb: >-
      Public Class PagedSearch(Of T As IEntity)

          Inherits PagedSearch(Of T, T)
  inheritance:
  - System.Object
  - MongoDB.Entities.PagedSearch{{T},{T}}
  inheritedMembers:
  - MongoDB.Entities.PagedSearch{{T},{T}}.WithFluent``1({TFluent})
  - MongoDB.Entities.PagedSearch{{T},{T}}.Match(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  - MongoDB.Entities.PagedSearch{{T},{T}}.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{{T}},MongoDB.Driver.FilterDefinition{{T}}})
  - MongoDB.Entities.PagedSearch{{T},{T}}.Match(MongoDB.Driver.FilterDefinition{{T}})
  - MongoDB.Entities.PagedSearch{{T},{T}}.Match(MongoDB.Entities.Template)
  - MongoDB.Entities.PagedSearch{{T},{T}}.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  - MongoDB.Entities.PagedSearch{{T},{T}}.Match(System.Linq.Expressions.Expression{System.Func{{T},System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  - MongoDB.Entities.PagedSearch{{T},{T}}.MatchString(System.String)
  - MongoDB.Entities.PagedSearch{{T},{T}}.MatchExpression(System.String)
  - MongoDB.Entities.PagedSearch{{T},{T}}.MatchExpression(MongoDB.Entities.Template)
  - MongoDB.Entities.PagedSearch{{T},{T}}.Sort(System.Linq.Expressions.Expression{System.Func{{T},System.Object}},MongoDB.Entities.Order)
  - MongoDB.Entities.PagedSearch{{T},{T}}.SortByTextScore
  - MongoDB.Entities.PagedSearch{{T},{T}}.SortByTextScore(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.PagedSearch{{T},{T}}.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{{T}},MongoDB.Driver.SortDefinition{{T}}})
  - MongoDB.Entities.PagedSearch{{T},{T}}.PageNumber(System.Int32)
  - MongoDB.Entities.PagedSearch{{T},{T}}.PageSize(System.Int32)
  - MongoDB.Entities.PagedSearch{{T},{T}}.Project(System.Linq.Expressions.Expression{System.Func{{T},{T}}})
  - MongoDB.Entities.PagedSearch{{T},{T}}.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{{T}},MongoDB.Driver.ProjectionDefinition{{T},{T}}})
  - MongoDB.Entities.PagedSearch{{T},{T}}.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  - MongoDB.Entities.PagedSearch{{T},{T}}.Option(System.Action{MongoDB.Driver.AggregateOptions})
  - MongoDB.Entities.PagedSearch{{T},{T}}.IgnoreGlobalFilters
  - MongoDB.Entities.PagedSearch{{T},{T}}.ExecuteAsync(System.Threading.CancellationToken)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: PagedSearch(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MongoDB.Entities.PagedSearch(Of T)
  name.vb: PagedSearch(Of T)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MongoDB.Entities.PagedSearch{{T},{T}}
  commentId: T:MongoDB.Entities.PagedSearch{`0,`0}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.PagedSearch`2
  name: PagedSearch<T, T>
  nameWithType: PagedSearch<T, T>
  fullName: MongoDB.Entities.PagedSearch<T, T>
  nameWithType.vb: PagedSearch(Of T, T)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T)
  name.vb: PagedSearch(Of T, T)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2
    name: PagedSearch
    nameWithType: PagedSearch
    fullName: MongoDB.Entities.PagedSearch
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2
    name: PagedSearch
    nameWithType: PagedSearch
    fullName: MongoDB.Entities.PagedSearch
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.WithFluent``1({TFluent})
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.WithFluent``1(``0)
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.WithFluent``1(``0)
  name: WithFluent<TFluent>(TFluent)
  nameWithType: PagedSearch<T, T>.WithFluent<TFluent>(TFluent)
  fullName: MongoDB.Entities.PagedSearch<T, T>.WithFluent<TFluent>(TFluent)
  nameWithType.vb: PagedSearch(Of T, T).WithFluent(Of TFluent)(TFluent)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).WithFluent(Of TFluent)(TFluent)
  name.vb: WithFluent(Of TFluent)(TFluent)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.WithFluent``1(``0)
    name: WithFluent<TFluent>
    nameWithType: PagedSearch<T, T>.WithFluent<TFluent>
    fullName: MongoDB.Entities.PagedSearch<T, T>.WithFluent<TFluent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TFluent
    nameWithType: TFluent
    fullName: TFluent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.WithFluent``1(``0)
    name: WithFluent(Of TFluent)
    nameWithType: PagedSearch(Of T, T).WithFluent(Of TFluent)
    fullName: MongoDB.Entities.PagedSearch(Of T, T).WithFluent(Of TFluent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TFluent
    nameWithType: TFluent
    fullName: TFluent
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.Match(System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}})
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  name: Match(Expression<Func<T, Boolean>>)
  nameWithType: PagedSearch<T, T>.Match(Expression<Func<T, Boolean>>)
  fullName: MongoDB.Entities.PagedSearch<T, T>.Match(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: PagedSearch(Of T, T).Match(Expression(Of Func(Of T, Boolean)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).Match(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Match(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Match
    nameWithType: PagedSearch<T, T>.Match
    fullName: MongoDB.Entities.PagedSearch<T, T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Match
    nameWithType: PagedSearch(Of T, T).Match
    fullName: MongoDB.Entities.PagedSearch(Of T, T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{{T}},MongoDB.Driver.FilterDefinition{{T}}})
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  name: Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  nameWithType: PagedSearch<T, T>.Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  fullName: MongoDB.Entities.PagedSearch<T, T>.Match(System.Func<MongoDB.Driver.FilterDefinitionBuilder<T>, MongoDB.Driver.FilterDefinition<T>>)
  nameWithType.vb: PagedSearch(Of T, T).Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).Match(System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of T), MongoDB.Driver.FilterDefinition(Of T)))
  name.vb: Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
    name: Match
    nameWithType: PagedSearch<T, T>.Match
    fullName: MongoDB.Entities.PagedSearch<T, T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
    name: Match
    nameWithType: PagedSearch(Of T, T).Match
    fullName: MongoDB.Entities.PagedSearch(Of T, T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.Match(MongoDB.Driver.FilterDefinition{{T}})
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.Match(MongoDB.Driver.FilterDefinition{`0})
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Driver.FilterDefinition{`0})
  name: Match(FilterDefinition<T>)
  nameWithType: PagedSearch<T, T>.Match(FilterDefinition<T>)
  fullName: MongoDB.Entities.PagedSearch<T, T>.Match(MongoDB.Driver.FilterDefinition<T>)
  nameWithType.vb: PagedSearch(Of T, T).Match(FilterDefinition(Of T))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).Match(MongoDB.Driver.FilterDefinition(Of T))
  name.vb: Match(FilterDefinition(Of T))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Driver.FilterDefinition{`0})
    name: Match
    nameWithType: PagedSearch<T, T>.Match
    fullName: MongoDB.Entities.PagedSearch<T, T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Driver.FilterDefinition{`0})
    name: Match
    nameWithType: PagedSearch(Of T, T).Match
    fullName: MongoDB.Entities.PagedSearch(Of T, T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.Match(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.Match(MongoDB.Entities.Template)
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Template)
  name: Match(Template)
  nameWithType: PagedSearch<T, T>.Match(Template)
  fullName: MongoDB.Entities.PagedSearch<T, T>.Match(MongoDB.Entities.Template)
  nameWithType.vb: PagedSearch(Of T, T).Match(Template)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).Match(MongoDB.Entities.Template)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Template)
    name: Match
    nameWithType: PagedSearch<T, T>.Match
    fullName: MongoDB.Entities.PagedSearch<T, T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Template)
    name: Match
    nameWithType: PagedSearch(Of T, T).Match
    fullName: MongoDB.Entities.PagedSearch(Of T, T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  name: Match(Search, String, Boolean, Boolean, String)
  nameWithType: PagedSearch<T, T>.Match(Search, String, Boolean, Boolean, String)
  fullName: MongoDB.Entities.PagedSearch<T, T>.Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
  nameWithType.vb: PagedSearch(Of T, T).Match(Search, String, Boolean, Boolean, String)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
    name: Match
    nameWithType: PagedSearch<T, T>.Match
    fullName: MongoDB.Entities.PagedSearch<T, T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Search
    name: Search
    nameWithType: Search
    fullName: MongoDB.Entities.Search
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
    name: Match
    nameWithType: PagedSearch(Of T, T).Match
    fullName: MongoDB.Entities.PagedSearch(Of T, T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Search
    name: Search
    nameWithType: Search
    fullName: MongoDB.Entities.Search
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.Match(System.Linq.Expressions.Expression{System.Func{{T},System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  name: Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  nameWithType: PagedSearch<T, T>.Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  fullName: MongoDB.Entities.PagedSearch<T, T>.Match(System.Linq.Expressions.Expression<System.Func<T, System.Object>>, MongoDB.Entities.Coordinates2D, System.Nullable<System.Double>, System.Nullable<System.Double>)
  nameWithType.vb: PagedSearch(Of T, T).Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).Match(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), MongoDB.Entities.Coordinates2D, System.Nullable(Of System.Double), System.Nullable(Of System.Double))
  name.vb: Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
    name: Match
    nameWithType: PagedSearch<T, T>.Match
    fullName: MongoDB.Entities.PagedSearch<T, T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Coordinates2D
    name: Coordinates2D
    nameWithType: Coordinates2D
    fullName: MongoDB.Entities.Coordinates2D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
    name: Match
    nameWithType: PagedSearch(Of T, T).Match
    fullName: MongoDB.Entities.PagedSearch(Of T, T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Coordinates2D
    name: Coordinates2D
    nameWithType: Coordinates2D
    fullName: MongoDB.Entities.Coordinates2D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.MatchString(System.String)
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.MatchString(System.String)
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.MatchString(System.String)
  name: MatchString(String)
  nameWithType: PagedSearch<T, T>.MatchString(String)
  fullName: MongoDB.Entities.PagedSearch<T, T>.MatchString(System.String)
  nameWithType.vb: PagedSearch(Of T, T).MatchString(String)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).MatchString(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.MatchString(System.String)
    name: MatchString
    nameWithType: PagedSearch<T, T>.MatchString
    fullName: MongoDB.Entities.PagedSearch<T, T>.MatchString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.MatchString(System.String)
    name: MatchString
    nameWithType: PagedSearch(Of T, T).MatchString
    fullName: MongoDB.Entities.PagedSearch(Of T, T).MatchString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.MatchExpression(System.String)
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.MatchExpression(System.String)
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.MatchExpression(System.String)
  name: MatchExpression(String)
  nameWithType: PagedSearch<T, T>.MatchExpression(String)
  fullName: MongoDB.Entities.PagedSearch<T, T>.MatchExpression(System.String)
  nameWithType.vb: PagedSearch(Of T, T).MatchExpression(String)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).MatchExpression(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.MatchExpression(System.String)
    name: MatchExpression
    nameWithType: PagedSearch<T, T>.MatchExpression
    fullName: MongoDB.Entities.PagedSearch<T, T>.MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.MatchExpression(System.String)
    name: MatchExpression
    nameWithType: PagedSearch(Of T, T).MatchExpression
    fullName: MongoDB.Entities.PagedSearch(Of T, T).MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.MatchExpression(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.MatchExpression(MongoDB.Entities.Template)
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.MatchExpression(MongoDB.Entities.Template)
  name: MatchExpression(Template)
  nameWithType: PagedSearch<T, T>.MatchExpression(Template)
  fullName: MongoDB.Entities.PagedSearch<T, T>.MatchExpression(MongoDB.Entities.Template)
  nameWithType.vb: PagedSearch(Of T, T).MatchExpression(Template)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).MatchExpression(MongoDB.Entities.Template)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.MatchExpression(MongoDB.Entities.Template)
    name: MatchExpression
    nameWithType: PagedSearch<T, T>.MatchExpression
    fullName: MongoDB.Entities.PagedSearch<T, T>.MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.MatchExpression(MongoDB.Entities.Template)
    name: MatchExpression
    nameWithType: PagedSearch(Of T, T).MatchExpression
    fullName: MongoDB.Entities.PagedSearch(Of T, T).MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.Sort(System.Linq.Expressions.Expression{System.Func{{T},System.Object}},MongoDB.Entities.Order)
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
  name: Sort(Expression<Func<T, Object>>, Order)
  nameWithType: PagedSearch<T, T>.Sort(Expression<Func<T, Object>>, Order)
  fullName: MongoDB.Entities.PagedSearch<T, T>.Sort(System.Linq.Expressions.Expression<System.Func<T, System.Object>>, MongoDB.Entities.Order)
  nameWithType.vb: PagedSearch(Of T, T).Sort(Expression(Of Func(Of T, Object)), Order)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).Sort(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), MongoDB.Entities.Order)
  name.vb: Sort(Expression(Of Func(Of T, Object)), Order)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
    name: Sort
    nameWithType: PagedSearch<T, T>.Sort
    fullName: MongoDB.Entities.PagedSearch<T, T>.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Order
    name: Order
    nameWithType: Order
    fullName: MongoDB.Entities.Order
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
    name: Sort
    nameWithType: PagedSearch(Of T, T).Sort
    fullName: MongoDB.Entities.PagedSearch(Of T, T).Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Order
    name: Order
    nameWithType: Order
    fullName: MongoDB.Entities.Order
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.SortByTextScore
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.SortByTextScore
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.SortByTextScore
  name: SortByTextScore()
  nameWithType: PagedSearch<T, T>.SortByTextScore()
  fullName: MongoDB.Entities.PagedSearch<T, T>.SortByTextScore()
  nameWithType.vb: PagedSearch(Of T, T).SortByTextScore()
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).SortByTextScore()
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.SortByTextScore
    name: SortByTextScore
    nameWithType: PagedSearch<T, T>.SortByTextScore
    fullName: MongoDB.Entities.PagedSearch<T, T>.SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.SortByTextScore
    name: SortByTextScore
    nameWithType: PagedSearch(Of T, T).SortByTextScore
    fullName: MongoDB.Entities.PagedSearch(Of T, T).SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.SortByTextScore(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  name: SortByTextScore(Expression<Func<T, Object>>)
  nameWithType: PagedSearch<T, T>.SortByTextScore(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.PagedSearch<T, T>.SortByTextScore(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: PagedSearch(Of T, T).SortByTextScore(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).SortByTextScore(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: SortByTextScore(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: SortByTextScore
    nameWithType: PagedSearch<T, T>.SortByTextScore
    fullName: MongoDB.Entities.PagedSearch<T, T>.SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: SortByTextScore
    nameWithType: PagedSearch(Of T, T).SortByTextScore
    fullName: MongoDB.Entities.PagedSearch(Of T, T).SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{{T}},MongoDB.Driver.SortDefinition{{T}}})
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
  name: Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  nameWithType: PagedSearch<T, T>.Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  fullName: MongoDB.Entities.PagedSearch<T, T>.Sort(System.Func<MongoDB.Driver.SortDefinitionBuilder<T>, MongoDB.Driver.SortDefinition<T>>)
  nameWithType.vb: PagedSearch(Of T, T).Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).Sort(System.Func(Of MongoDB.Driver.SortDefinitionBuilder(Of T), MongoDB.Driver.SortDefinition(Of T)))
  name.vb: Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
    name: Sort
    nameWithType: PagedSearch<T, T>.Sort
    fullName: MongoDB.Entities.PagedSearch<T, T>.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: MongoDB.Driver.SortDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.SortDefinition`1
    name: SortDefinition
    nameWithType: SortDefinition
    fullName: MongoDB.Driver.SortDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
    name: Sort
    nameWithType: PagedSearch(Of T, T).Sort
    fullName: MongoDB.Entities.PagedSearch(Of T, T).Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: MongoDB.Driver.SortDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.SortDefinition`1
    name: SortDefinition
    nameWithType: SortDefinition
    fullName: MongoDB.Driver.SortDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.PageNumber(System.Int32)
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.PageNumber(System.Int32)
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.PageNumber(System.Int32)
  name: PageNumber(Int32)
  nameWithType: PagedSearch<T, T>.PageNumber(Int32)
  fullName: MongoDB.Entities.PagedSearch<T, T>.PageNumber(System.Int32)
  nameWithType.vb: PagedSearch(Of T, T).PageNumber(Int32)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).PageNumber(System.Int32)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.PageNumber(System.Int32)
    name: PageNumber
    nameWithType: PagedSearch<T, T>.PageNumber
    fullName: MongoDB.Entities.PagedSearch<T, T>.PageNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.PageNumber(System.Int32)
    name: PageNumber
    nameWithType: PagedSearch(Of T, T).PageNumber
    fullName: MongoDB.Entities.PagedSearch(Of T, T).PageNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.PageSize(System.Int32)
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.PageSize(System.Int32)
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.PageSize(System.Int32)
  name: PageSize(Int32)
  nameWithType: PagedSearch<T, T>.PageSize(Int32)
  fullName: MongoDB.Entities.PagedSearch<T, T>.PageSize(System.Int32)
  nameWithType.vb: PagedSearch(Of T, T).PageSize(Int32)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).PageSize(System.Int32)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.PageSize(System.Int32)
    name: PageSize
    nameWithType: PagedSearch<T, T>.PageSize
    fullName: MongoDB.Entities.PagedSearch<T, T>.PageSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.PageSize(System.Int32)
    name: PageSize
    nameWithType: PagedSearch(Of T, T).PageSize
    fullName: MongoDB.Entities.PagedSearch(Of T, T).PageSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.Project(System.Linq.Expressions.Expression{System.Func{{T},{T}}})
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.Project(System.Linq.Expressions.Expression{System.Func{`0,`0}})
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  name: Project(Expression<Func<T, T>>)
  nameWithType: PagedSearch<T, T>.Project(Expression<Func<T, T>>)
  fullName: MongoDB.Entities.PagedSearch<T, T>.Project(System.Linq.Expressions.Expression<System.Func<T, T>>)
  nameWithType.vb: PagedSearch(Of T, T).Project(Expression(Of Func(Of T, T)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).Project(System.Linq.Expressions.Expression(Of System.Func(Of T, T)))
  name.vb: Project(Expression(Of Func(Of T, T)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
    name: Project
    nameWithType: PagedSearch<T, T>.Project
    fullName: MongoDB.Entities.PagedSearch<T, T>.Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
    name: Project
    nameWithType: PagedSearch(Of T, T).Project
    fullName: MongoDB.Entities.PagedSearch(Of T, T).Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{{T}},MongoDB.Driver.ProjectionDefinition{{T},{T}}})
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`0}})
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
  name: Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>)
  nameWithType: PagedSearch<T, T>.Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>)
  fullName: MongoDB.Entities.PagedSearch<T, T>.Project(System.Func<MongoDB.Driver.ProjectionDefinitionBuilder<T>, MongoDB.Driver.ProjectionDefinition<T, T>>)
  nameWithType.vb: PagedSearch(Of T, T).Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).Project(System.Func(Of MongoDB.Driver.ProjectionDefinitionBuilder(Of T), MongoDB.Driver.ProjectionDefinition(Of T, T)))
  name.vb: Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
    name: Project
    nameWithType: PagedSearch<T, T>.Project
    fullName: MongoDB.Entities.PagedSearch<T, T>.Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: MongoDB.Driver.ProjectionDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: MongoDB.Driver.ProjectionDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
    name: Project
    nameWithType: PagedSearch(Of T, T).Project
    fullName: MongoDB.Entities.PagedSearch(Of T, T).Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: MongoDB.Driver.ProjectionDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: MongoDB.Driver.ProjectionDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  name: ProjectExcluding(Expression<Func<T, Object>>)
  nameWithType: PagedSearch<T, T>.ProjectExcluding(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.PagedSearch<T, T>.ProjectExcluding(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: PagedSearch(Of T, T).ProjectExcluding(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).ProjectExcluding(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: ProjectExcluding(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: ProjectExcluding
    nameWithType: PagedSearch<T, T>.ProjectExcluding
    fullName: MongoDB.Entities.PagedSearch<T, T>.ProjectExcluding
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: ProjectExcluding
    nameWithType: PagedSearch(Of T, T).ProjectExcluding
    fullName: MongoDB.Entities.PagedSearch(Of T, T).ProjectExcluding
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.Option(System.Action{MongoDB.Driver.AggregateOptions})
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.Option(System.Action{MongoDB.Driver.AggregateOptions})
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.Option(System.Action{MongoDB.Driver.AggregateOptions})
  name: Option(Action<AggregateOptions>)
  nameWithType: PagedSearch<T, T>.Option(Action<AggregateOptions>)
  fullName: MongoDB.Entities.PagedSearch<T, T>.Option(System.Action<MongoDB.Driver.AggregateOptions>)
  nameWithType.vb: PagedSearch(Of T, T).Option(Action(Of AggregateOptions))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).Option(System.Action(Of MongoDB.Driver.AggregateOptions))
  name.vb: Option(Action(Of AggregateOptions))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Option(System.Action{MongoDB.Driver.AggregateOptions})
    name: Option
    nameWithType: PagedSearch<T, T>.Option
    fullName: MongoDB.Entities.PagedSearch<T, T>.Option
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: MongoDB.Driver.AggregateOptions
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Option(System.Action{MongoDB.Driver.AggregateOptions})
    name: Option
    nameWithType: PagedSearch(Of T, T).Option
    fullName: MongoDB.Entities.PagedSearch(Of T, T).Option
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: MongoDB.Driver.AggregateOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.IgnoreGlobalFilters
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.IgnoreGlobalFilters
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters
  name: IgnoreGlobalFilters()
  nameWithType: PagedSearch<T, T>.IgnoreGlobalFilters()
  fullName: MongoDB.Entities.PagedSearch<T, T>.IgnoreGlobalFilters()
  nameWithType.vb: PagedSearch(Of T, T).IgnoreGlobalFilters()
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).IgnoreGlobalFilters()
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters
    name: IgnoreGlobalFilters
    nameWithType: PagedSearch<T, T>.IgnoreGlobalFilters
    fullName: MongoDB.Entities.PagedSearch<T, T>.IgnoreGlobalFilters
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters
    name: IgnoreGlobalFilters
    nameWithType: PagedSearch(Of T, T).IgnoreGlobalFilters
    fullName: MongoDB.Entities.PagedSearch(Of T, T).IgnoreGlobalFilters
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch{{T},{T}}.ExecuteAsync(System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.PagedSearch{`0,`0}.ExecuteAsync(System.Threading.CancellationToken)
  parent: MongoDB.Entities.PagedSearch{{T},{T}}
  definition: MongoDB.Entities.PagedSearch`2.ExecuteAsync(System.Threading.CancellationToken)
  name: ExecuteAsync(CancellationToken)
  nameWithType: PagedSearch<T, T>.ExecuteAsync(CancellationToken)
  fullName: MongoDB.Entities.PagedSearch<T, T>.ExecuteAsync(System.Threading.CancellationToken)
  nameWithType.vb: PagedSearch(Of T, T).ExecuteAsync(CancellationToken)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, T).ExecuteAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.ExecuteAsync(System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: PagedSearch<T, T>.ExecuteAsync
    fullName: MongoDB.Entities.PagedSearch<T, T>.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.ExecuteAsync(System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: PagedSearch(Of T, T).ExecuteAsync
    fullName: MongoDB.Entities.PagedSearch(Of T, T).ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MongoDB.Entities.PagedSearch`2
  commentId: T:MongoDB.Entities.PagedSearch`2
  name: PagedSearch<T, TProjection>
  nameWithType: PagedSearch<T, TProjection>
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>
  nameWithType.vb: PagedSearch(Of T, TProjection)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection)
  name.vb: PagedSearch(Of T, TProjection)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2
    name: PagedSearch
    nameWithType: PagedSearch
    fullName: MongoDB.Entities.PagedSearch
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2
    name: PagedSearch
    nameWithType: PagedSearch
    fullName: MongoDB.Entities.PagedSearch
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.WithFluent``1(``0)
  commentId: M:MongoDB.Entities.PagedSearch`2.WithFluent``1(``0)
  name: WithFluent<TFluent>(TFluent)
  nameWithType: PagedSearch<T, TProjection>.WithFluent<TFluent>(TFluent)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.WithFluent<TFluent>(TFluent)
  nameWithType.vb: PagedSearch(Of T, TProjection).WithFluent(Of TFluent)(TFluent)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).WithFluent(Of TFluent)(TFluent)
  name.vb: WithFluent(Of TFluent)(TFluent)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.WithFluent``1(``0)
    name: WithFluent<TFluent>
    nameWithType: PagedSearch<T, TProjection>.WithFluent<TFluent>
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.WithFluent<TFluent>
  - name: (
    nameWithType: (
    fullName: (
  - name: TFluent
    nameWithType: TFluent
    fullName: TFluent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.WithFluent``1(``0)
    name: WithFluent(Of TFluent)
    nameWithType: PagedSearch(Of T, TProjection).WithFluent(Of TFluent)
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).WithFluent(Of TFluent)
  - name: (
    nameWithType: (
    fullName: (
  - name: TFluent
    nameWithType: TFluent
    fullName: TFluent
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  isExternal: true
  name: Match(Expression<Func<T, Boolean>>)
  nameWithType: PagedSearch<T, TProjection>.Match(Expression<Func<T, Boolean>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  nameWithType.vb: PagedSearch(Of T, TProjection).Match(Expression(Of Func(Of T, Boolean)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Match(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Match
    nameWithType: PagedSearch<T, TProjection>.Match
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
    name: Match
    nameWithType: PagedSearch(Of T, TProjection).Match
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  commentId: M:MongoDB.Entities.PagedSearch`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  isExternal: true
  name: Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  nameWithType: PagedSearch<T, TProjection>.Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match(System.Func<MongoDB.Driver.FilterDefinitionBuilder<T>, MongoDB.Driver.FilterDefinition<T>>)
  nameWithType.vb: PagedSearch(Of T, TProjection).Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match(System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of T), MongoDB.Driver.FilterDefinition(Of T)))
  name.vb: Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
    name: Match
    nameWithType: PagedSearch<T, TProjection>.Match
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
    name: Match
    nameWithType: PagedSearch(Of T, TProjection).Match
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Driver.FilterDefinition{`0})
  commentId: M:MongoDB.Entities.PagedSearch`2.Match(MongoDB.Driver.FilterDefinition{`0})
  isExternal: true
  name: Match(FilterDefinition<T>)
  nameWithType: PagedSearch<T, TProjection>.Match(FilterDefinition<T>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match(MongoDB.Driver.FilterDefinition<T>)
  nameWithType.vb: PagedSearch(Of T, TProjection).Match(FilterDefinition(Of T))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match(MongoDB.Driver.FilterDefinition(Of T))
  name.vb: Match(FilterDefinition(Of T))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Driver.FilterDefinition{`0})
    name: Match
    nameWithType: PagedSearch<T, TProjection>.Match
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Driver.FilterDefinition{`0})
    name: Match
    nameWithType: PagedSearch(Of T, TProjection).Match
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Template)
  name: Match(Template)
  nameWithType: PagedSearch<T, TProjection>.Match(Template)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match(MongoDB.Entities.Template)
  nameWithType.vb: PagedSearch(Of T, TProjection).Match(Template)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match(MongoDB.Entities.Template)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Template)
    name: Match
    nameWithType: PagedSearch<T, TProjection>.Match
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Template)
    name: Match
    nameWithType: PagedSearch(Of T, TProjection).Match
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  commentId: M:MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  isExternal: true
  name: Match(Search, String, Boolean, Boolean, String)
  nameWithType: PagedSearch<T, TProjection>.Match(Search, String, Boolean, Boolean, String)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
  nameWithType.vb: PagedSearch(Of T, TProjection).Match(Search, String, Boolean, Boolean, String)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
    name: Match
    nameWithType: PagedSearch<T, TProjection>.Match
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Search
    name: Search
    nameWithType: Search
    fullName: MongoDB.Entities.Search
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
    name: Match
    nameWithType: PagedSearch(Of T, TProjection).Match
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Search
    name: Search
    nameWithType: Search
    fullName: MongoDB.Entities.Search
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  commentId: M:MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  isExternal: true
  name: Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  nameWithType: PagedSearch<T, TProjection>.Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match(System.Linq.Expressions.Expression<System.Func<T, System.Object>>, MongoDB.Entities.Coordinates2D, System.Nullable<System.Double>, System.Nullable<System.Double>)
  nameWithType.vb: PagedSearch(Of T, TProjection).Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), MongoDB.Entities.Coordinates2D, System.Nullable(Of System.Double), System.Nullable(Of System.Double))
  name.vb: Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
    name: Match
    nameWithType: PagedSearch<T, TProjection>.Match
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Coordinates2D
    name: Coordinates2D
    nameWithType: Coordinates2D
    fullName: MongoDB.Entities.Coordinates2D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
    name: Match
    nameWithType: PagedSearch(Of T, TProjection).Match
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Coordinates2D
    name: Coordinates2D
    nameWithType: Coordinates2D
    fullName: MongoDB.Entities.Coordinates2D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.MatchString(System.String)
  commentId: M:MongoDB.Entities.PagedSearch`2.MatchString(System.String)
  isExternal: true
  name: MatchString(String)
  nameWithType: PagedSearch<T, TProjection>.MatchString(String)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.MatchString(System.String)
  nameWithType.vb: PagedSearch(Of T, TProjection).MatchString(String)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).MatchString(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.MatchString(System.String)
    name: MatchString
    nameWithType: PagedSearch<T, TProjection>.MatchString
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.MatchString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.MatchString(System.String)
    name: MatchString
    nameWithType: PagedSearch(Of T, TProjection).MatchString
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).MatchString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.MatchExpression(System.String)
  commentId: M:MongoDB.Entities.PagedSearch`2.MatchExpression(System.String)
  isExternal: true
  name: MatchExpression(String)
  nameWithType: PagedSearch<T, TProjection>.MatchExpression(String)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.MatchExpression(System.String)
  nameWithType.vb: PagedSearch(Of T, TProjection).MatchExpression(String)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).MatchExpression(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.MatchExpression(System.String)
    name: MatchExpression
    nameWithType: PagedSearch<T, TProjection>.MatchExpression
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.MatchExpression(System.String)
    name: MatchExpression
    nameWithType: PagedSearch(Of T, TProjection).MatchExpression
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.MatchExpression(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.PagedSearch`2.MatchExpression(MongoDB.Entities.Template)
  name: MatchExpression(Template)
  nameWithType: PagedSearch<T, TProjection>.MatchExpression(Template)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.MatchExpression(MongoDB.Entities.Template)
  nameWithType.vb: PagedSearch(Of T, TProjection).MatchExpression(Template)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).MatchExpression(MongoDB.Entities.Template)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.MatchExpression(MongoDB.Entities.Template)
    name: MatchExpression
    nameWithType: PagedSearch<T, TProjection>.MatchExpression
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.MatchExpression(MongoDB.Entities.Template)
    name: MatchExpression
    nameWithType: PagedSearch(Of T, TProjection).MatchExpression
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
  commentId: M:MongoDB.Entities.PagedSearch`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
  isExternal: true
  name: Sort(Expression<Func<T, Object>>, Order)
  nameWithType: PagedSearch<T, TProjection>.Sort(Expression<Func<T, Object>>, Order)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Sort(System.Linq.Expressions.Expression<System.Func<T, System.Object>>, MongoDB.Entities.Order)
  nameWithType.vb: PagedSearch(Of T, TProjection).Sort(Expression(Of Func(Of T, Object)), Order)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Sort(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), MongoDB.Entities.Order)
  name.vb: Sort(Expression(Of Func(Of T, Object)), Order)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
    name: Sort
    nameWithType: PagedSearch<T, TProjection>.Sort
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Order
    name: Order
    nameWithType: Order
    fullName: MongoDB.Entities.Order
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
    name: Sort
    nameWithType: PagedSearch(Of T, TProjection).Sort
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Order
    name: Order
    nameWithType: Order
    fullName: MongoDB.Entities.Order
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.SortByTextScore
  commentId: M:MongoDB.Entities.PagedSearch`2.SortByTextScore
  name: SortByTextScore()
  nameWithType: PagedSearch<T, TProjection>.SortByTextScore()
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.SortByTextScore()
  nameWithType.vb: PagedSearch(Of T, TProjection).SortByTextScore()
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).SortByTextScore()
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.SortByTextScore
    name: SortByTextScore
    nameWithType: PagedSearch<T, TProjection>.SortByTextScore
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.SortByTextScore
    name: SortByTextScore
    nameWithType: PagedSearch(Of T, TProjection).SortByTextScore
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.PagedSearch`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  isExternal: true
  name: SortByTextScore(Expression<Func<T, Object>>)
  nameWithType: PagedSearch<T, TProjection>.SortByTextScore(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.SortByTextScore(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: PagedSearch(Of T, TProjection).SortByTextScore(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).SortByTextScore(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: SortByTextScore(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: SortByTextScore
    nameWithType: PagedSearch<T, TProjection>.SortByTextScore
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: SortByTextScore
    nameWithType: PagedSearch(Of T, TProjection).SortByTextScore
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
  commentId: M:MongoDB.Entities.PagedSearch`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
  isExternal: true
  name: Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  nameWithType: PagedSearch<T, TProjection>.Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Sort(System.Func<MongoDB.Driver.SortDefinitionBuilder<T>, MongoDB.Driver.SortDefinition<T>>)
  nameWithType.vb: PagedSearch(Of T, TProjection).Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Sort(System.Func(Of MongoDB.Driver.SortDefinitionBuilder(Of T), MongoDB.Driver.SortDefinition(Of T)))
  name.vb: Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
    name: Sort
    nameWithType: PagedSearch<T, TProjection>.Sort
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: MongoDB.Driver.SortDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.SortDefinition`1
    name: SortDefinition
    nameWithType: SortDefinition
    fullName: MongoDB.Driver.SortDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
    name: Sort
    nameWithType: PagedSearch(Of T, TProjection).Sort
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: MongoDB.Driver.SortDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.SortDefinition`1
    name: SortDefinition
    nameWithType: SortDefinition
    fullName: MongoDB.Driver.SortDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.PageNumber(System.Int32)
  commentId: M:MongoDB.Entities.PagedSearch`2.PageNumber(System.Int32)
  isExternal: true
  name: PageNumber(Int32)
  nameWithType: PagedSearch<T, TProjection>.PageNumber(Int32)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.PageNumber(System.Int32)
  nameWithType.vb: PagedSearch(Of T, TProjection).PageNumber(Int32)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).PageNumber(System.Int32)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.PageNumber(System.Int32)
    name: PageNumber
    nameWithType: PagedSearch<T, TProjection>.PageNumber
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.PageNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.PageNumber(System.Int32)
    name: PageNumber
    nameWithType: PagedSearch(Of T, TProjection).PageNumber
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).PageNumber
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.PageSize(System.Int32)
  commentId: M:MongoDB.Entities.PagedSearch`2.PageSize(System.Int32)
  isExternal: true
  name: PageSize(Int32)
  nameWithType: PagedSearch<T, TProjection>.PageSize(Int32)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.PageSize(System.Int32)
  nameWithType.vb: PagedSearch(Of T, TProjection).PageSize(Int32)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).PageSize(System.Int32)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.PageSize(System.Int32)
    name: PageSize
    nameWithType: PagedSearch<T, TProjection>.PageSize
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.PageSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.PageSize(System.Int32)
    name: PageSize
    nameWithType: PagedSearch(Of T, TProjection).PageSize
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).PageSize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  commentId: M:MongoDB.Entities.PagedSearch`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  isExternal: true
  name: Project(Expression<Func<T, TProjection>>)
  nameWithType: PagedSearch<T, TProjection>.Project(Expression<Func<T, TProjection>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Project(System.Linq.Expressions.Expression<System.Func<T, TProjection>>)
  nameWithType.vb: PagedSearch(Of T, TProjection).Project(Expression(Of Func(Of T, TProjection)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Project(System.Linq.Expressions.Expression(Of System.Func(Of T, TProjection)))
  name.vb: Project(Expression(Of Func(Of T, TProjection)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
    name: Project
    nameWithType: PagedSearch<T, TProjection>.Project
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
    name: Project
    nameWithType: PagedSearch(Of T, TProjection).Project
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
  commentId: M:MongoDB.Entities.PagedSearch`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
  isExternal: true
  name: Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>)
  nameWithType: PagedSearch<T, TProjection>.Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Project(System.Func<MongoDB.Driver.ProjectionDefinitionBuilder<T>, MongoDB.Driver.ProjectionDefinition<T, TProjection>>)
  nameWithType.vb: PagedSearch(Of T, TProjection).Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Project(System.Func(Of MongoDB.Driver.ProjectionDefinitionBuilder(Of T), MongoDB.Driver.ProjectionDefinition(Of T, TProjection)))
  name.vb: Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
    name: Project
    nameWithType: PagedSearch<T, TProjection>.Project
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: MongoDB.Driver.ProjectionDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: MongoDB.Driver.ProjectionDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
    name: Project
    nameWithType: PagedSearch(Of T, TProjection).Project
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: MongoDB.Driver.ProjectionDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: MongoDB.Driver.ProjectionDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.PagedSearch`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  isExternal: true
  name: ProjectExcluding(Expression<Func<T, Object>>)
  nameWithType: PagedSearch<T, TProjection>.ProjectExcluding(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.ProjectExcluding(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  nameWithType.vb: PagedSearch(Of T, TProjection).ProjectExcluding(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).ProjectExcluding(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: ProjectExcluding(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: ProjectExcluding
    nameWithType: PagedSearch<T, TProjection>.ProjectExcluding
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.ProjectExcluding
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
    name: ProjectExcluding
    nameWithType: PagedSearch(Of T, TProjection).ProjectExcluding
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).ProjectExcluding
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.Option(System.Action{MongoDB.Driver.AggregateOptions})
  commentId: M:MongoDB.Entities.PagedSearch`2.Option(System.Action{MongoDB.Driver.AggregateOptions})
  isExternal: true
  name: Option(Action<AggregateOptions>)
  nameWithType: PagedSearch<T, TProjection>.Option(Action<AggregateOptions>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Option(System.Action<MongoDB.Driver.AggregateOptions>)
  nameWithType.vb: PagedSearch(Of T, TProjection).Option(Action(Of AggregateOptions))
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Option(System.Action(Of MongoDB.Driver.AggregateOptions))
  name.vb: Option(Action(Of AggregateOptions))
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.Option(System.Action{MongoDB.Driver.AggregateOptions})
    name: Option
    nameWithType: PagedSearch<T, TProjection>.Option
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Option
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: MongoDB.Driver.AggregateOptions
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.Option(System.Action{MongoDB.Driver.AggregateOptions})
    name: Option
    nameWithType: PagedSearch(Of T, TProjection).Option
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).Option
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: MongoDB.Driver.AggregateOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters
  commentId: M:MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters
  name: IgnoreGlobalFilters()
  nameWithType: PagedSearch<T, TProjection>.IgnoreGlobalFilters()
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.IgnoreGlobalFilters()
  nameWithType.vb: PagedSearch(Of T, TProjection).IgnoreGlobalFilters()
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).IgnoreGlobalFilters()
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters
    name: IgnoreGlobalFilters
    nameWithType: PagedSearch<T, TProjection>.IgnoreGlobalFilters
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.IgnoreGlobalFilters
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters
    name: IgnoreGlobalFilters
    nameWithType: PagedSearch(Of T, TProjection).IgnoreGlobalFilters
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).IgnoreGlobalFilters
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.ExecuteAsync(System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.PagedSearch`2.ExecuteAsync(System.Threading.CancellationToken)
  isExternal: true
  name: ExecuteAsync(CancellationToken)
  nameWithType: PagedSearch<T, TProjection>.ExecuteAsync(CancellationToken)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.ExecuteAsync(System.Threading.CancellationToken)
  nameWithType.vb: PagedSearch(Of T, TProjection).ExecuteAsync(CancellationToken)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).ExecuteAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2.ExecuteAsync(System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: PagedSearch<T, TProjection>.ExecuteAsync
    fullName: MongoDB.Entities.PagedSearch<T, TProjection>.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2.ExecuteAsync(System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: PagedSearch(Of T, TProjection).ExecuteAsync
    fullName: MongoDB.Entities.PagedSearch(Of T, TProjection).ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
