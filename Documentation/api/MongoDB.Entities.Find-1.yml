### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.Find`1
  commentId: T:MongoDB.Entities.Find`1
  id: Find`1
  parent: MongoDB.Entities
  children: []
  langs:
  - csharp
  - vb
  name: Find<T>
  nameWithType: Find<T>
  fullName: MongoDB.Entities.Find<T>
  type: Class
  source:
    id: Find
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Commands\Find.cs
    startLine: 18
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents a MongoDB Find command.\n<p>TIP: Specify your criteria using .Match() .Sort() .Skip() .Take() .Project() .Option() methods and finally call .Execute()</p>\n<p>Note: For building queries, use the DB.Fluent* interfaces</p>\n"
  example: []
  syntax:
    content: 'public class Find<T> : Find<T, T> where T : IEntity'
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    content.vb: >-
      Public Class Find(Of T As IEntity)

          Inherits Find(Of T, T)
  inheritance:
  - System.Object
  - MongoDB.Entities.Find{{T},{T}}
  inheritedMembers:
  - MongoDB.Entities.Find{{T},{T}}.OneAsync(System.String,CancellationToken)
  - MongoDB.Entities.Find{{T},{T}}.ManyAsync(Expression{Func{{T},System.Boolean}},CancellationToken)
  - MongoDB.Entities.Find{{T},{T}}.ManyAsync(Func{FilterDefinitionBuilder{{T}},FilterDefinition{{T}}},CancellationToken)
  - MongoDB.Entities.Find{{T},{T}}.MatchID(System.String)
  - MongoDB.Entities.Find{{T},{T}}.Match(System.String)
  - MongoDB.Entities.Find{{T},{T}}.Match(Expression{Func{{T},System.Boolean}})
  - MongoDB.Entities.Find{{T},{T}}.Match(Func{FilterDefinitionBuilder{{T}},FilterDefinition{{T}}})
  - MongoDB.Entities.Find{{T},{T}}.Match(MongoDB.Entities.Template)
  - MongoDB.Entities.Find{{T},{T}}.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  - MongoDB.Entities.Find{{T},{T}}.Match(Expression{Func{{T},System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  - MongoDB.Entities.Find{{T},{T}}.MatchString(System.String)
  - MongoDB.Entities.Find{{T},{T}}.MatchExpression(System.String)
  - MongoDB.Entities.Find{{T},{T}}.MatchExpression(MongoDB.Entities.Template)
  - MongoDB.Entities.Find{{T},{T}}.Sort(Expression{Func{{T},System.Object}},MongoDB.Entities.Order)
  - MongoDB.Entities.Find{{T},{T}}.SortByTextScore
  - MongoDB.Entities.Find{{T},{T}}.SortByTextScore(Expression{Func{{T},System.Object}})
  - MongoDB.Entities.Find{{T},{T}}.Sort(Func{SortDefinitionBuilder{{T}},SortDefinition{{T}}})
  - MongoDB.Entities.Find{{T},{T}}.Skip(System.Int32)
  - MongoDB.Entities.Find{{T},{T}}.Limit(System.Int32)
  - MongoDB.Entities.Find{{T},{T}}.Project(Expression{Func{{T},{T}}})
  - MongoDB.Entities.Find{{T},{T}}.Project(Func{ProjectionDefinitionBuilder{{T}},ProjectionDefinition{{T},{T}}})
  - MongoDB.Entities.Find{{T},{T}}.ProjectExcluding(Expression{Func{{T},System.Object}})
  - MongoDB.Entities.Find{{T},{T}}.Option(Action{FindOptions{{T},{T}}})
  - MongoDB.Entities.Find{{T},{T}}.IgnoreGlobalFilters
  - MongoDB.Entities.Find{{T},{T}}.ExecuteAsync(CancellationToken)
  - MongoDB.Entities.Find{{T},{T}}.ExecuteSingleAsync(CancellationToken)
  - MongoDB.Entities.Find{{T},{T}}.ExecuteFirstAsync(CancellationToken)
  - MongoDB.Entities.Find{{T},{T}}.ExecuteAnyAsync(CancellationToken)
  - MongoDB.Entities.Find{{T},{T}}.ExecuteCursorAsync(CancellationToken)
  nameWithType.vb: Find(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MongoDB.Entities.Find(Of T)
  name.vb: Find(Of T)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: MongoDB.Entities.Find{{T},{T}}
  commentId: T:MongoDB.Entities.Find{`0,`0}
  parent: MongoDB.Entities
  definition: MongoDB.Entities.Find`2
  name: Find<T, T>
  nameWithType: Find<T, T>
  fullName: MongoDB.Entities.Find<T, T>
  nameWithType.vb: Find(Of T, T)
  fullName.vb: MongoDB.Entities.Find(Of T, T)
  name.vb: Find(Of T, T)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Find`2
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.OneAsync(System.String,CancellationToken)
  commentId: M:MongoDB.Entities.Find{`0,`0}.OneAsync(System.String,CancellationToken)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.OneAsync(System.String,CancellationToken)
  name: OneAsync(String, CancellationToken)
  nameWithType: Find<T, T>.OneAsync(String, CancellationToken)
  fullName: MongoDB.Entities.Find<T, T>.OneAsync(System.String, CancellationToken)
  nameWithType.vb: Find(Of T, T).OneAsync(String, CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, T).OneAsync(System.String, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.OneAsync(System.String,CancellationToken)
    name: OneAsync
    nameWithType: Find<T, T>.OneAsync
    fullName: MongoDB.Entities.Find<T, T>.OneAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.OneAsync(System.String,CancellationToken)
    name: OneAsync
    nameWithType: Find(Of T, T).OneAsync
    fullName: MongoDB.Entities.Find(Of T, T).OneAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.ManyAsync(Expression{Func{{T},System.Boolean}},CancellationToken)
  commentId: M:MongoDB.Entities.Find{`0,`0}.ManyAsync(Expression{Func{`0,System.Boolean}},CancellationToken)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.ManyAsync(Expression{Func{`0,System.Boolean}},CancellationToken)
  name: ManyAsync(Expression<Func<T, Boolean>>, CancellationToken)
  nameWithType: Find<T, T>.ManyAsync(Expression<Func<T, Boolean>>, CancellationToken)
  fullName: MongoDB.Entities.Find<T, T>.ManyAsync(Expression<Func<T, System.Boolean>>, CancellationToken)
  nameWithType.vb: Find(Of T, T).ManyAsync(Expression(Of Func(Of T, Boolean)), CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, T).ManyAsync(Expression(Of Func(Of T, System.Boolean)), CancellationToken)
  name.vb: ManyAsync(Expression(Of Func(Of T, Boolean)), CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ManyAsync(Expression{Func{`0,System.Boolean}},CancellationToken)
    name: ManyAsync
    nameWithType: Find<T, T>.ManyAsync
    fullName: MongoDB.Entities.Find<T, T>.ManyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ManyAsync(Expression{Func{`0,System.Boolean}},CancellationToken)
    name: ManyAsync
    nameWithType: Find(Of T, T).ManyAsync
    fullName: MongoDB.Entities.Find(Of T, T).ManyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.ManyAsync(Func{FilterDefinitionBuilder{{T}},FilterDefinition{{T}}},CancellationToken)
  commentId: M:MongoDB.Entities.Find{`0,`0}.ManyAsync(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}},CancellationToken)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.ManyAsync(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}},CancellationToken)
  name: ManyAsync(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, CancellationToken)
  nameWithType: Find<T, T>.ManyAsync(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, CancellationToken)
  fullName: MongoDB.Entities.Find<T, T>.ManyAsync(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, CancellationToken)
  nameWithType.vb: Find(Of T, T).ManyAsync(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, T).ManyAsync(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), CancellationToken)
  name.vb: ManyAsync(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ManyAsync(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}},CancellationToken)
    name: ManyAsync
    nameWithType: Find<T, T>.ManyAsync
    fullName: MongoDB.Entities.Find<T, T>.ManyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ManyAsync(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}},CancellationToken)
    name: ManyAsync
    nameWithType: Find(Of T, T).ManyAsync
    fullName: MongoDB.Entities.Find(Of T, T).ManyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.MatchID(System.String)
  commentId: M:MongoDB.Entities.Find{`0,`0}.MatchID(System.String)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.MatchID(System.String)
  name: MatchID(String)
  nameWithType: Find<T, T>.MatchID(String)
  fullName: MongoDB.Entities.Find<T, T>.MatchID(System.String)
  nameWithType.vb: Find(Of T, T).MatchID(String)
  fullName.vb: MongoDB.Entities.Find(Of T, T).MatchID(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.MatchID(System.String)
    name: MatchID
    nameWithType: Find<T, T>.MatchID
    fullName: MongoDB.Entities.Find<T, T>.MatchID
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.MatchID(System.String)
    name: MatchID
    nameWithType: Find(Of T, T).MatchID
    fullName: MongoDB.Entities.Find(Of T, T).MatchID
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Match(System.String)
  commentId: M:MongoDB.Entities.Find{`0,`0}.Match(System.String)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Match(System.String)
  name: Match(String)
  nameWithType: Find<T, T>.Match(String)
  fullName: MongoDB.Entities.Find<T, T>.Match(System.String)
  nameWithType.vb: Find(Of T, T).Match(String)
  fullName.vb: MongoDB.Entities.Find(Of T, T).Match(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Match(System.String)
    name: Match
    nameWithType: Find<T, T>.Match
    fullName: MongoDB.Entities.Find<T, T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Match(System.String)
    name: Match
    nameWithType: Find(Of T, T).Match
    fullName: MongoDB.Entities.Find(Of T, T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Match(Expression{Func{{T},System.Boolean}})
  commentId: M:MongoDB.Entities.Find{`0,`0}.Match(Expression{Func{`0,System.Boolean}})
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Boolean}})
  name: Match(Expression<Func<T, Boolean>>)
  nameWithType: Find<T, T>.Match(Expression<Func<T, Boolean>>)
  fullName: MongoDB.Entities.Find<T, T>.Match(Expression<Func<T, System.Boolean>>)
  nameWithType.vb: Find(Of T, T).Match(Expression(Of Func(Of T, Boolean)))
  fullName.vb: MongoDB.Entities.Find(Of T, T).Match(Expression(Of Func(Of T, System.Boolean)))
  name.vb: Match(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Boolean}})
    name: Match
    nameWithType: Find<T, T>.Match
    fullName: MongoDB.Entities.Find<T, T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Boolean}})
    name: Match
    nameWithType: Find(Of T, T).Match
    fullName: MongoDB.Entities.Find(Of T, T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Match(Func{FilterDefinitionBuilder{{T}},FilterDefinition{{T}}})
  commentId: M:MongoDB.Entities.Find{`0,`0}.Match(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}})
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Match(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}})
  name: Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  nameWithType: Find<T, T>.Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  fullName: MongoDB.Entities.Find<T, T>.Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  nameWithType.vb: Find(Of T, T).Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  fullName.vb: MongoDB.Entities.Find(Of T, T).Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  name.vb: Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Match(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}})
    name: Match
    nameWithType: Find<T, T>.Match
    fullName: MongoDB.Entities.Find<T, T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Match(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}})
    name: Match
    nameWithType: Find(Of T, T).Match
    fullName: MongoDB.Entities.Find(Of T, T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Match(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Find{`0,`0}.Match(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Template)
  name: Match(Template)
  nameWithType: Find<T, T>.Match(Template)
  fullName: MongoDB.Entities.Find<T, T>.Match(MongoDB.Entities.Template)
  nameWithType.vb: Find(Of T, T).Match(Template)
  fullName.vb: MongoDB.Entities.Find(Of T, T).Match(MongoDB.Entities.Template)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Template)
    name: Match
    nameWithType: Find<T, T>.Match
    fullName: MongoDB.Entities.Find<T, T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Template)
    name: Match
    nameWithType: Find(Of T, T).Match
    fullName: MongoDB.Entities.Find(Of T, T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  commentId: M:MongoDB.Entities.Find{`0,`0}.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  name: Match(Search, String, Boolean, Boolean, String)
  nameWithType: Find<T, T>.Match(Search, String, Boolean, Boolean, String)
  fullName: MongoDB.Entities.Find<T, T>.Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
  nameWithType.vb: Find(Of T, T).Match(Search, String, Boolean, Boolean, String)
  fullName.vb: MongoDB.Entities.Find(Of T, T).Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
    name: Match
    nameWithType: Find<T, T>.Match
    fullName: MongoDB.Entities.Find<T, T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Search
    name: Search
    nameWithType: Search
    fullName: MongoDB.Entities.Search
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
    name: Match
    nameWithType: Find(Of T, T).Match
    fullName: MongoDB.Entities.Find(Of T, T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Search
    name: Search
    nameWithType: Search
    fullName: MongoDB.Entities.Search
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Match(Expression{Func{{T},System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  commentId: M:MongoDB.Entities.Find{`0,`0}.Match(Expression{Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  name: Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  nameWithType: Find<T, T>.Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  fullName: MongoDB.Entities.Find<T, T>.Match(Expression<Func<T, System.Object>>, MongoDB.Entities.Coordinates2D, System.Nullable<System.Double>, System.Nullable<System.Double>)
  nameWithType.vb: Find(Of T, T).Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
  fullName.vb: MongoDB.Entities.Find(Of T, T).Match(Expression(Of Func(Of T, System.Object)), MongoDB.Entities.Coordinates2D, System.Nullable(Of System.Double), System.Nullable(Of System.Double))
  name.vb: Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
    name: Match
    nameWithType: Find<T, T>.Match
    fullName: MongoDB.Entities.Find<T, T>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Coordinates2D
    name: Coordinates2D
    nameWithType: Coordinates2D
    fullName: MongoDB.Entities.Coordinates2D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
    name: Match
    nameWithType: Find(Of T, T).Match
    fullName: MongoDB.Entities.Find(Of T, T).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Coordinates2D
    name: Coordinates2D
    nameWithType: Coordinates2D
    fullName: MongoDB.Entities.Coordinates2D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.MatchString(System.String)
  commentId: M:MongoDB.Entities.Find{`0,`0}.MatchString(System.String)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.MatchString(System.String)
  name: MatchString(String)
  nameWithType: Find<T, T>.MatchString(String)
  fullName: MongoDB.Entities.Find<T, T>.MatchString(System.String)
  nameWithType.vb: Find(Of T, T).MatchString(String)
  fullName.vb: MongoDB.Entities.Find(Of T, T).MatchString(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.MatchString(System.String)
    name: MatchString
    nameWithType: Find<T, T>.MatchString
    fullName: MongoDB.Entities.Find<T, T>.MatchString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.MatchString(System.String)
    name: MatchString
    nameWithType: Find(Of T, T).MatchString
    fullName: MongoDB.Entities.Find(Of T, T).MatchString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.MatchExpression(System.String)
  commentId: M:MongoDB.Entities.Find{`0,`0}.MatchExpression(System.String)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.MatchExpression(System.String)
  name: MatchExpression(String)
  nameWithType: Find<T, T>.MatchExpression(String)
  fullName: MongoDB.Entities.Find<T, T>.MatchExpression(System.String)
  nameWithType.vb: Find(Of T, T).MatchExpression(String)
  fullName.vb: MongoDB.Entities.Find(Of T, T).MatchExpression(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.MatchExpression(System.String)
    name: MatchExpression
    nameWithType: Find<T, T>.MatchExpression
    fullName: MongoDB.Entities.Find<T, T>.MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.MatchExpression(System.String)
    name: MatchExpression
    nameWithType: Find(Of T, T).MatchExpression
    fullName: MongoDB.Entities.Find(Of T, T).MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.MatchExpression(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Find{`0,`0}.MatchExpression(MongoDB.Entities.Template)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.MatchExpression(MongoDB.Entities.Template)
  name: MatchExpression(Template)
  nameWithType: Find<T, T>.MatchExpression(Template)
  fullName: MongoDB.Entities.Find<T, T>.MatchExpression(MongoDB.Entities.Template)
  nameWithType.vb: Find(Of T, T).MatchExpression(Template)
  fullName.vb: MongoDB.Entities.Find(Of T, T).MatchExpression(MongoDB.Entities.Template)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.MatchExpression(MongoDB.Entities.Template)
    name: MatchExpression
    nameWithType: Find<T, T>.MatchExpression
    fullName: MongoDB.Entities.Find<T, T>.MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.MatchExpression(MongoDB.Entities.Template)
    name: MatchExpression
    nameWithType: Find(Of T, T).MatchExpression
    fullName: MongoDB.Entities.Find(Of T, T).MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Sort(Expression{Func{{T},System.Object}},MongoDB.Entities.Order)
  commentId: M:MongoDB.Entities.Find{`0,`0}.Sort(Expression{Func{`0,System.Object}},MongoDB.Entities.Order)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Sort(Expression{Func{`0,System.Object}},MongoDB.Entities.Order)
  name: Sort(Expression<Func<T, Object>>, Order)
  nameWithType: Find<T, T>.Sort(Expression<Func<T, Object>>, Order)
  fullName: MongoDB.Entities.Find<T, T>.Sort(Expression<Func<T, System.Object>>, MongoDB.Entities.Order)
  nameWithType.vb: Find(Of T, T).Sort(Expression(Of Func(Of T, Object)), Order)
  fullName.vb: MongoDB.Entities.Find(Of T, T).Sort(Expression(Of Func(Of T, System.Object)), MongoDB.Entities.Order)
  name.vb: Sort(Expression(Of Func(Of T, Object)), Order)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Sort(Expression{Func{`0,System.Object}},MongoDB.Entities.Order)
    name: Sort
    nameWithType: Find<T, T>.Sort
    fullName: MongoDB.Entities.Find<T, T>.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Order
    name: Order
    nameWithType: Order
    fullName: MongoDB.Entities.Order
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Sort(Expression{Func{`0,System.Object}},MongoDB.Entities.Order)
    name: Sort
    nameWithType: Find(Of T, T).Sort
    fullName: MongoDB.Entities.Find(Of T, T).Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Order
    name: Order
    nameWithType: Order
    fullName: MongoDB.Entities.Order
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.SortByTextScore
  commentId: M:MongoDB.Entities.Find{`0,`0}.SortByTextScore
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.SortByTextScore
  name: SortByTextScore()
  nameWithType: Find<T, T>.SortByTextScore()
  fullName: MongoDB.Entities.Find<T, T>.SortByTextScore()
  nameWithType.vb: Find(Of T, T).SortByTextScore()
  fullName.vb: MongoDB.Entities.Find(Of T, T).SortByTextScore()
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.SortByTextScore
    name: SortByTextScore
    nameWithType: Find<T, T>.SortByTextScore
    fullName: MongoDB.Entities.Find<T, T>.SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.SortByTextScore
    name: SortByTextScore
    nameWithType: Find(Of T, T).SortByTextScore
    fullName: MongoDB.Entities.Find(Of T, T).SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.SortByTextScore(Expression{Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Find{`0,`0}.SortByTextScore(Expression{Func{`0,System.Object}})
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.SortByTextScore(Expression{Func{`0,System.Object}})
  name: SortByTextScore(Expression<Func<T, Object>>)
  nameWithType: Find<T, T>.SortByTextScore(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Find<T, T>.SortByTextScore(Expression<Func<T, System.Object>>)
  nameWithType.vb: Find(Of T, T).SortByTextScore(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Find(Of T, T).SortByTextScore(Expression(Of Func(Of T, System.Object)))
  name.vb: SortByTextScore(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.SortByTextScore(Expression{Func{`0,System.Object}})
    name: SortByTextScore
    nameWithType: Find<T, T>.SortByTextScore
    fullName: MongoDB.Entities.Find<T, T>.SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.SortByTextScore(Expression{Func{`0,System.Object}})
    name: SortByTextScore
    nameWithType: Find(Of T, T).SortByTextScore
    fullName: MongoDB.Entities.Find(Of T, T).SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Sort(Func{SortDefinitionBuilder{{T}},SortDefinition{{T}}})
  commentId: M:MongoDB.Entities.Find{`0,`0}.Sort(Func{SortDefinitionBuilder{`0},SortDefinition{`0}})
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Sort(Func{SortDefinitionBuilder{`0},SortDefinition{`0}})
  name: Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  nameWithType: Find<T, T>.Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  fullName: MongoDB.Entities.Find<T, T>.Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  nameWithType.vb: Find(Of T, T).Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
  fullName.vb: MongoDB.Entities.Find(Of T, T).Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
  name.vb: Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Sort(Func{SortDefinitionBuilder{`0},SortDefinition{`0}})
    name: Sort
    nameWithType: Find<T, T>.Sort
    fullName: MongoDB.Entities.Find<T, T>.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: SortDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SortDefinition`1
    name: SortDefinition
    nameWithType: SortDefinition
    fullName: SortDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Sort(Func{SortDefinitionBuilder{`0},SortDefinition{`0}})
    name: Sort
    nameWithType: Find(Of T, T).Sort
    fullName: MongoDB.Entities.Find(Of T, T).Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: SortDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SortDefinition`1
    name: SortDefinition
    nameWithType: SortDefinition
    fullName: SortDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Skip(System.Int32)
  commentId: M:MongoDB.Entities.Find{`0,`0}.Skip(System.Int32)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Skip(System.Int32)
  name: Skip(Int32)
  nameWithType: Find<T, T>.Skip(Int32)
  fullName: MongoDB.Entities.Find<T, T>.Skip(System.Int32)
  nameWithType.vb: Find(Of T, T).Skip(Int32)
  fullName.vb: MongoDB.Entities.Find(Of T, T).Skip(System.Int32)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Skip(System.Int32)
    name: Skip
    nameWithType: Find<T, T>.Skip
    fullName: MongoDB.Entities.Find<T, T>.Skip
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Skip(System.Int32)
    name: Skip
    nameWithType: Find(Of T, T).Skip
    fullName: MongoDB.Entities.Find(Of T, T).Skip
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Limit(System.Int32)
  commentId: M:MongoDB.Entities.Find{`0,`0}.Limit(System.Int32)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Limit(System.Int32)
  name: Limit(Int32)
  nameWithType: Find<T, T>.Limit(Int32)
  fullName: MongoDB.Entities.Find<T, T>.Limit(System.Int32)
  nameWithType.vb: Find(Of T, T).Limit(Int32)
  fullName.vb: MongoDB.Entities.Find(Of T, T).Limit(System.Int32)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Limit(System.Int32)
    name: Limit
    nameWithType: Find<T, T>.Limit
    fullName: MongoDB.Entities.Find<T, T>.Limit
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Limit(System.Int32)
    name: Limit
    nameWithType: Find(Of T, T).Limit
    fullName: MongoDB.Entities.Find(Of T, T).Limit
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Project(Expression{Func{{T},{T}}})
  commentId: M:MongoDB.Entities.Find{`0,`0}.Project(Expression{Func{`0,`0}})
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Project(Expression{Func{`0,`1}})
  name: Project(Expression<Func<T, T>>)
  nameWithType: Find<T, T>.Project(Expression<Func<T, T>>)
  fullName: MongoDB.Entities.Find<T, T>.Project(Expression<Func<T, T>>)
  nameWithType.vb: Find(Of T, T).Project(Expression(Of Func(Of T, T)))
  fullName.vb: MongoDB.Entities.Find(Of T, T).Project(Expression(Of Func(Of T, T)))
  name.vb: Project(Expression(Of Func(Of T, T)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Project(Expression{Func{`0,`1}})
    name: Project
    nameWithType: Find<T, T>.Project
    fullName: MongoDB.Entities.Find<T, T>.Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Project(Expression{Func{`0,`1}})
    name: Project
    nameWithType: Find(Of T, T).Project
    fullName: MongoDB.Entities.Find(Of T, T).Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Project(Func{ProjectionDefinitionBuilder{{T}},ProjectionDefinition{{T},{T}}})
  commentId: M:MongoDB.Entities.Find{`0,`0}.Project(Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`0}})
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Project(Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`1}})
  name: Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>)
  nameWithType: Find<T, T>.Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>)
  fullName: MongoDB.Entities.Find<T, T>.Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, T>>)
  nameWithType.vb: Find(Of T, T).Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T)))
  fullName.vb: MongoDB.Entities.Find(Of T, T).Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T)))
  name.vb: Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, T)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Project(Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`1}})
    name: Project
    nameWithType: Find<T, T>.Project
    fullName: MongoDB.Entities.Find<T, T>.Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: ProjectionDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: ProjectionDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Project(Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`1}})
    name: Project
    nameWithType: Find(Of T, T).Project
    fullName: MongoDB.Entities.Find(Of T, T).Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: ProjectionDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: ProjectionDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.ProjectExcluding(Expression{Func{{T},System.Object}})
  commentId: M:MongoDB.Entities.Find{`0,`0}.ProjectExcluding(Expression{Func{`0,System.Object}})
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.ProjectExcluding(Expression{Func{`0,System.Object}})
  name: ProjectExcluding(Expression<Func<T, Object>>)
  nameWithType: Find<T, T>.ProjectExcluding(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Find<T, T>.ProjectExcluding(Expression<Func<T, System.Object>>)
  nameWithType.vb: Find(Of T, T).ProjectExcluding(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Find(Of T, T).ProjectExcluding(Expression(Of Func(Of T, System.Object)))
  name.vb: ProjectExcluding(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ProjectExcluding(Expression{Func{`0,System.Object}})
    name: ProjectExcluding
    nameWithType: Find<T, T>.ProjectExcluding
    fullName: MongoDB.Entities.Find<T, T>.ProjectExcluding
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ProjectExcluding(Expression{Func{`0,System.Object}})
    name: ProjectExcluding
    nameWithType: Find(Of T, T).ProjectExcluding
    fullName: MongoDB.Entities.Find(Of T, T).ProjectExcluding
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.Option(Action{FindOptions{{T},{T}}})
  commentId: M:MongoDB.Entities.Find{`0,`0}.Option(Action{FindOptions{`0,`0}})
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.Option(Action{FindOptions{`0,`1}})
  name: Option(Action<FindOptions<T, T>>)
  nameWithType: Find<T, T>.Option(Action<FindOptions<T, T>>)
  fullName: MongoDB.Entities.Find<T, T>.Option(Action<FindOptions<T, T>>)
  nameWithType.vb: Find(Of T, T).Option(Action(Of FindOptions(Of T, T)))
  fullName.vb: MongoDB.Entities.Find(Of T, T).Option(Action(Of FindOptions(Of T, T)))
  name.vb: Option(Action(Of FindOptions(Of T, T)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Option(Action{FindOptions{`0,`1}})
    name: Option
    nameWithType: Find<T, T>.Option
    fullName: MongoDB.Entities.Find<T, T>.Option
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FindOptions`2
    name: FindOptions
    nameWithType: FindOptions
    fullName: FindOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Option(Action{FindOptions{`0,`1}})
    name: Option
    nameWithType: Find(Of T, T).Option
    fullName: MongoDB.Entities.Find(Of T, T).Option
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FindOptions`2
    name: FindOptions
    nameWithType: FindOptions
    fullName: FindOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.IgnoreGlobalFilters
  commentId: M:MongoDB.Entities.Find{`0,`0}.IgnoreGlobalFilters
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.IgnoreGlobalFilters
  name: IgnoreGlobalFilters()
  nameWithType: Find<T, T>.IgnoreGlobalFilters()
  fullName: MongoDB.Entities.Find<T, T>.IgnoreGlobalFilters()
  nameWithType.vb: Find(Of T, T).IgnoreGlobalFilters()
  fullName.vb: MongoDB.Entities.Find(Of T, T).IgnoreGlobalFilters()
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.IgnoreGlobalFilters
    name: IgnoreGlobalFilters
    nameWithType: Find<T, T>.IgnoreGlobalFilters
    fullName: MongoDB.Entities.Find<T, T>.IgnoreGlobalFilters
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.IgnoreGlobalFilters
    name: IgnoreGlobalFilters
    nameWithType: Find(Of T, T).IgnoreGlobalFilters
    fullName: MongoDB.Entities.Find(Of T, T).IgnoreGlobalFilters
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.ExecuteAsync(CancellationToken)
  commentId: M:MongoDB.Entities.Find{`0,`0}.ExecuteAsync(CancellationToken)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.ExecuteAsync(CancellationToken)
  name: ExecuteAsync(CancellationToken)
  nameWithType: Find<T, T>.ExecuteAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, T>.ExecuteAsync(CancellationToken)
  nameWithType.vb: Find(Of T, T).ExecuteAsync(CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, T).ExecuteAsync(CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ExecuteAsync(CancellationToken)
    name: ExecuteAsync
    nameWithType: Find<T, T>.ExecuteAsync
    fullName: MongoDB.Entities.Find<T, T>.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ExecuteAsync(CancellationToken)
    name: ExecuteAsync
    nameWithType: Find(Of T, T).ExecuteAsync
    fullName: MongoDB.Entities.Find(Of T, T).ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.ExecuteSingleAsync(CancellationToken)
  commentId: M:MongoDB.Entities.Find{`0,`0}.ExecuteSingleAsync(CancellationToken)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.ExecuteSingleAsync(CancellationToken)
  name: ExecuteSingleAsync(CancellationToken)
  nameWithType: Find<T, T>.ExecuteSingleAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, T>.ExecuteSingleAsync(CancellationToken)
  nameWithType.vb: Find(Of T, T).ExecuteSingleAsync(CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, T).ExecuteSingleAsync(CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ExecuteSingleAsync(CancellationToken)
    name: ExecuteSingleAsync
    nameWithType: Find<T, T>.ExecuteSingleAsync
    fullName: MongoDB.Entities.Find<T, T>.ExecuteSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ExecuteSingleAsync(CancellationToken)
    name: ExecuteSingleAsync
    nameWithType: Find(Of T, T).ExecuteSingleAsync
    fullName: MongoDB.Entities.Find(Of T, T).ExecuteSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.ExecuteFirstAsync(CancellationToken)
  commentId: M:MongoDB.Entities.Find{`0,`0}.ExecuteFirstAsync(CancellationToken)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.ExecuteFirstAsync(CancellationToken)
  name: ExecuteFirstAsync(CancellationToken)
  nameWithType: Find<T, T>.ExecuteFirstAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, T>.ExecuteFirstAsync(CancellationToken)
  nameWithType.vb: Find(Of T, T).ExecuteFirstAsync(CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, T).ExecuteFirstAsync(CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ExecuteFirstAsync(CancellationToken)
    name: ExecuteFirstAsync
    nameWithType: Find<T, T>.ExecuteFirstAsync
    fullName: MongoDB.Entities.Find<T, T>.ExecuteFirstAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ExecuteFirstAsync(CancellationToken)
    name: ExecuteFirstAsync
    nameWithType: Find(Of T, T).ExecuteFirstAsync
    fullName: MongoDB.Entities.Find(Of T, T).ExecuteFirstAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.ExecuteAnyAsync(CancellationToken)
  commentId: M:MongoDB.Entities.Find{`0,`0}.ExecuteAnyAsync(CancellationToken)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.ExecuteAnyAsync(CancellationToken)
  name: ExecuteAnyAsync(CancellationToken)
  nameWithType: Find<T, T>.ExecuteAnyAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, T>.ExecuteAnyAsync(CancellationToken)
  nameWithType.vb: Find(Of T, T).ExecuteAnyAsync(CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, T).ExecuteAnyAsync(CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ExecuteAnyAsync(CancellationToken)
    name: ExecuteAnyAsync
    nameWithType: Find<T, T>.ExecuteAnyAsync
    fullName: MongoDB.Entities.Find<T, T>.ExecuteAnyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ExecuteAnyAsync(CancellationToken)
    name: ExecuteAnyAsync
    nameWithType: Find(Of T, T).ExecuteAnyAsync
    fullName: MongoDB.Entities.Find(Of T, T).ExecuteAnyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find{{T},{T}}.ExecuteCursorAsync(CancellationToken)
  commentId: M:MongoDB.Entities.Find{`0,`0}.ExecuteCursorAsync(CancellationToken)
  parent: MongoDB.Entities.Find{{T},{T}}
  definition: MongoDB.Entities.Find`2.ExecuteCursorAsync(CancellationToken)
  name: ExecuteCursorAsync(CancellationToken)
  nameWithType: Find<T, T>.ExecuteCursorAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, T>.ExecuteCursorAsync(CancellationToken)
  nameWithType.vb: Find(Of T, T).ExecuteCursorAsync(CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, T).ExecuteCursorAsync(CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ExecuteCursorAsync(CancellationToken)
    name: ExecuteCursorAsync
    nameWithType: Find<T, T>.ExecuteCursorAsync
    fullName: MongoDB.Entities.Find<T, T>.ExecuteCursorAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ExecuteCursorAsync(CancellationToken)
    name: ExecuteCursorAsync
    nameWithType: Find(Of T, T).ExecuteCursorAsync
    fullName: MongoDB.Entities.Find(Of T, T).ExecuteCursorAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2
  commentId: T:MongoDB.Entities.Find`2
  parent: MongoDB.Entities
  name: Find<T, TProjection>
  nameWithType: Find<T, TProjection>
  fullName: MongoDB.Entities.Find<T, TProjection>
  nameWithType.vb: Find(Of T, TProjection)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection)
  name.vb: Find(Of T, TProjection)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.Find`2
    name: Find
    nameWithType: Find
    fullName: MongoDB.Entities.Find
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.OneAsync(System.String,CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.OneAsync(System.String,CancellationToken)
  isExternal: true
  name: OneAsync(String, CancellationToken)
  nameWithType: Find<T, TProjection>.OneAsync(String, CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.OneAsync(System.String, CancellationToken)
  nameWithType.vb: Find(Of T, TProjection).OneAsync(String, CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).OneAsync(System.String, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.OneAsync(System.String,CancellationToken)
    name: OneAsync
    nameWithType: Find<T, TProjection>.OneAsync
    fullName: MongoDB.Entities.Find<T, TProjection>.OneAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.OneAsync(System.String,CancellationToken)
    name: OneAsync
    nameWithType: Find(Of T, TProjection).OneAsync
    fullName: MongoDB.Entities.Find(Of T, TProjection).OneAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.ManyAsync(Expression{Func{`0,System.Boolean}},CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ManyAsync(Expression{Func{`0,System.Boolean}},CancellationToken)
  isExternal: true
  name: ManyAsync(Expression<Func<T, Boolean>>, CancellationToken)
  nameWithType: Find<T, TProjection>.ManyAsync(Expression<Func<T, Boolean>>, CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ManyAsync(Expression<Func<T, System.Boolean>>, CancellationToken)
  nameWithType.vb: Find(Of T, TProjection).ManyAsync(Expression(Of Func(Of T, Boolean)), CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ManyAsync(Expression(Of Func(Of T, System.Boolean)), CancellationToken)
  name.vb: ManyAsync(Expression(Of Func(Of T, Boolean)), CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ManyAsync(Expression{Func{`0,System.Boolean}},CancellationToken)
    name: ManyAsync
    nameWithType: Find<T, TProjection>.ManyAsync
    fullName: MongoDB.Entities.Find<T, TProjection>.ManyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ManyAsync(Expression{Func{`0,System.Boolean}},CancellationToken)
    name: ManyAsync
    nameWithType: Find(Of T, TProjection).ManyAsync
    fullName: MongoDB.Entities.Find(Of T, TProjection).ManyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.ManyAsync(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}},CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ManyAsync(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}},CancellationToken)
  isExternal: true
  name: ManyAsync(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, CancellationToken)
  nameWithType: Find<T, TProjection>.ManyAsync(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ManyAsync(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>, CancellationToken)
  nameWithType.vb: Find(Of T, TProjection).ManyAsync(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ManyAsync(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), CancellationToken)
  name.vb: ManyAsync(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)), CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ManyAsync(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}},CancellationToken)
    name: ManyAsync
    nameWithType: Find<T, TProjection>.ManyAsync
    fullName: MongoDB.Entities.Find<T, TProjection>.ManyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ManyAsync(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}},CancellationToken)
    name: ManyAsync
    nameWithType: Find(Of T, TProjection).ManyAsync
    fullName: MongoDB.Entities.Find(Of T, TProjection).ManyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.MatchID(System.String)
  commentId: M:MongoDB.Entities.Find`2.MatchID(System.String)
  isExternal: true
  name: MatchID(String)
  nameWithType: Find<T, TProjection>.MatchID(String)
  fullName: MongoDB.Entities.Find<T, TProjection>.MatchID(System.String)
  nameWithType.vb: Find(Of T, TProjection).MatchID(String)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).MatchID(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.MatchID(System.String)
    name: MatchID
    nameWithType: Find<T, TProjection>.MatchID
    fullName: MongoDB.Entities.Find<T, TProjection>.MatchID
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.MatchID(System.String)
    name: MatchID
    nameWithType: Find(Of T, TProjection).MatchID
    fullName: MongoDB.Entities.Find(Of T, TProjection).MatchID
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Match(System.String)
  commentId: M:MongoDB.Entities.Find`2.Match(System.String)
  isExternal: true
  name: Match(String)
  nameWithType: Find<T, TProjection>.Match(String)
  fullName: MongoDB.Entities.Find<T, TProjection>.Match(System.String)
  nameWithType.vb: Find(Of T, TProjection).Match(String)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Match(System.String)
    name: Match
    nameWithType: Find<T, TProjection>.Match
    fullName: MongoDB.Entities.Find<T, TProjection>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Match(System.String)
    name: Match
    nameWithType: Find(Of T, TProjection).Match
    fullName: MongoDB.Entities.Find(Of T, TProjection).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Boolean}})
  commentId: M:MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Boolean}})
  isExternal: true
  name: Match(Expression<Func<T, Boolean>>)
  nameWithType: Find<T, TProjection>.Match(Expression<Func<T, Boolean>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Match(Expression<Func<T, System.Boolean>>)
  nameWithType.vb: Find(Of T, TProjection).Match(Expression(Of Func(Of T, Boolean)))
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match(Expression(Of Func(Of T, System.Boolean)))
  name.vb: Match(Expression(Of Func(Of T, Boolean)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Boolean}})
    name: Match
    nameWithType: Find<T, TProjection>.Match
    fullName: MongoDB.Entities.Find<T, TProjection>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Boolean}})
    name: Match
    nameWithType: Find(Of T, TProjection).Match
    fullName: MongoDB.Entities.Find(Of T, TProjection).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Match(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}})
  commentId: M:MongoDB.Entities.Find`2.Match(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}})
  isExternal: true
  name: Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  nameWithType: Find<T, TProjection>.Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  nameWithType.vb: Find(Of T, TProjection).Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  name.vb: Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Match(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}})
    name: Match
    nameWithType: Find<T, TProjection>.Match
    fullName: MongoDB.Entities.Find<T, TProjection>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Match(Func{FilterDefinitionBuilder{`0},FilterDefinition{`0}})
    name: Match
    nameWithType: Find(Of T, TProjection).Match
    fullName: MongoDB.Entities.Find(Of T, TProjection).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Find`2.Match(MongoDB.Entities.Template)
  name: Match(Template)
  nameWithType: Find<T, TProjection>.Match(Template)
  fullName: MongoDB.Entities.Find<T, TProjection>.Match(MongoDB.Entities.Template)
  nameWithType.vb: Find(Of T, TProjection).Match(Template)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match(MongoDB.Entities.Template)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Template)
    name: Match
    nameWithType: Find<T, TProjection>.Match
    fullName: MongoDB.Entities.Find<T, TProjection>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Template)
    name: Match
    nameWithType: Find(Of T, TProjection).Match
    fullName: MongoDB.Entities.Find(Of T, TProjection).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  commentId: M:MongoDB.Entities.Find`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  isExternal: true
  name: Match(Search, String, Boolean, Boolean, String)
  nameWithType: Find<T, TProjection>.Match(Search, String, Boolean, Boolean, String)
  fullName: MongoDB.Entities.Find<T, TProjection>.Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
  nameWithType.vb: Find(Of T, TProjection).Match(Search, String, Boolean, Boolean, String)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
    name: Match
    nameWithType: Find<T, TProjection>.Match
    fullName: MongoDB.Entities.Find<T, TProjection>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Search
    name: Search
    nameWithType: Search
    fullName: MongoDB.Entities.Search
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
    name: Match
    nameWithType: Find(Of T, TProjection).Match
    fullName: MongoDB.Entities.Find(Of T, TProjection).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Search
    name: Search
    nameWithType: Search
    fullName: MongoDB.Entities.Search
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  commentId: M:MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  isExternal: true
  name: Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  nameWithType: Find<T, TProjection>.Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Match(Expression<Func<T, System.Object>>, MongoDB.Entities.Coordinates2D, System.Nullable<System.Double>, System.Nullable<System.Double>)
  nameWithType.vb: Find(Of T, TProjection).Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Match(Expression(Of Func(Of T, System.Object)), MongoDB.Entities.Coordinates2D, System.Nullable(Of System.Double), System.Nullable(Of System.Double))
  name.vb: Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
    name: Match
    nameWithType: Find<T, TProjection>.Match
    fullName: MongoDB.Entities.Find<T, TProjection>.Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Coordinates2D
    name: Coordinates2D
    nameWithType: Coordinates2D
    fullName: MongoDB.Entities.Coordinates2D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Match(Expression{Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
    name: Match
    nameWithType: Find(Of T, TProjection).Match
    fullName: MongoDB.Entities.Find(Of T, TProjection).Match
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Coordinates2D
    name: Coordinates2D
    nameWithType: Coordinates2D
    fullName: MongoDB.Entities.Coordinates2D
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.MatchString(System.String)
  commentId: M:MongoDB.Entities.Find`2.MatchString(System.String)
  isExternal: true
  name: MatchString(String)
  nameWithType: Find<T, TProjection>.MatchString(String)
  fullName: MongoDB.Entities.Find<T, TProjection>.MatchString(System.String)
  nameWithType.vb: Find(Of T, TProjection).MatchString(String)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).MatchString(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.MatchString(System.String)
    name: MatchString
    nameWithType: Find<T, TProjection>.MatchString
    fullName: MongoDB.Entities.Find<T, TProjection>.MatchString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.MatchString(System.String)
    name: MatchString
    nameWithType: Find(Of T, TProjection).MatchString
    fullName: MongoDB.Entities.Find(Of T, TProjection).MatchString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.MatchExpression(System.String)
  commentId: M:MongoDB.Entities.Find`2.MatchExpression(System.String)
  isExternal: true
  name: MatchExpression(String)
  nameWithType: Find<T, TProjection>.MatchExpression(String)
  fullName: MongoDB.Entities.Find<T, TProjection>.MatchExpression(System.String)
  nameWithType.vb: Find(Of T, TProjection).MatchExpression(String)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).MatchExpression(System.String)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.MatchExpression(System.String)
    name: MatchExpression
    nameWithType: Find<T, TProjection>.MatchExpression
    fullName: MongoDB.Entities.Find<T, TProjection>.MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.MatchExpression(System.String)
    name: MatchExpression
    nameWithType: Find(Of T, TProjection).MatchExpression
    fullName: MongoDB.Entities.Find(Of T, TProjection).MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.MatchExpression(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.Find`2.MatchExpression(MongoDB.Entities.Template)
  name: MatchExpression(Template)
  nameWithType: Find<T, TProjection>.MatchExpression(Template)
  fullName: MongoDB.Entities.Find<T, TProjection>.MatchExpression(MongoDB.Entities.Template)
  nameWithType.vb: Find(Of T, TProjection).MatchExpression(Template)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).MatchExpression(MongoDB.Entities.Template)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.MatchExpression(MongoDB.Entities.Template)
    name: MatchExpression
    nameWithType: Find<T, TProjection>.MatchExpression
    fullName: MongoDB.Entities.Find<T, TProjection>.MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.MatchExpression(MongoDB.Entities.Template)
    name: MatchExpression
    nameWithType: Find(Of T, TProjection).MatchExpression
    fullName: MongoDB.Entities.Find(Of T, TProjection).MatchExpression
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.Template
    name: Template
    nameWithType: Template
    fullName: MongoDB.Entities.Template
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Sort(Expression{Func{`0,System.Object}},MongoDB.Entities.Order)
  commentId: M:MongoDB.Entities.Find`2.Sort(Expression{Func{`0,System.Object}},MongoDB.Entities.Order)
  isExternal: true
  name: Sort(Expression<Func<T, Object>>, Order)
  nameWithType: Find<T, TProjection>.Sort(Expression<Func<T, Object>>, Order)
  fullName: MongoDB.Entities.Find<T, TProjection>.Sort(Expression<Func<T, System.Object>>, MongoDB.Entities.Order)
  nameWithType.vb: Find(Of T, TProjection).Sort(Expression(Of Func(Of T, Object)), Order)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Sort(Expression(Of Func(Of T, System.Object)), MongoDB.Entities.Order)
  name.vb: Sort(Expression(Of Func(Of T, Object)), Order)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Sort(Expression{Func{`0,System.Object}},MongoDB.Entities.Order)
    name: Sort
    nameWithType: Find<T, TProjection>.Sort
    fullName: MongoDB.Entities.Find<T, TProjection>.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Order
    name: Order
    nameWithType: Order
    fullName: MongoDB.Entities.Order
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Sort(Expression{Func{`0,System.Object}},MongoDB.Entities.Order)
    name: Sort
    nameWithType: Find(Of T, TProjection).Sort
    fullName: MongoDB.Entities.Find(Of T, TProjection).Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Entities.Order
    name: Order
    nameWithType: Order
    fullName: MongoDB.Entities.Order
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.SortByTextScore
  commentId: M:MongoDB.Entities.Find`2.SortByTextScore
  name: SortByTextScore()
  nameWithType: Find<T, TProjection>.SortByTextScore()
  fullName: MongoDB.Entities.Find<T, TProjection>.SortByTextScore()
  nameWithType.vb: Find(Of T, TProjection).SortByTextScore()
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).SortByTextScore()
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.SortByTextScore
    name: SortByTextScore
    nameWithType: Find<T, TProjection>.SortByTextScore
    fullName: MongoDB.Entities.Find<T, TProjection>.SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.SortByTextScore
    name: SortByTextScore
    nameWithType: Find(Of T, TProjection).SortByTextScore
    fullName: MongoDB.Entities.Find(Of T, TProjection).SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.SortByTextScore(Expression{Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Find`2.SortByTextScore(Expression{Func{`0,System.Object}})
  isExternal: true
  name: SortByTextScore(Expression<Func<T, Object>>)
  nameWithType: Find<T, TProjection>.SortByTextScore(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.SortByTextScore(Expression<Func<T, System.Object>>)
  nameWithType.vb: Find(Of T, TProjection).SortByTextScore(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).SortByTextScore(Expression(Of Func(Of T, System.Object)))
  name.vb: SortByTextScore(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.SortByTextScore(Expression{Func{`0,System.Object}})
    name: SortByTextScore
    nameWithType: Find<T, TProjection>.SortByTextScore
    fullName: MongoDB.Entities.Find<T, TProjection>.SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.SortByTextScore(Expression{Func{`0,System.Object}})
    name: SortByTextScore
    nameWithType: Find(Of T, TProjection).SortByTextScore
    fullName: MongoDB.Entities.Find(Of T, TProjection).SortByTextScore
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Sort(Func{SortDefinitionBuilder{`0},SortDefinition{`0}})
  commentId: M:MongoDB.Entities.Find`2.Sort(Func{SortDefinitionBuilder{`0},SortDefinition{`0}})
  isExternal: true
  name: Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  nameWithType: Find<T, TProjection>.Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  nameWithType.vb: Find(Of T, TProjection).Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
  name.vb: Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Sort(Func{SortDefinitionBuilder{`0},SortDefinition{`0}})
    name: Sort
    nameWithType: Find<T, TProjection>.Sort
    fullName: MongoDB.Entities.Find<T, TProjection>.Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: SortDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SortDefinition`1
    name: SortDefinition
    nameWithType: SortDefinition
    fullName: SortDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Sort(Func{SortDefinitionBuilder{`0},SortDefinition{`0}})
    name: Sort
    nameWithType: Find(Of T, TProjection).Sort
    fullName: MongoDB.Entities.Find(Of T, TProjection).Sort
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: SortDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SortDefinition`1
    name: SortDefinition
    nameWithType: SortDefinition
    fullName: SortDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Skip(System.Int32)
  commentId: M:MongoDB.Entities.Find`2.Skip(System.Int32)
  isExternal: true
  name: Skip(Int32)
  nameWithType: Find<T, TProjection>.Skip(Int32)
  fullName: MongoDB.Entities.Find<T, TProjection>.Skip(System.Int32)
  nameWithType.vb: Find(Of T, TProjection).Skip(Int32)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Skip(System.Int32)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Skip(System.Int32)
    name: Skip
    nameWithType: Find<T, TProjection>.Skip
    fullName: MongoDB.Entities.Find<T, TProjection>.Skip
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Skip(System.Int32)
    name: Skip
    nameWithType: Find(Of T, TProjection).Skip
    fullName: MongoDB.Entities.Find(Of T, TProjection).Skip
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Limit(System.Int32)
  commentId: M:MongoDB.Entities.Find`2.Limit(System.Int32)
  isExternal: true
  name: Limit(Int32)
  nameWithType: Find<T, TProjection>.Limit(Int32)
  fullName: MongoDB.Entities.Find<T, TProjection>.Limit(System.Int32)
  nameWithType.vb: Find(Of T, TProjection).Limit(Int32)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Limit(System.Int32)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Limit(System.Int32)
    name: Limit
    nameWithType: Find<T, TProjection>.Limit
    fullName: MongoDB.Entities.Find<T, TProjection>.Limit
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Limit(System.Int32)
    name: Limit
    nameWithType: Find(Of T, TProjection).Limit
    fullName: MongoDB.Entities.Find(Of T, TProjection).Limit
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Project(Expression{Func{`0,`1}})
  commentId: M:MongoDB.Entities.Find`2.Project(Expression{Func{`0,`1}})
  isExternal: true
  name: Project(Expression<Func<T, TProjection>>)
  nameWithType: Find<T, TProjection>.Project(Expression<Func<T, TProjection>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Project(Expression<Func<T, TProjection>>)
  nameWithType.vb: Find(Of T, TProjection).Project(Expression(Of Func(Of T, TProjection)))
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Project(Expression(Of Func(Of T, TProjection)))
  name.vb: Project(Expression(Of Func(Of T, TProjection)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Project(Expression{Func{`0,`1}})
    name: Project
    nameWithType: Find<T, TProjection>.Project
    fullName: MongoDB.Entities.Find<T, TProjection>.Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Project(Expression{Func{`0,`1}})
    name: Project
    nameWithType: Find(Of T, TProjection).Project
    fullName: MongoDB.Entities.Find(Of T, TProjection).Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Project(Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`1}})
  commentId: M:MongoDB.Entities.Find`2.Project(Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`1}})
  isExternal: true
  name: Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>)
  nameWithType: Find<T, TProjection>.Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>)
  nameWithType.vb: Find(Of T, TProjection).Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection)))
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection)))
  name.vb: Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Project(Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`1}})
    name: Project
    nameWithType: Find<T, TProjection>.Project
    fullName: MongoDB.Entities.Find<T, TProjection>.Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: ProjectionDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: ProjectionDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Project(Func{ProjectionDefinitionBuilder{`0},ProjectionDefinition{`0,`1}})
    name: Project
    nameWithType: Find(Of T, TProjection).Project
    fullName: MongoDB.Entities.Find(Of T, TProjection).Project
  - name: (
    nameWithType: (
    fullName: (
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: ProjectionDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: ProjectionDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.ProjectExcluding(Expression{Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.Find`2.ProjectExcluding(Expression{Func{`0,System.Object}})
  isExternal: true
  name: ProjectExcluding(Expression<Func<T, Object>>)
  nameWithType: Find<T, TProjection>.ProjectExcluding(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.ProjectExcluding(Expression<Func<T, System.Object>>)
  nameWithType.vb: Find(Of T, TProjection).ProjectExcluding(Expression(Of Func(Of T, Object)))
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ProjectExcluding(Expression(Of Func(Of T, System.Object)))
  name.vb: ProjectExcluding(Expression(Of Func(Of T, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ProjectExcluding(Expression{Func{`0,System.Object}})
    name: ProjectExcluding
    nameWithType: Find<T, TProjection>.ProjectExcluding
    fullName: MongoDB.Entities.Find<T, TProjection>.ProjectExcluding
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ProjectExcluding(Expression{Func{`0,System.Object}})
    name: ProjectExcluding
    nameWithType: Find(Of T, TProjection).ProjectExcluding
    fullName: MongoDB.Entities.Find(Of T, TProjection).ProjectExcluding
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.Option(Action{FindOptions{`0,`1}})
  commentId: M:MongoDB.Entities.Find`2.Option(Action{FindOptions{`0,`1}})
  isExternal: true
  name: Option(Action<FindOptions<T, TProjection>>)
  nameWithType: Find<T, TProjection>.Option(Action<FindOptions<T, TProjection>>)
  fullName: MongoDB.Entities.Find<T, TProjection>.Option(Action<FindOptions<T, TProjection>>)
  nameWithType.vb: Find(Of T, TProjection).Option(Action(Of FindOptions(Of T, TProjection)))
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).Option(Action(Of FindOptions(Of T, TProjection)))
  name.vb: Option(Action(Of FindOptions(Of T, TProjection)))
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.Option(Action{FindOptions{`0,`1}})
    name: Option
    nameWithType: Find<T, TProjection>.Option
    fullName: MongoDB.Entities.Find<T, TProjection>.Option
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FindOptions`2
    name: FindOptions
    nameWithType: FindOptions
    fullName: FindOptions
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.Option(Action{FindOptions{`0,`1}})
    name: Option
    nameWithType: Find(Of T, TProjection).Option
    fullName: MongoDB.Entities.Find(Of T, TProjection).Option
  - name: (
    nameWithType: (
    fullName: (
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FindOptions`2
    name: FindOptions
    nameWithType: FindOptions
    fullName: FindOptions
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.IgnoreGlobalFilters
  commentId: M:MongoDB.Entities.Find`2.IgnoreGlobalFilters
  name: IgnoreGlobalFilters()
  nameWithType: Find<T, TProjection>.IgnoreGlobalFilters()
  fullName: MongoDB.Entities.Find<T, TProjection>.IgnoreGlobalFilters()
  nameWithType.vb: Find(Of T, TProjection).IgnoreGlobalFilters()
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).IgnoreGlobalFilters()
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.IgnoreGlobalFilters
    name: IgnoreGlobalFilters
    nameWithType: Find<T, TProjection>.IgnoreGlobalFilters
    fullName: MongoDB.Entities.Find<T, TProjection>.IgnoreGlobalFilters
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.IgnoreGlobalFilters
    name: IgnoreGlobalFilters
    nameWithType: Find(Of T, TProjection).IgnoreGlobalFilters
    fullName: MongoDB.Entities.Find(Of T, TProjection).IgnoreGlobalFilters
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.ExecuteAsync(CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ExecuteAsync(CancellationToken)
  isExternal: true
  name: ExecuteAsync(CancellationToken)
  nameWithType: Find<T, TProjection>.ExecuteAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteAsync(CancellationToken)
  nameWithType.vb: Find(Of T, TProjection).ExecuteAsync(CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteAsync(CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ExecuteAsync(CancellationToken)
    name: ExecuteAsync
    nameWithType: Find<T, TProjection>.ExecuteAsync
    fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ExecuteAsync(CancellationToken)
    name: ExecuteAsync
    nameWithType: Find(Of T, TProjection).ExecuteAsync
    fullName: MongoDB.Entities.Find(Of T, TProjection).ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.ExecuteSingleAsync(CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ExecuteSingleAsync(CancellationToken)
  isExternal: true
  name: ExecuteSingleAsync(CancellationToken)
  nameWithType: Find<T, TProjection>.ExecuteSingleAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteSingleAsync(CancellationToken)
  nameWithType.vb: Find(Of T, TProjection).ExecuteSingleAsync(CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteSingleAsync(CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ExecuteSingleAsync(CancellationToken)
    name: ExecuteSingleAsync
    nameWithType: Find<T, TProjection>.ExecuteSingleAsync
    fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ExecuteSingleAsync(CancellationToken)
    name: ExecuteSingleAsync
    nameWithType: Find(Of T, TProjection).ExecuteSingleAsync
    fullName: MongoDB.Entities.Find(Of T, TProjection).ExecuteSingleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.ExecuteFirstAsync(CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ExecuteFirstAsync(CancellationToken)
  isExternal: true
  name: ExecuteFirstAsync(CancellationToken)
  nameWithType: Find<T, TProjection>.ExecuteFirstAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteFirstAsync(CancellationToken)
  nameWithType.vb: Find(Of T, TProjection).ExecuteFirstAsync(CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteFirstAsync(CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ExecuteFirstAsync(CancellationToken)
    name: ExecuteFirstAsync
    nameWithType: Find<T, TProjection>.ExecuteFirstAsync
    fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteFirstAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ExecuteFirstAsync(CancellationToken)
    name: ExecuteFirstAsync
    nameWithType: Find(Of T, TProjection).ExecuteFirstAsync
    fullName: MongoDB.Entities.Find(Of T, TProjection).ExecuteFirstAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.ExecuteAnyAsync(CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ExecuteAnyAsync(CancellationToken)
  isExternal: true
  name: ExecuteAnyAsync(CancellationToken)
  nameWithType: Find<T, TProjection>.ExecuteAnyAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteAnyAsync(CancellationToken)
  nameWithType.vb: Find(Of T, TProjection).ExecuteAnyAsync(CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteAnyAsync(CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ExecuteAnyAsync(CancellationToken)
    name: ExecuteAnyAsync
    nameWithType: Find<T, TProjection>.ExecuteAnyAsync
    fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteAnyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ExecuteAnyAsync(CancellationToken)
    name: ExecuteAnyAsync
    nameWithType: Find(Of T, TProjection).ExecuteAnyAsync
    fullName: MongoDB.Entities.Find(Of T, TProjection).ExecuteAnyAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Find`2.ExecuteCursorAsync(CancellationToken)
  commentId: M:MongoDB.Entities.Find`2.ExecuteCursorAsync(CancellationToken)
  isExternal: true
  name: ExecuteCursorAsync(CancellationToken)
  nameWithType: Find<T, TProjection>.ExecuteCursorAsync(CancellationToken)
  fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteCursorAsync(CancellationToken)
  nameWithType.vb: Find(Of T, TProjection).ExecuteCursorAsync(CancellationToken)
  fullName.vb: MongoDB.Entities.Find(Of T, TProjection).ExecuteCursorAsync(CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Find`2.ExecuteCursorAsync(CancellationToken)
    name: ExecuteCursorAsync
    nameWithType: Find<T, TProjection>.ExecuteCursorAsync
    fullName: MongoDB.Entities.Find<T, TProjection>.ExecuteCursorAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Find`2.ExecuteCursorAsync(CancellationToken)
    name: ExecuteCursorAsync
    nameWithType: Find(Of T, TProjection).ExecuteCursorAsync
    fullName: MongoDB.Entities.Find(Of T, TProjection).ExecuteCursorAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
