### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.IEntity
  commentId: T:MongoDB.Entities.IEntity
  id: IEntity
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.IEntity.GenerateNewID
  - MongoDB.Entities.IEntity.ID
  langs:
  - csharp
  - vb
  name: IEntity
  nameWithType: IEntity
  fullName: MongoDB.Entities.IEntity
  type: Interface
  source:
    id: IEntity
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\IEntity.cs
    startLine: 5
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThe contract for Entity classes\n"
  example: []
  syntax:
    content: public interface IEntity
    content.vb: Public Interface IEntity
  extensionMethods:
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.Database``1
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.DatabaseName``1
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.Collection``1
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.CollectionName``1
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.Queryable``1(AggregateOptions)
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.Fluent``1(IClientSessionHandle,AggregateOptions)
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.ToReference``1
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.ToDocument``1
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.SaveAsync``1(IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.InsertAsync``1(IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.SaveOnlyAsync``1(Expression{Func{MongoDB.Entities.IEntity,System.Object}},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.SaveExceptAsync``1(Expression{Func{MongoDB.Entities.IEntity,System.Object}},IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.SavePreservingAsync``1(IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.DeleteAsync``1(IClientSessionHandle,CancellationToken)
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(CancellationToken)
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.InitOneToMany``1(Expression{Func{MongoDB.Entities.Many{{TChild}}}})
  - MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.InitManyToMany``1(Expression{Func{MongoDB.Entities.Many{{TChild}}}},Expression{Func{{TChild},System.Object}})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: MongoDB.Entities.IEntity.ID
  commentId: P:MongoDB.Entities.IEntity.ID
  id: ID
  parent: MongoDB.Entities.IEntity
  langs:
  - csharp
  - vb
  name: ID
  nameWithType: IEntity.ID
  fullName: MongoDB.Entities.IEntity.ID
  type: Property
  source:
    id: ID
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\IEntity.cs
    startLine: 11
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nThe ID property for this entity type.\n<p>IMPORTANT: make sure to decorate this property with the [BsonId] attribute when implementing this interface</p>\n"
  example: []
  syntax:
    content: string ID { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property ID As String
  overload: MongoDB.Entities.IEntity.ID*
  modifiers.csharp:
  - get
  - set
- uid: MongoDB.Entities.IEntity.GenerateNewID
  commentId: M:MongoDB.Entities.IEntity.GenerateNewID
  id: GenerateNewID
  parent: MongoDB.Entities.IEntity
  langs:
  - csharp
  - vb
  name: GenerateNewID()
  nameWithType: IEntity.GenerateNewID()
  fullName: MongoDB.Entities.IEntity.GenerateNewID()
  type: Method
  source:
    id: GenerateNewID
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Core\IEntity.cs
    startLine: 18
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nGenerate and return a new ID string from this method. It will be used when saving new entities that don&apos;t have their ID set. \nThat is, if an entity has a null ID, this method will be called for getting a new ID value. \nIf you&apos;re not doing custom ID generation, simply do <code>return ObjectId.GenerateNewId().ToString()</code>\n"
  example: []
  syntax:
    content: string GenerateNewID()
    return:
      type: System.String
    content.vb: Function GenerateNewID As String
  overload: MongoDB.Entities.IEntity.GenerateNewID*
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.Database``1
  commentId: M:MongoDB.Entities.Extensions.Database``1(``0)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.Database``1(``0)
  name: Database<IEntity>()
  nameWithType: Extensions.Database<IEntity>()
  fullName: MongoDB.Entities.Extensions.Database<MongoDB.Entities.IEntity>()
  nameWithType.vb: Extensions.Database(Of IEntity)()
  fullName.vb: MongoDB.Entities.Extensions.Database(Of MongoDB.Entities.IEntity)()
  name.vb: Database(Of IEntity)()
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.Database``1
    name: Database<IEntity>
    nameWithType: Extensions.Database<IEntity>
    fullName: MongoDB.Entities.Extensions.Database<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.Database``1
    name: Database(Of IEntity)
    nameWithType: Extensions.Database(Of IEntity)
    fullName: MongoDB.Entities.Extensions.Database(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.DatabaseName``1
  commentId: M:MongoDB.Entities.Extensions.DatabaseName``1(``0)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.DatabaseName``1(``0)
  name: DatabaseName<IEntity>()
  nameWithType: Extensions.DatabaseName<IEntity>()
  fullName: MongoDB.Entities.Extensions.DatabaseName<MongoDB.Entities.IEntity>()
  nameWithType.vb: Extensions.DatabaseName(Of IEntity)()
  fullName.vb: MongoDB.Entities.Extensions.DatabaseName(Of MongoDB.Entities.IEntity)()
  name.vb: DatabaseName(Of IEntity)()
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.DatabaseName``1
    name: DatabaseName<IEntity>
    nameWithType: Extensions.DatabaseName<IEntity>
    fullName: MongoDB.Entities.Extensions.DatabaseName<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.DatabaseName``1
    name: DatabaseName(Of IEntity)
    nameWithType: Extensions.DatabaseName(Of IEntity)
    fullName: MongoDB.Entities.Extensions.DatabaseName(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.Collection``1
  commentId: M:MongoDB.Entities.Extensions.Collection``1(``0)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.Collection``1(``0)
  name: Collection<IEntity>()
  nameWithType: Extensions.Collection<IEntity>()
  fullName: MongoDB.Entities.Extensions.Collection<MongoDB.Entities.IEntity>()
  nameWithType.vb: Extensions.Collection(Of IEntity)()
  fullName.vb: MongoDB.Entities.Extensions.Collection(Of MongoDB.Entities.IEntity)()
  name.vb: Collection(Of IEntity)()
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.Collection``1
    name: Collection<IEntity>
    nameWithType: Extensions.Collection<IEntity>
    fullName: MongoDB.Entities.Extensions.Collection<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.Collection``1
    name: Collection(Of IEntity)
    nameWithType: Extensions.Collection(Of IEntity)
    fullName: MongoDB.Entities.Extensions.Collection(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.CollectionName``1
  commentId: M:MongoDB.Entities.Extensions.CollectionName``1(``0)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.CollectionName``1(``0)
  name: CollectionName<IEntity>()
  nameWithType: Extensions.CollectionName<IEntity>()
  fullName: MongoDB.Entities.Extensions.CollectionName<MongoDB.Entities.IEntity>()
  nameWithType.vb: Extensions.CollectionName(Of IEntity)()
  fullName.vb: MongoDB.Entities.Extensions.CollectionName(Of MongoDB.Entities.IEntity)()
  name.vb: CollectionName(Of IEntity)()
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.CollectionName``1
    name: CollectionName<IEntity>
    nameWithType: Extensions.CollectionName<IEntity>
    fullName: MongoDB.Entities.Extensions.CollectionName<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.CollectionName``1
    name: CollectionName(Of IEntity)
    nameWithType: Extensions.CollectionName(Of IEntity)
    fullName: MongoDB.Entities.Extensions.CollectionName(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.Queryable``1(AggregateOptions)
  commentId: M:MongoDB.Entities.Extensions.Queryable``1(``0,AggregateOptions)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.Queryable``1(``0,AggregateOptions)
  name: Queryable<IEntity>(AggregateOptions)
  nameWithType: Extensions.Queryable<IEntity>(AggregateOptions)
  fullName: MongoDB.Entities.Extensions.Queryable<MongoDB.Entities.IEntity>(AggregateOptions)
  nameWithType.vb: Extensions.Queryable(Of IEntity)(AggregateOptions)
  fullName.vb: MongoDB.Entities.Extensions.Queryable(Of MongoDB.Entities.IEntity)(AggregateOptions)
  name.vb: Queryable(Of IEntity)(AggregateOptions)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.Queryable``1(AggregateOptions)
    name: Queryable<IEntity>
    nameWithType: Extensions.Queryable<IEntity>
    fullName: MongoDB.Entities.Extensions.Queryable<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: AggregateOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.Queryable``1(AggregateOptions)
    name: Queryable(Of IEntity)
    nameWithType: Extensions.Queryable(Of IEntity)
    fullName: MongoDB.Entities.Extensions.Queryable(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: AggregateOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.Fluent``1(IClientSessionHandle,AggregateOptions)
  commentId: M:MongoDB.Entities.Extensions.Fluent``1(``0,IClientSessionHandle,AggregateOptions)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.Fluent``1(``0,IClientSessionHandle,AggregateOptions)
  name: Fluent<IEntity>(IClientSessionHandle, AggregateOptions)
  nameWithType: Extensions.Fluent<IEntity>(IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Extensions.Fluent<MongoDB.Entities.IEntity>(IClientSessionHandle, AggregateOptions)
  nameWithType.vb: Extensions.Fluent(Of IEntity)(IClientSessionHandle, AggregateOptions)
  fullName.vb: MongoDB.Entities.Extensions.Fluent(Of MongoDB.Entities.IEntity)(IClientSessionHandle, AggregateOptions)
  name.vb: Fluent(Of IEntity)(IClientSessionHandle, AggregateOptions)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.Fluent``1(IClientSessionHandle,AggregateOptions)
    name: Fluent<IEntity>
    nameWithType: Extensions.Fluent<IEntity>
    fullName: MongoDB.Entities.Extensions.Fluent<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: AggregateOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.Fluent``1(IClientSessionHandle,AggregateOptions)
    name: Fluent(Of IEntity)
    nameWithType: Extensions.Fluent(Of IEntity)
    fullName: MongoDB.Entities.Extensions.Fluent(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: AggregateOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.ToReference``1
  commentId: M:MongoDB.Entities.Extensions.ToReference``1(``0)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.ToReference``1(``0)
  name: ToReference<IEntity>()
  nameWithType: Extensions.ToReference<IEntity>()
  fullName: MongoDB.Entities.Extensions.ToReference<MongoDB.Entities.IEntity>()
  nameWithType.vb: Extensions.ToReference(Of IEntity)()
  fullName.vb: MongoDB.Entities.Extensions.ToReference(Of MongoDB.Entities.IEntity)()
  name.vb: ToReference(Of IEntity)()
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.ToReference``1
    name: ToReference<IEntity>
    nameWithType: Extensions.ToReference<IEntity>
    fullName: MongoDB.Entities.Extensions.ToReference<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.ToReference``1
    name: ToReference(Of IEntity)
    nameWithType: Extensions.ToReference(Of IEntity)
    fullName: MongoDB.Entities.Extensions.ToReference(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.ToDocument``1
  commentId: M:MongoDB.Entities.Extensions.ToDocument``1(``0)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.ToDocument``1(``0)
  name: ToDocument<IEntity>()
  nameWithType: Extensions.ToDocument<IEntity>()
  fullName: MongoDB.Entities.Extensions.ToDocument<MongoDB.Entities.IEntity>()
  nameWithType.vb: Extensions.ToDocument(Of IEntity)()
  fullName.vb: MongoDB.Entities.Extensions.ToDocument(Of MongoDB.Entities.IEntity)()
  name.vb: ToDocument(Of IEntity)()
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.ToDocument``1
    name: ToDocument<IEntity>
    nameWithType: Extensions.ToDocument<IEntity>
    fullName: MongoDB.Entities.Extensions.ToDocument<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.ToDocument``1
    name: ToDocument(Of IEntity)
    nameWithType: Extensions.ToDocument(Of IEntity)
    fullName: MongoDB.Entities.Extensions.ToDocument(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.SaveAsync``1(IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
  name: SaveAsync<IEntity>(IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveAsync<IEntity>(IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveAsync<MongoDB.Entities.IEntity>(IClientSessionHandle, CancellationToken)
  nameWithType.vb: Extensions.SaveAsync(Of IEntity)(IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SaveAsync(Of MongoDB.Entities.IEntity)(IClientSessionHandle, CancellationToken)
  name.vb: SaveAsync(Of IEntity)(IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SaveAsync``1(IClientSessionHandle,CancellationToken)
    name: SaveAsync<IEntity>
    nameWithType: Extensions.SaveAsync<IEntity>
    fullName: MongoDB.Entities.Extensions.SaveAsync<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SaveAsync``1(IClientSessionHandle,CancellationToken)
    name: SaveAsync(Of IEntity)
    nameWithType: Extensions.SaveAsync(Of IEntity)
    fullName: MongoDB.Entities.Extensions.SaveAsync(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.InsertAsync``1(IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
  name: InsertAsync<IEntity>(IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.InsertAsync<IEntity>(IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.InsertAsync<MongoDB.Entities.IEntity>(IClientSessionHandle, CancellationToken)
  nameWithType.vb: Extensions.InsertAsync(Of IEntity)(IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.InsertAsync(Of MongoDB.Entities.IEntity)(IClientSessionHandle, CancellationToken)
  name.vb: InsertAsync(Of IEntity)(IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.InsertAsync``1(IClientSessionHandle,CancellationToken)
    name: InsertAsync<IEntity>
    nameWithType: Extensions.InsertAsync<IEntity>
    fullName: MongoDB.Entities.Extensions.InsertAsync<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.InsertAsync``1(IClientSessionHandle,CancellationToken)
    name: InsertAsync(Of IEntity)
    nameWithType: Extensions.InsertAsync(Of IEntity)
    fullName: MongoDB.Entities.Extensions.InsertAsync(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.SaveOnlyAsync``1(Expression{Func{MongoDB.Entities.IEntity,System.Object}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  name: SaveOnlyAsync<IEntity>(Expression<Func<IEntity, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveOnlyAsync<IEntity>(Expression<Func<IEntity, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveOnlyAsync<MongoDB.Entities.IEntity>(Expression<Func<MongoDB.Entities.IEntity, System.Object>>, IClientSessionHandle, CancellationToken)
  nameWithType.vb: Extensions.SaveOnlyAsync(Of IEntity)(Expression(Of Func(Of IEntity, Object)), IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SaveOnlyAsync(Of MongoDB.Entities.IEntity)(Expression(Of Func(Of MongoDB.Entities.IEntity, System.Object)), IClientSessionHandle, CancellationToken)
  name.vb: SaveOnlyAsync(Of IEntity)(Expression(Of Func(Of IEntity, Object)), IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SaveOnlyAsync``1(Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
    name: SaveOnlyAsync<IEntity>
    nameWithType: Extensions.SaveOnlyAsync<IEntity>
    fullName: MongoDB.Entities.Extensions.SaveOnlyAsync<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.IEntity
    name: IEntity
    nameWithType: IEntity
    fullName: MongoDB.Entities.IEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SaveOnlyAsync``1(Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
    name: SaveOnlyAsync(Of IEntity)
    nameWithType: Extensions.SaveOnlyAsync(Of IEntity)
    fullName: MongoDB.Entities.Extensions.SaveOnlyAsync(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.IEntity
    name: IEntity
    nameWithType: IEntity
    fullName: MongoDB.Entities.IEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.SaveExceptAsync``1(Expression{Func{MongoDB.Entities.IEntity,System.Object}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  name: SaveExceptAsync<IEntity>(Expression<Func<IEntity, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveExceptAsync<IEntity>(Expression<Func<IEntity, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveExceptAsync<MongoDB.Entities.IEntity>(Expression<Func<MongoDB.Entities.IEntity, System.Object>>, IClientSessionHandle, CancellationToken)
  nameWithType.vb: Extensions.SaveExceptAsync(Of IEntity)(Expression(Of Func(Of IEntity, Object)), IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SaveExceptAsync(Of MongoDB.Entities.IEntity)(Expression(Of Func(Of MongoDB.Entities.IEntity, System.Object)), IClientSessionHandle, CancellationToken)
  name.vb: SaveExceptAsync(Of IEntity)(Expression(Of Func(Of IEntity, Object)), IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SaveExceptAsync``1(Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
    name: SaveExceptAsync<IEntity>
    nameWithType: Extensions.SaveExceptAsync<IEntity>
    fullName: MongoDB.Entities.Extensions.SaveExceptAsync<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.IEntity
    name: IEntity
    nameWithType: IEntity
    fullName: MongoDB.Entities.IEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SaveExceptAsync``1(Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
    name: SaveExceptAsync(Of IEntity)
    nameWithType: Extensions.SaveExceptAsync(Of IEntity)
    fullName: MongoDB.Entities.Extensions.SaveExceptAsync(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.IEntity
    name: IEntity
    nameWithType: IEntity
    fullName: MongoDB.Entities.IEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.SavePreservingAsync``1(IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
  name: SavePreservingAsync<IEntity>(IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SavePreservingAsync<IEntity>(IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SavePreservingAsync<MongoDB.Entities.IEntity>(IClientSessionHandle, CancellationToken)
  nameWithType.vb: Extensions.SavePreservingAsync(Of IEntity)(IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SavePreservingAsync(Of MongoDB.Entities.IEntity)(IClientSessionHandle, CancellationToken)
  name.vb: SavePreservingAsync(Of IEntity)(IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SavePreservingAsync``1(IClientSessionHandle,CancellationToken)
    name: SavePreservingAsync<IEntity>
    nameWithType: Extensions.SavePreservingAsync<IEntity>
    fullName: MongoDB.Entities.Extensions.SavePreservingAsync<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SavePreservingAsync``1(IClientSessionHandle,CancellationToken)
    name: SavePreservingAsync(Of IEntity)
    nameWithType: Extensions.SavePreservingAsync(Of IEntity)
    fullName: MongoDB.Entities.Extensions.SavePreservingAsync(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.DeleteAsync``1(IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.DeleteAsync``1(``0,IClientSessionHandle,CancellationToken)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.DeleteAsync``1(``0,IClientSessionHandle,CancellationToken)
  name: DeleteAsync<IEntity>(IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.DeleteAsync<IEntity>(IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.DeleteAsync<MongoDB.Entities.IEntity>(IClientSessionHandle, CancellationToken)
  nameWithType.vb: Extensions.DeleteAsync(Of IEntity)(IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.DeleteAsync(Of MongoDB.Entities.IEntity)(IClientSessionHandle, CancellationToken)
  name.vb: DeleteAsync(Of IEntity)(IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.DeleteAsync``1(IClientSessionHandle,CancellationToken)
    name: DeleteAsync<IEntity>
    nameWithType: Extensions.DeleteAsync<IEntity>
    fullName: MongoDB.Entities.Extensions.DeleteAsync<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.DeleteAsync``1(IClientSessionHandle,CancellationToken)
    name: DeleteAsync(Of IEntity)
    nameWithType: Extensions.DeleteAsync(Of IEntity)
    fullName: MongoDB.Entities.Extensions.DeleteAsync(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(``0,CancellationToken)
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(``0,CancellationToken)
  name: NextSequentialNumberAsync<IEntity>(CancellationToken)
  nameWithType: Extensions.NextSequentialNumberAsync<IEntity>(CancellationToken)
  fullName: MongoDB.Entities.Extensions.NextSequentialNumberAsync<MongoDB.Entities.IEntity>(CancellationToken)
  nameWithType.vb: Extensions.NextSequentialNumberAsync(Of IEntity)(CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.NextSequentialNumberAsync(Of MongoDB.Entities.IEntity)(CancellationToken)
  name.vb: NextSequentialNumberAsync(Of IEntity)(CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(CancellationToken)
    name: NextSequentialNumberAsync<IEntity>
    nameWithType: Extensions.NextSequentialNumberAsync<IEntity>
    fullName: MongoDB.Entities.Extensions.NextSequentialNumberAsync<MongoDB.Entities.IEntity>
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(CancellationToken)
    name: NextSequentialNumberAsync(Of IEntity)
    nameWithType: Extensions.NextSequentialNumberAsync(Of IEntity)
    fullName: MongoDB.Entities.Extensions.NextSequentialNumberAsync(Of MongoDB.Entities.IEntity)
  - name: (
    nameWithType: (
    fullName: (
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.InitOneToMany``1(Expression{Func{MongoDB.Entities.Many{{TChild}}}})
  commentId: M:MongoDB.Entities.Extensions.InitOneToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}})
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.InitOneToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}})
  name: InitOneToMany<TChild>(Expression<Func<Many<TChild>>>)
  nameWithType: Extensions.InitOneToMany<TChild>(Expression<Func<Many<TChild>>>)
  fullName: MongoDB.Entities.Extensions.InitOneToMany<TChild>(Expression<Func<MongoDB.Entities.Many<TChild>>>)
  nameWithType.vb: Extensions.InitOneToMany(Of TChild)(Expression(Of Func(Of Many(Of TChild))))
  fullName.vb: MongoDB.Entities.Extensions.InitOneToMany(Of TChild)(Expression(Of Func(Of MongoDB.Entities.Many(Of TChild))))
  name.vb: InitOneToMany(Of TChild)(Expression(Of Func(Of Many(Of TChild))))
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.InitOneToMany``1(Expression{Func{MongoDB.Entities.Many{``0}}})
    name: InitOneToMany<TChild>
    nameWithType: Extensions.InitOneToMany<TChild>
    fullName: MongoDB.Entities.Extensions.InitOneToMany<TChild>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.Many`1
    name: Many
    nameWithType: Many
    fullName: MongoDB.Entities.Many
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.InitOneToMany``1(Expression{Func{MongoDB.Entities.Many{``0}}})
    name: InitOneToMany(Of TChild)
    nameWithType: Extensions.InitOneToMany(Of TChild)
    fullName: MongoDB.Entities.Extensions.InitOneToMany(Of TChild)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.Many`1
    name: Many
    nameWithType: Many
    fullName: MongoDB.Entities.Many
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.MongoDB.Entities.Extensions.InitManyToMany``1(Expression{Func{MongoDB.Entities.Many{{TChild}}}},Expression{Func{{TChild},System.Object}})
  commentId: M:MongoDB.Entities.Extensions.InitManyToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}},Expression{Func{``0,System.Object}})
  parent: MongoDB.Entities.Extensions
  definition: MongoDB.Entities.Extensions.InitManyToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}},Expression{Func{``0,System.Object}})
  name: InitManyToMany<TChild>(Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>)
  nameWithType: Extensions.InitManyToMany<TChild>(Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>)
  fullName: MongoDB.Entities.Extensions.InitManyToMany<TChild>(Expression<Func<MongoDB.Entities.Many<TChild>>>, Expression<Func<TChild, System.Object>>)
  nameWithType.vb: Extensions.InitManyToMany(Of TChild)(Expression(Of Func(Of Many(Of TChild))), Expression(Of Func(Of TChild, Object)))
  fullName.vb: MongoDB.Entities.Extensions.InitManyToMany(Of TChild)(Expression(Of Func(Of MongoDB.Entities.Many(Of TChild))), Expression(Of Func(Of TChild, System.Object)))
  name.vb: InitManyToMany(Of TChild)(Expression(Of Func(Of Many(Of TChild))), Expression(Of Func(Of TChild, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.InitManyToMany``1(Expression{Func{MongoDB.Entities.Many{``0}}},Expression{Func{``0,System.Object}})
    name: InitManyToMany<TChild>
    nameWithType: Extensions.InitManyToMany<TChild>
    fullName: MongoDB.Entities.Extensions.InitManyToMany<TChild>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.Many`1
    name: Many
    nameWithType: Many
    fullName: MongoDB.Entities.Many
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.InitManyToMany``1(Expression{Func{MongoDB.Entities.Many{``0}}},Expression{Func{``0,System.Object}})
    name: InitManyToMany(Of TChild)
    nameWithType: Extensions.InitManyToMany(Of TChild)
    fullName: MongoDB.Entities.Extensions.InitManyToMany(Of TChild)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.Many`1
    name: Many
    nameWithType: Many
    fullName: MongoDB.Entities.Many
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.Database``1(``0)
  commentId: M:MongoDB.Entities.Extensions.Database``1(``0)
  name: Database<T>(T)
  nameWithType: Extensions.Database<T>(T)
  fullName: MongoDB.Entities.Extensions.Database<T>(T)
  nameWithType.vb: Extensions.Database(Of T)(T)
  fullName.vb: MongoDB.Entities.Extensions.Database(Of T)(T)
  name.vb: Database(Of T)(T)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.Database``1(``0)
    name: Database<T>
    nameWithType: Extensions.Database<T>
    fullName: MongoDB.Entities.Extensions.Database<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.Database``1(``0)
    name: Database(Of T)
    nameWithType: Extensions.Database(Of T)
    fullName: MongoDB.Entities.Extensions.Database(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions
  commentId: T:MongoDB.Entities.Extensions
  parent: MongoDB.Entities
  name: Extensions
  nameWithType: Extensions
  fullName: MongoDB.Entities.Extensions
- uid: MongoDB.Entities.Extensions.DatabaseName``1(``0)
  commentId: M:MongoDB.Entities.Extensions.DatabaseName``1(``0)
  name: DatabaseName<T>(T)
  nameWithType: Extensions.DatabaseName<T>(T)
  fullName: MongoDB.Entities.Extensions.DatabaseName<T>(T)
  nameWithType.vb: Extensions.DatabaseName(Of T)(T)
  fullName.vb: MongoDB.Entities.Extensions.DatabaseName(Of T)(T)
  name.vb: DatabaseName(Of T)(T)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.DatabaseName``1(``0)
    name: DatabaseName<T>
    nameWithType: Extensions.DatabaseName<T>
    fullName: MongoDB.Entities.Extensions.DatabaseName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.DatabaseName``1(``0)
    name: DatabaseName(Of T)
    nameWithType: Extensions.DatabaseName(Of T)
    fullName: MongoDB.Entities.Extensions.DatabaseName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.Collection``1(``0)
  commentId: M:MongoDB.Entities.Extensions.Collection``1(``0)
  name: Collection<T>(T)
  nameWithType: Extensions.Collection<T>(T)
  fullName: MongoDB.Entities.Extensions.Collection<T>(T)
  nameWithType.vb: Extensions.Collection(Of T)(T)
  fullName.vb: MongoDB.Entities.Extensions.Collection(Of T)(T)
  name.vb: Collection(Of T)(T)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.Collection``1(``0)
    name: Collection<T>
    nameWithType: Extensions.Collection<T>
    fullName: MongoDB.Entities.Extensions.Collection<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.Collection``1(``0)
    name: Collection(Of T)
    nameWithType: Extensions.Collection(Of T)
    fullName: MongoDB.Entities.Extensions.Collection(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.CollectionName``1(``0)
  commentId: M:MongoDB.Entities.Extensions.CollectionName``1(``0)
  name: CollectionName<T>(T)
  nameWithType: Extensions.CollectionName<T>(T)
  fullName: MongoDB.Entities.Extensions.CollectionName<T>(T)
  nameWithType.vb: Extensions.CollectionName(Of T)(T)
  fullName.vb: MongoDB.Entities.Extensions.CollectionName(Of T)(T)
  name.vb: CollectionName(Of T)(T)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.CollectionName``1(``0)
    name: CollectionName<T>
    nameWithType: Extensions.CollectionName<T>
    fullName: MongoDB.Entities.Extensions.CollectionName<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.CollectionName``1(``0)
    name: CollectionName(Of T)
    nameWithType: Extensions.CollectionName(Of T)
    fullName: MongoDB.Entities.Extensions.CollectionName(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.Queryable``1(``0,AggregateOptions)
  commentId: M:MongoDB.Entities.Extensions.Queryable``1(``0,AggregateOptions)
  isExternal: true
  name: Queryable<T>(T, AggregateOptions)
  nameWithType: Extensions.Queryable<T>(T, AggregateOptions)
  fullName: MongoDB.Entities.Extensions.Queryable<T>(T, AggregateOptions)
  nameWithType.vb: Extensions.Queryable(Of T)(T, AggregateOptions)
  fullName.vb: MongoDB.Entities.Extensions.Queryable(Of T)(T, AggregateOptions)
  name.vb: Queryable(Of T)(T, AggregateOptions)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.Queryable``1(``0,AggregateOptions)
    name: Queryable<T>
    nameWithType: Extensions.Queryable<T>
    fullName: MongoDB.Entities.Extensions.Queryable<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: AggregateOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.Queryable``1(``0,AggregateOptions)
    name: Queryable(Of T)
    nameWithType: Extensions.Queryable(Of T)
    fullName: MongoDB.Entities.Extensions.Queryable(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: AggregateOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.Fluent``1(``0,IClientSessionHandle,AggregateOptions)
  commentId: M:MongoDB.Entities.Extensions.Fluent``1(``0,IClientSessionHandle,AggregateOptions)
  isExternal: true
  name: Fluent<T>(T, IClientSessionHandle, AggregateOptions)
  nameWithType: Extensions.Fluent<T>(T, IClientSessionHandle, AggregateOptions)
  fullName: MongoDB.Entities.Extensions.Fluent<T>(T, IClientSessionHandle, AggregateOptions)
  nameWithType.vb: Extensions.Fluent(Of T)(T, IClientSessionHandle, AggregateOptions)
  fullName.vb: MongoDB.Entities.Extensions.Fluent(Of T)(T, IClientSessionHandle, AggregateOptions)
  name.vb: Fluent(Of T)(T, IClientSessionHandle, AggregateOptions)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.Fluent``1(``0,IClientSessionHandle,AggregateOptions)
    name: Fluent<T>
    nameWithType: Extensions.Fluent<T>
    fullName: MongoDB.Entities.Extensions.Fluent<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: AggregateOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.Fluent``1(``0,IClientSessionHandle,AggregateOptions)
    name: Fluent(Of T)
    nameWithType: Extensions.Fluent(Of T)
    fullName: MongoDB.Entities.Extensions.Fluent(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: AggregateOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.ToReference``1(``0)
  commentId: M:MongoDB.Entities.Extensions.ToReference``1(``0)
  name: ToReference<T>(T)
  nameWithType: Extensions.ToReference<T>(T)
  fullName: MongoDB.Entities.Extensions.ToReference<T>(T)
  nameWithType.vb: Extensions.ToReference(Of T)(T)
  fullName.vb: MongoDB.Entities.Extensions.ToReference(Of T)(T)
  name.vb: ToReference(Of T)(T)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.ToReference``1(``0)
    name: ToReference<T>
    nameWithType: Extensions.ToReference<T>
    fullName: MongoDB.Entities.Extensions.ToReference<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.ToReference``1(``0)
    name: ToReference(Of T)
    nameWithType: Extensions.ToReference(Of T)
    fullName: MongoDB.Entities.Extensions.ToReference(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.ToDocument``1(``0)
  commentId: M:MongoDB.Entities.Extensions.ToDocument``1(``0)
  name: ToDocument<T>(T)
  nameWithType: Extensions.ToDocument<T>(T)
  fullName: MongoDB.Entities.Extensions.ToDocument<T>(T)
  nameWithType.vb: Extensions.ToDocument(Of T)(T)
  fullName.vb: MongoDB.Entities.Extensions.ToDocument(Of T)(T)
  name.vb: ToDocument(Of T)(T)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.ToDocument``1(``0)
    name: ToDocument<T>
    nameWithType: Extensions.ToDocument<T>
    fullName: MongoDB.Entities.Extensions.ToDocument<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.ToDocument``1(``0)
    name: ToDocument(Of T)
    nameWithType: Extensions.ToDocument(Of T)
    fullName: MongoDB.Entities.Extensions.ToDocument(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
  isExternal: true
  name: SaveAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveAsync<T>(T, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType.vb: Extensions.SaveAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SaveAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  name.vb: SaveAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
    name: SaveAsync<T>
    nameWithType: Extensions.SaveAsync<T>
    fullName: MongoDB.Entities.Extensions.SaveAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SaveAsync``1(``0,IClientSessionHandle,CancellationToken)
    name: SaveAsync(Of T)
    nameWithType: Extensions.SaveAsync(Of T)
    fullName: MongoDB.Entities.Extensions.SaveAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
  isExternal: true
  name: InsertAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.InsertAsync<T>(T, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.InsertAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType.vb: Extensions.InsertAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.InsertAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  name.vb: InsertAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
    name: InsertAsync<T>
    nameWithType: Extensions.InsertAsync<T>
    fullName: MongoDB.Entities.Extensions.InsertAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.InsertAsync``1(``0,IClientSessionHandle,CancellationToken)
    name: InsertAsync(Of T)
    nameWithType: Extensions.InsertAsync(Of T)
    fullName: MongoDB.Entities.Extensions.InsertAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  isExternal: true
  name: SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveOnlyAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveOnlyAsync<T>(T, Expression<Func<T, System.Object>>, IClientSessionHandle, CancellationToken)
  nameWithType.vb: Extensions.SaveOnlyAsync(Of T)(T, Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SaveOnlyAsync(Of T)(T, Expression(Of Func(Of T, System.Object)), IClientSessionHandle, CancellationToken)
  name.vb: SaveOnlyAsync(Of T)(T, Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
    name: SaveOnlyAsync<T>
    nameWithType: Extensions.SaveOnlyAsync<T>
    fullName: MongoDB.Entities.Extensions.SaveOnlyAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SaveOnlyAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
    name: SaveOnlyAsync(Of T)
    nameWithType: Extensions.SaveOnlyAsync(Of T)
    fullName: MongoDB.Entities.Extensions.SaveOnlyAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
  isExternal: true
  name: SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SaveExceptAsync<T>(T, Expression<Func<T, Object>>, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SaveExceptAsync<T>(T, Expression<Func<T, System.Object>>, IClientSessionHandle, CancellationToken)
  nameWithType.vb: Extensions.SaveExceptAsync(Of T)(T, Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SaveExceptAsync(Of T)(T, Expression(Of Func(Of T, System.Object)), IClientSessionHandle, CancellationToken)
  name.vb: SaveExceptAsync(Of T)(T, Expression(Of Func(Of T, Object)), IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
    name: SaveExceptAsync<T>
    nameWithType: Extensions.SaveExceptAsync<T>
    fullName: MongoDB.Entities.Extensions.SaveExceptAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SaveExceptAsync``1(``0,Expression{Func{``0,System.Object}},IClientSessionHandle,CancellationToken)
    name: SaveExceptAsync(Of T)
    nameWithType: Extensions.SaveExceptAsync(Of T)
    fullName: MongoDB.Entities.Extensions.SaveExceptAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
  isExternal: true
  name: SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.SavePreservingAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType.vb: Extensions.SavePreservingAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.SavePreservingAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  name.vb: SavePreservingAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
    name: SavePreservingAsync<T>
    nameWithType: Extensions.SavePreservingAsync<T>
    fullName: MongoDB.Entities.Extensions.SavePreservingAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.SavePreservingAsync``1(``0,IClientSessionHandle,CancellationToken)
    name: SavePreservingAsync(Of T)
    nameWithType: Extensions.SavePreservingAsync(Of T)
    fullName: MongoDB.Entities.Extensions.SavePreservingAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.DeleteAsync``1(``0,IClientSessionHandle,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.DeleteAsync``1(``0,IClientSessionHandle,CancellationToken)
  isExternal: true
  name: DeleteAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType: Extensions.DeleteAsync<T>(T, IClientSessionHandle, CancellationToken)
  fullName: MongoDB.Entities.Extensions.DeleteAsync<T>(T, IClientSessionHandle, CancellationToken)
  nameWithType.vb: Extensions.DeleteAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.DeleteAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  name.vb: DeleteAsync(Of T)(T, IClientSessionHandle, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.DeleteAsync``1(``0,IClientSessionHandle,CancellationToken)
    name: DeleteAsync<T>
    nameWithType: Extensions.DeleteAsync<T>
    fullName: MongoDB.Entities.Extensions.DeleteAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.DeleteAsync``1(``0,IClientSessionHandle,CancellationToken)
    name: DeleteAsync(Of T)
    nameWithType: Extensions.DeleteAsync(Of T)
    fullName: MongoDB.Entities.Extensions.DeleteAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IClientSessionHandle
    name: IClientSessionHandle
    nameWithType: IClientSessionHandle
    fullName: IClientSessionHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(``0,CancellationToken)
  commentId: M:MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(``0,CancellationToken)
  isExternal: true
  name: NextSequentialNumberAsync<T>(T, CancellationToken)
  nameWithType: Extensions.NextSequentialNumberAsync<T>(T, CancellationToken)
  fullName: MongoDB.Entities.Extensions.NextSequentialNumberAsync<T>(T, CancellationToken)
  nameWithType.vb: Extensions.NextSequentialNumberAsync(Of T)(T, CancellationToken)
  fullName.vb: MongoDB.Entities.Extensions.NextSequentialNumberAsync(Of T)(T, CancellationToken)
  name.vb: NextSequentialNumberAsync(Of T)(T, CancellationToken)
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(``0,CancellationToken)
    name: NextSequentialNumberAsync<T>
    nameWithType: Extensions.NextSequentialNumberAsync<T>
    fullName: MongoDB.Entities.Extensions.NextSequentialNumberAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.NextSequentialNumberAsync``1(``0,CancellationToken)
    name: NextSequentialNumberAsync(Of T)
    nameWithType: Extensions.NextSequentialNumberAsync(Of T)
    fullName: MongoDB.Entities.Extensions.NextSequentialNumberAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.InitOneToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}})
  commentId: M:MongoDB.Entities.Extensions.InitOneToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}})
  isExternal: true
  name: InitOneToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>)
  nameWithType: Extensions.InitOneToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>)
  fullName: MongoDB.Entities.Extensions.InitOneToMany<TChild>(MongoDB.Entities.IEntity, Expression<Func<MongoDB.Entities.Many<TChild>>>)
  nameWithType.vb: Extensions.InitOneToMany(Of TChild)(IEntity, Expression(Of Func(Of Many(Of TChild))))
  fullName.vb: MongoDB.Entities.Extensions.InitOneToMany(Of TChild)(MongoDB.Entities.IEntity, Expression(Of Func(Of MongoDB.Entities.Many(Of TChild))))
  name.vb: InitOneToMany(Of TChild)(IEntity, Expression(Of Func(Of Many(Of TChild))))
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.InitOneToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}})
    name: InitOneToMany<TChild>
    nameWithType: Extensions.InitOneToMany<TChild>
    fullName: MongoDB.Entities.Extensions.InitOneToMany<TChild>
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.IEntity
    name: IEntity
    nameWithType: IEntity
    fullName: MongoDB.Entities.IEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.Many`1
    name: Many
    nameWithType: Many
    fullName: MongoDB.Entities.Many
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.InitOneToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}})
    name: InitOneToMany(Of TChild)
    nameWithType: Extensions.InitOneToMany(Of TChild)
    fullName: MongoDB.Entities.Extensions.InitOneToMany(Of TChild)
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.IEntity
    name: IEntity
    nameWithType: IEntity
    fullName: MongoDB.Entities.IEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.Many`1
    name: Many
    nameWithType: Many
    fullName: MongoDB.Entities.Many
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Extensions.InitManyToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}},Expression{Func{``0,System.Object}})
  commentId: M:MongoDB.Entities.Extensions.InitManyToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}},Expression{Func{``0,System.Object}})
  isExternal: true
  name: InitManyToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>)
  nameWithType: Extensions.InitManyToMany<TChild>(IEntity, Expression<Func<Many<TChild>>>, Expression<Func<TChild, Object>>)
  fullName: MongoDB.Entities.Extensions.InitManyToMany<TChild>(MongoDB.Entities.IEntity, Expression<Func<MongoDB.Entities.Many<TChild>>>, Expression<Func<TChild, System.Object>>)
  nameWithType.vb: Extensions.InitManyToMany(Of TChild)(IEntity, Expression(Of Func(Of Many(Of TChild))), Expression(Of Func(Of TChild, Object)))
  fullName.vb: MongoDB.Entities.Extensions.InitManyToMany(Of TChild)(MongoDB.Entities.IEntity, Expression(Of Func(Of MongoDB.Entities.Many(Of TChild))), Expression(Of Func(Of TChild, System.Object)))
  name.vb: InitManyToMany(Of TChild)(IEntity, Expression(Of Func(Of Many(Of TChild))), Expression(Of Func(Of TChild, Object)))
  spec.csharp:
  - uid: MongoDB.Entities.Extensions.InitManyToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}},Expression{Func{``0,System.Object}})
    name: InitManyToMany<TChild>
    nameWithType: Extensions.InitManyToMany<TChild>
    fullName: MongoDB.Entities.Extensions.InitManyToMany<TChild>
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.IEntity
    name: IEntity
    nameWithType: IEntity
    fullName: MongoDB.Entities.IEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Entities.Many`1
    name: Many
    nameWithType: Many
    fullName: MongoDB.Entities.Many
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: MongoDB.Entities.Extensions.InitManyToMany``1(MongoDB.Entities.IEntity,Expression{Func{MongoDB.Entities.Many{``0}}},Expression{Func{``0,System.Object}})
    name: InitManyToMany(Of TChild)
    nameWithType: Extensions.InitManyToMany(Of TChild)
    fullName: MongoDB.Entities.Extensions.InitManyToMany(Of TChild)
  - name: (
    nameWithType: (
    fullName: (
  - uid: MongoDB.Entities.IEntity
    name: IEntity
    nameWithType: IEntity
    fullName: MongoDB.Entities.IEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Entities.Many`1
    name: Many
    nameWithType: Many
    fullName: MongoDB.Entities.Many
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TChild
    nameWithType: TChild
    fullName: TChild
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.IEntity.ID*
  commentId: Overload:MongoDB.Entities.IEntity.ID
  name: ID
  nameWithType: IEntity.ID
  fullName: MongoDB.Entities.IEntity.ID
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MongoDB.Entities.IEntity.GenerateNewID*
  commentId: Overload:MongoDB.Entities.IEntity.GenerateNewID
  name: GenerateNewID
  nameWithType: IEntity.GenerateNewID
  fullName: MongoDB.Entities.IEntity.GenerateNewID
