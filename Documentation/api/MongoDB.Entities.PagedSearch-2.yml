### YamlMime:ManagedReference
items:
- uid: MongoDB.Entities.PagedSearch`2
  commentId: T:MongoDB.Entities.PagedSearch`2
  id: PagedSearch`2
  parent: MongoDB.Entities
  children:
  - MongoDB.Entities.PagedSearch`2.ExecuteAsync(System.Threading.CancellationToken)
  - MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters
  - MongoDB.Entities.PagedSearch`2.Match(MongoDB.Driver.FilterDefinition{`0})
  - MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  - MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Template)
  - MongoDB.Entities.PagedSearch`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  - MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  - MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  - MongoDB.Entities.PagedSearch`2.MatchExpression(MongoDB.Entities.Template)
  - MongoDB.Entities.PagedSearch`2.MatchExpression(System.String)
  - MongoDB.Entities.PagedSearch`2.MatchString(System.String)
  - MongoDB.Entities.PagedSearch`2.Option(System.Action{MongoDB.Driver.AggregateOptions})
  - MongoDB.Entities.PagedSearch`2.PageNumber(System.Int32)
  - MongoDB.Entities.PagedSearch`2.PageSize(System.Int32)
  - MongoDB.Entities.PagedSearch`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
  - MongoDB.Entities.PagedSearch`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  - MongoDB.Entities.PagedSearch`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  - MongoDB.Entities.PagedSearch`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
  - MongoDB.Entities.PagedSearch`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
  - MongoDB.Entities.PagedSearch`2.SortByTextScore
  - MongoDB.Entities.PagedSearch`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  - MongoDB.Entities.PagedSearch`2.WithFluent``1(``0)
  langs:
  - csharp
  - vb
  name: PagedSearch<T, TProjection>
  nameWithType: PagedSearch<T, TProjection>
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>
  type: Class
  source:
    id: PagedSearch
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 29
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRepresents an aggregation query that retrieves results with easy paging support.\n"
  example: []
  syntax:
    content: >-
      public class PagedSearch<T, TProjection>

          where T : IEntity
    typeParameters:
    - id: T
      description: Any class that implements IEntity
    - id: TProjection
      description: The type you&apos;d like to project the results to.
    content.vb: Public Class PagedSearch(Of T As IEntity, TProjection)
  inheritance:
  - System.Object
  derivedClasses:
  - MongoDB.Entities.PagedSearch`1
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: PagedSearch(Of T, TProjection)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection)
  name.vb: PagedSearch(Of T, TProjection)
- uid: MongoDB.Entities.PagedSearch`2.WithFluent``1(``0)
  commentId: M:MongoDB.Entities.PagedSearch`2.WithFluent``1(``0)
  id: WithFluent``1(``0)
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: WithFluent<TFluent>(TFluent)
  nameWithType: PagedSearch<T, TProjection>.WithFluent<TFluent>(TFluent)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.WithFluent<TFluent>(TFluent)
  type: Method
  source:
    id: WithFluent
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 59
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nBegins the paged search aggregation pipeline with the provided fluent pipeline.\n<p>TIP: This method must be first in the chain and it cannot be used with .Match()</p>\n"
  example: []
  syntax:
    content: >-
      public PagedSearch<T, TProjection> WithFluent<TFluent>(TFluent fluentPipeline)

          where TFluent : IAggregateFluent<T>
    parameters:
    - id: fluentPipeline
      type: '{TFluent}'
      description: The input IAggregateFluent pipeline
    typeParameters:
    - id: TFluent
      description: The type of the input pipeline
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function WithFluent(Of TFluent As IAggregateFluent(Of T))(fluentPipeline As TFluent) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.WithFluent*
  nameWithType.vb: PagedSearch(Of T, TProjection).WithFluent(Of TFluent)(TFluent)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).WithFluent(Of TFluent)(TFluent)
  name.vb: WithFluent(Of TFluent)(TFluent)
- uid: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  commentId: M:MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  id: Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: Match(Expression<Func<T, Boolean>>)
  nameWithType: PagedSearch<T, TProjection>.Match(Expression<Func<T, Boolean>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match(System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 69
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a lambda expression\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> Match(Expression<Func<T, bool>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
      description: x => x.Property == Value
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function Match(expression As Expression(Of Func(Of T, Boolean))) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.Match*
  nameWithType.vb: PagedSearch(Of T, TProjection).Match(Expression(Of Func(Of T, Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean)))
  name.vb: Match(Expression(Of Func(Of T, Boolean)))
- uid: MongoDB.Entities.PagedSearch`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  commentId: M:MongoDB.Entities.PagedSearch`2.Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  id: Match(System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}})
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  nameWithType: PagedSearch<T, TProjection>.Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match(System.Func<MongoDB.Driver.FilterDefinitionBuilder<T>, MongoDB.Driver.FilterDefinition<T>>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 78
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a filter expression\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> Match(Func<FilterDefinitionBuilder<T>, FilterDefinition<T>> filter)
    parameters:
    - id: filter
      type: System.Func{MongoDB.Driver.FilterDefinitionBuilder{{T}},MongoDB.Driver.FilterDefinition{{T}}}
      description: f => f.Eq(x => x.Prop, Value) &amp; f.Gt(x => x.Prop, Value)
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function Match(filter As Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.Match*
  nameWithType.vb: PagedSearch(Of T, TProjection).Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match(System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of T), MongoDB.Driver.FilterDefinition(Of T)))
  name.vb: Match(Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T)))
- uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Driver.FilterDefinition{`0})
  commentId: M:MongoDB.Entities.PagedSearch`2.Match(MongoDB.Driver.FilterDefinition{`0})
  id: Match(MongoDB.Driver.FilterDefinition{`0})
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: Match(FilterDefinition<T>)
  nameWithType: PagedSearch<T, TProjection>.Match(FilterDefinition<T>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match(MongoDB.Driver.FilterDefinition<T>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 88
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a filter definition\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> Match(FilterDefinition<T> filterDefinition)
    parameters:
    - id: filterDefinition
      type: MongoDB.Driver.FilterDefinition{{T}}
      description: A filter definition
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function Match(filterDefinition As FilterDefinition(Of T)) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.Match*
  nameWithType.vb: PagedSearch(Of T, TProjection).Match(FilterDefinition(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match(MongoDB.Driver.FilterDefinition(Of T))
  name.vb: Match(FilterDefinition(Of T))
- uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Template)
  id: Match(MongoDB.Entities.Template)
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: Match(Template)
  nameWithType: PagedSearch<T, TProjection>.Match(Template)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match(MongoDB.Entities.Template)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 98
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a template\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> Match(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: A Template with a find query
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function Match(template As Template) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.Match*
  nameWithType.vb: PagedSearch(Of T, TProjection).Match(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match(MongoDB.Entities.Template)
- uid: MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  commentId: M:MongoDB.Entities.PagedSearch`2.Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  id: Match(MongoDB.Entities.Search,System.String,System.Boolean,System.Boolean,System.String)
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: Match(Search, String, Boolean, Boolean, String)
  nameWithType: PagedSearch<T, TProjection>.Match(Search, String, Boolean, Boolean, String)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 113
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify a search term to find results from the text index of this particular collection.\n<p>TIP: Make sure to define a text index with DB.Index&lt;T>() before searching</p>\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> Match(Search searchType, string searchTerm, bool caseSensitive = false, bool diacriticSensitive = false, string language = null)
    parameters:
    - id: searchType
      type: MongoDB.Entities.Search
      description: The type of text matching to do
    - id: searchTerm
      type: System.String
      description: The search term
    - id: caseSensitive
      type: System.Boolean
      description: Case sensitivity of the search (optional)
    - id: diacriticSensitive
      type: System.Boolean
      description: Diacritic sensitivity of the search (optional)
    - id: language
      type: System.String
      description: The language for the search (optional)
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function Match(searchType As Search, searchTerm As String, caseSensitive As Boolean = False, diacriticSensitive As Boolean = False, language As String = Nothing) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.Match*
  nameWithType.vb: PagedSearch(Of T, TProjection).Match(Search, String, Boolean, Boolean, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match(MongoDB.Entities.Search, System.String, System.Boolean, System.Boolean, System.String)
- uid: MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  commentId: M:MongoDB.Entities.PagedSearch`2.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  id: Match(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Coordinates2D,System.Nullable{System.Double},System.Nullable{System.Double})
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  nameWithType: PagedSearch<T, TProjection>.Match(Expression<Func<T, Object>>, Coordinates2D, Nullable<Double>, Nullable<Double>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match(System.Linq.Expressions.Expression<System.Func<T, System.Object>>, MongoDB.Entities.Coordinates2D, System.Nullable<System.Double>, System.Nullable<System.Double>)
  type: Method
  source:
    id: Match
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 143
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify criteria for matching entities based on GeoSpatial data (longitude &amp; latitude)\n<p>TIP: Make sure to define a Geo2DSphere index with DB.Index&lt;T>() before searching</p>\n<p>Note: DB.FluentGeoNear() supports more advanced options</p>\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> Match(Expression<Func<T, object>> coordinatesProperty, Coordinates2D nearCoordinates, double? maxDistance = default(double? ), double? minDistance = default(double? ))
    parameters:
    - id: coordinatesProperty
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: The property where 2DCoordinates are stored
    - id: nearCoordinates
      type: MongoDB.Entities.Coordinates2D
      description: The search point
    - id: maxDistance
      type: System.Nullable{System.Double}
      description: Maximum distance in meters from the search point
    - id: minDistance
      type: System.Nullable{System.Double}
      description: Minimum distance in meters from the search point
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function Match(coordinatesProperty As Expression(Of Func(Of T, Object)), nearCoordinates As Coordinates2D, maxDistance As Double? = Nothing, minDistance As Double? = Nothing) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.Match*
  nameWithType.vb: PagedSearch(Of T, TProjection).Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), MongoDB.Entities.Coordinates2D, System.Nullable(Of System.Double), System.Nullable(Of System.Double))
  name.vb: Match(Expression(Of Func(Of T, Object)), Coordinates2D, Nullable(Of Double), Nullable(Of Double))
- uid: MongoDB.Entities.PagedSearch`2.MatchString(System.String)
  commentId: M:MongoDB.Entities.PagedSearch`2.MatchString(System.String)
  id: MatchString(System.String)
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: MatchString(String)
  nameWithType: PagedSearch<T, TProjection>.MatchString(String)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.MatchString(System.String)
  type: Method
  source:
    id: MatchString
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 152
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a JSON string\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> MatchString(string jsonString)
    parameters:
    - id: jsonString
      type: System.String
      description: '{ Title : &apos;The Power Of Now&apos; }'
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function MatchString(jsonString As String) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.MatchString*
  nameWithType.vb: PagedSearch(Of T, TProjection).MatchString(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).MatchString(System.String)
- uid: MongoDB.Entities.PagedSearch`2.MatchExpression(System.String)
  commentId: M:MongoDB.Entities.PagedSearch`2.MatchExpression(System.String)
  id: MatchExpression(System.String)
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: MatchExpression(String)
  nameWithType: PagedSearch<T, TProjection>.MatchExpression(String)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.MatchExpression(System.String)
  type: Method
  source:
    id: MatchExpression
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 162
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with an aggregation expression (i.e. $expr)\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> MatchExpression(string expression)
    parameters:
    - id: expression
      type: System.String
      description: '{ $gt: [&apos;$Property1&apos;, &apos;$Property2&apos;] }'
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function MatchExpression(expression As String) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.MatchExpression*
  nameWithType.vb: PagedSearch(Of T, TProjection).MatchExpression(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).MatchExpression(System.String)
- uid: MongoDB.Entities.PagedSearch`2.MatchExpression(MongoDB.Entities.Template)
  commentId: M:MongoDB.Entities.PagedSearch`2.MatchExpression(MongoDB.Entities.Template)
  id: MatchExpression(MongoDB.Entities.Template)
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: MatchExpression(Template)
  nameWithType: PagedSearch<T, TProjection>.MatchExpression(Template)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.MatchExpression(MongoDB.Entities.Template)
  type: Method
  source:
    id: MatchExpression
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 172
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the matching criteria with a Template\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> MatchExpression(Template template)
    parameters:
    - id: template
      type: MongoDB.Entities.Template
      description: A Template object
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function MatchExpression(template As Template) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.MatchExpression*
  nameWithType.vb: PagedSearch(Of T, TProjection).MatchExpression(Template)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).MatchExpression(MongoDB.Entities.Template)
- uid: MongoDB.Entities.PagedSearch`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
  commentId: M:MongoDB.Entities.PagedSearch`2.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
  id: Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},MongoDB.Entities.Order)
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: Sort(Expression<Func<T, Object>>, Order)
  nameWithType: PagedSearch<T, TProjection>.Sort(Expression<Func<T, Object>>, Order)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Sort(System.Linq.Expressions.Expression<System.Func<T, System.Object>>, MongoDB.Entities.Order)
  type: Method
  source:
    id: Sort
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 183
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify which property and order to use for sorting (use multiple times if needed)\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> Sort(Expression<Func<T, object>> propertyToSortBy, Order sortOrder)
    parameters:
    - id: propertyToSortBy
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: x => x.Prop
    - id: sortOrder
      type: MongoDB.Entities.Order
      description: The sort order
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function Sort(propertyToSortBy As Expression(Of Func(Of T, Object)), sortOrder As Order) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.Sort*
  nameWithType.vb: PagedSearch(Of T, TProjection).Sort(Expression(Of Func(Of T, Object)), Order)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Sort(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)), MongoDB.Entities.Order)
  name.vb: Sort(Expression(Of Func(Of T, Object)), Order)
- uid: MongoDB.Entities.PagedSearch`2.SortByTextScore
  commentId: M:MongoDB.Entities.PagedSearch`2.SortByTextScore
  id: SortByTextScore
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: SortByTextScore()
  nameWithType: PagedSearch<T, TProjection>.SortByTextScore()
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.SortByTextScore()
  type: Method
  source:
    id: SortByTextScore
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 202
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSort the results of a text search by the MetaTextScore\n<p>TIP: Use this method after .Project() if you need to do a projection also</p>\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> SortByTextScore()
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function SortByTextScore As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.SortByTextScore*
  nameWithType.vb: PagedSearch(Of T, TProjection).SortByTextScore()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).SortByTextScore()
- uid: MongoDB.Entities.PagedSearch`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.PagedSearch`2.SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: SortByTextScore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: SortByTextScore(Expression<Func<T, Object>>)
  nameWithType: PagedSearch<T, TProjection>.SortByTextScore(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.SortByTextScore(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  type: Method
  source:
    id: SortByTextScore
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 212
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSort the results of a text search by the MetaTextScore and get back the score as well\n<p>TIP: Use this method after .Project() if you need to do a projection also</p>\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> SortByTextScore(Expression<Func<T, object>> scoreProperty)
    parameters:
    - id: scoreProperty
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: x => x.TextScoreProp
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function SortByTextScore(scoreProperty As Expression(Of Func(Of T, Object))) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.SortByTextScore*
  nameWithType.vb: PagedSearch(Of T, TProjection).SortByTextScore(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).SortByTextScore(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: SortByTextScore(Expression(Of Func(Of T, Object)))
- uid: MongoDB.Entities.PagedSearch`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
  commentId: M:MongoDB.Entities.PagedSearch`2.Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
  id: Sort(System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}})
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  nameWithType: PagedSearch<T, TProjection>.Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Sort(System.Func<MongoDB.Driver.SortDefinitionBuilder<T>, MongoDB.Driver.SortDefinition<T>>)
  type: Method
  source:
    id: Sort
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 247
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify how to sort using a sort expression\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> Sort(Func<SortDefinitionBuilder<T>, SortDefinition<T>> sortFunction)
    parameters:
    - id: sortFunction
      type: System.Func{MongoDB.Driver.SortDefinitionBuilder{{T}},MongoDB.Driver.SortDefinition{{T}}}
      description: s => s.Ascending(&quot;Prop1&quot;).MetaTextScore(&quot;Prop2&quot;)
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function Sort(sortFunction As Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T))) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.Sort*
  nameWithType.vb: PagedSearch(Of T, TProjection).Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Sort(System.Func(Of MongoDB.Driver.SortDefinitionBuilder(Of T), MongoDB.Driver.SortDefinition(Of T)))
  name.vb: Sort(Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T)))
- uid: MongoDB.Entities.PagedSearch`2.PageNumber(System.Int32)
  commentId: M:MongoDB.Entities.PagedSearch`2.PageNumber(System.Int32)
  id: PageNumber(System.Int32)
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: PageNumber(Int32)
  nameWithType: PagedSearch<T, TProjection>.PageNumber(Int32)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.PageNumber(System.Int32)
  type: Method
  source:
    id: PageNumber
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 257
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the page number to get\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> PageNumber(int pageNumber)
    parameters:
    - id: pageNumber
      type: System.Int32
      description: The page number
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function PageNumber(pageNumber As Integer) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.PageNumber*
  nameWithType.vb: PagedSearch(Of T, TProjection).PageNumber(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).PageNumber(System.Int32)
- uid: MongoDB.Entities.PagedSearch`2.PageSize(System.Int32)
  commentId: M:MongoDB.Entities.PagedSearch`2.PageSize(System.Int32)
  id: PageSize(System.Int32)
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: PageSize(Int32)
  nameWithType: PagedSearch<T, TProjection>.PageSize(Int32)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.PageSize(System.Int32)
  type: Method
  source:
    id: PageSize
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 267
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify the number of items per page\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> PageSize(int pageSize)
    parameters:
    - id: pageSize
      type: System.Int32
      description: The size of a page
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function PageSize(pageSize As Integer) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.PageSize*
  nameWithType.vb: PagedSearch(Of T, TProjection).PageSize(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).PageSize(System.Int32)
- uid: MongoDB.Entities.PagedSearch`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  commentId: M:MongoDB.Entities.PagedSearch`2.Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  id: Project(System.Linq.Expressions.Expression{System.Func{`0,`1}})
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: Project(Expression<Func<T, TProjection>>)
  nameWithType: PagedSearch<T, TProjection>.Project(Expression<Func<T, TProjection>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Project(System.Linq.Expressions.Expression<System.Func<T, TProjection>>)
  type: Method
  source:
    id: Project
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 277
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify how to project the results using a lambda expression\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> Project(Expression<Func<T, TProjection>> expression)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{{T},{TProjection}}}
      description: x => new Test { PropName = x.Prop }
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function Project(expression As Expression(Of Func(Of T, TProjection))) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.Project*
  nameWithType.vb: PagedSearch(Of T, TProjection).Project(Expression(Of Func(Of T, TProjection)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Project(System.Linq.Expressions.Expression(Of System.Func(Of T, TProjection)))
  name.vb: Project(Expression(Of Func(Of T, TProjection)))
- uid: MongoDB.Entities.PagedSearch`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
  commentId: M:MongoDB.Entities.PagedSearch`2.Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
  id: Project(System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}})
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>)
  nameWithType: PagedSearch<T, TProjection>.Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Project(System.Func<MongoDB.Driver.ProjectionDefinitionBuilder<T>, MongoDB.Driver.ProjectionDefinition<T, TProjection>>)
  type: Method
  source:
    id: Project
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 287
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify how to project the results using a projection expression\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> Project(Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>> projection)
    parameters:
    - id: projection
      type: System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{{T}},MongoDB.Driver.ProjectionDefinition{{T},{TProjection}}}
      description: p => p.Include(&quot;Prop1&quot;).Exclude(&quot;Prop2&quot;)
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function Project(projection As Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection))) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.Project*
  nameWithType.vb: PagedSearch(Of T, TProjection).Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Project(System.Func(Of MongoDB.Driver.ProjectionDefinitionBuilder(Of T), MongoDB.Driver.ProjectionDefinition(Of T, TProjection)))
  name.vb: Project(Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection)))
- uid: MongoDB.Entities.PagedSearch`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:MongoDB.Entities.PagedSearch`2.ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: ProjectExcluding(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: ProjectExcluding(Expression<Func<T, Object>>)
  nameWithType: PagedSearch<T, TProjection>.ProjectExcluding(Expression<Func<T, Object>>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.ProjectExcluding(System.Linq.Expressions.Expression<System.Func<T, System.Object>>)
  type: Method
  source:
    id: ProjectExcluding
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 297
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify how to project the results using an exclusion projection expression.\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> ProjectExcluding(Expression<Func<T, object>> exclusion)
    parameters:
    - id: exclusion
      type: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
      description: x => new { x.PropToExclude, x.AnotherPropToExclude }
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function ProjectExcluding(exclusion As Expression(Of Func(Of T, Object))) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.ProjectExcluding*
  nameWithType.vb: PagedSearch(Of T, TProjection).ProjectExcluding(Expression(Of Func(Of T, Object)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).ProjectExcluding(System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object)))
  name.vb: ProjectExcluding(Expression(Of Func(Of T, Object)))
- uid: MongoDB.Entities.PagedSearch`2.Option(System.Action{MongoDB.Driver.AggregateOptions})
  commentId: M:MongoDB.Entities.PagedSearch`2.Option(System.Action{MongoDB.Driver.AggregateOptions})
  id: Option(System.Action{MongoDB.Driver.AggregateOptions})
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: Option(Action<AggregateOptions>)
  nameWithType: PagedSearch<T, TProjection>.Option(Action<AggregateOptions>)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Option(System.Action<MongoDB.Driver.AggregateOptions>)
  type: Method
  source:
    id: Option
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 321
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify an option for this find command (use multiple times if needed)\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> Option(Action<AggregateOptions> option)
    parameters:
    - id: option
      type: System.Action{MongoDB.Driver.AggregateOptions}
      description: x => x.OptionName = OptionValue
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function Option(option As Action(Of AggregateOptions)) As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.Option*
  nameWithType.vb: PagedSearch(Of T, TProjection).Option(Action(Of AggregateOptions))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Option(System.Action(Of MongoDB.Driver.AggregateOptions))
  name.vb: Option(Action(Of AggregateOptions))
- uid: MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters
  commentId: M:MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters
  id: IgnoreGlobalFilters
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: IgnoreGlobalFilters()
  nameWithType: PagedSearch<T, TProjection>.IgnoreGlobalFilters()
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.IgnoreGlobalFilters()
  type: Method
  source:
    id: IgnoreGlobalFilters
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 330
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nSpecify that this operation should ignore any global filters\n"
  example: []
  syntax:
    content: public PagedSearch<T, TProjection> IgnoreGlobalFilters()
    return:
      type: MongoDB.Entities.PagedSearch`2
    content.vb: Public Function IgnoreGlobalFilters As PagedSearch(Of T, TProjection)
  overload: MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters*
  nameWithType.vb: PagedSearch(Of T, TProjection).IgnoreGlobalFilters()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).IgnoreGlobalFilters()
- uid: MongoDB.Entities.PagedSearch`2.ExecuteAsync(System.Threading.CancellationToken)
  commentId: M:MongoDB.Entities.PagedSearch`2.ExecuteAsync(System.Threading.CancellationToken)
  id: ExecuteAsync(System.Threading.CancellationToken)
  parent: MongoDB.Entities.PagedSearch`2
  langs:
  - csharp
  - vb
  name: ExecuteAsync(CancellationToken)
  nameWithType: PagedSearch<T, TProjection>.ExecuteAsync(CancellationToken)
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.ExecuteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    id: ExecuteAsync
    path: D:\SOURCE-CONTROL\MongoDB.Entities\Documentation\src\Builders\PagedSearch.cs
    startLine: 340
  assemblies:
  - MongoDB.Entities
  namespace: MongoDB.Entities
  summary: "\nRun the aggregation search command in MongoDB server and get a page of results and total + page count\n"
  example: []
  syntax:
    content: public async Task<(IReadOnlyList<TProjection> Results, long TotalCount, int PageCount)> ExecuteAsync(CancellationToken cancellation = default(CancellationToken))
    parameters:
    - id: cancellation
      type: System.Threading.CancellationToken
      description: An optional cancellation token
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IReadOnlyList{{TProjection}},System.Int64,System.Int32}}
    content.vb: Public Function ExecuteAsync(cancellation As CancellationToken = Nothing) As Task(Of(Results As IReadOnlyList(Of TProjection), TotalCount As Long, PageCount As Integer)(Of IReadOnlyList(Of TProjection), Long, Integer)
  overload: MongoDB.Entities.PagedSearch`2.ExecuteAsync*
  nameWithType.vb: PagedSearch(Of T, TProjection).ExecuteAsync(CancellationToken)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).ExecuteAsync(System.Threading.CancellationToken)
references:
- uid: MongoDB.Entities
  commentId: N:MongoDB.Entities
  name: MongoDB.Entities
  nameWithType: MongoDB.Entities
  fullName: MongoDB.Entities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MongoDB.Entities.PagedSearch`2.WithFluent*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.WithFluent
  name: WithFluent
  nameWithType: PagedSearch<T, TProjection>.WithFluent
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.WithFluent
  nameWithType.vb: PagedSearch(Of T, TProjection).WithFluent
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).WithFluent
- uid: '{TFluent}'
  commentId: '!:TFluent'
  definition: TFluent
  name: TFluent
  nameWithType: TFluent
  fullName: TFluent
- uid: MongoDB.Entities.PagedSearch`2
  commentId: T:MongoDB.Entities.PagedSearch`2
  parent: MongoDB.Entities
  name: PagedSearch<T, TProjection>
  nameWithType: PagedSearch<T, TProjection>
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>
  nameWithType.vb: PagedSearch(Of T, TProjection)
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection)
  name.vb: PagedSearch(Of T, TProjection)
  spec.csharp:
  - uid: MongoDB.Entities.PagedSearch`2
    name: PagedSearch
    nameWithType: PagedSearch
    fullName: MongoDB.Entities.PagedSearch
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Entities.PagedSearch`2
    name: PagedSearch
    nameWithType: PagedSearch
    fullName: MongoDB.Entities.PagedSearch
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
- uid: TFluent
  commentId: '!:TFluent'
  name: TFluent
  nameWithType: TFluent
  fullName: TFluent
- uid: MongoDB.Entities.PagedSearch`2.Match*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.Match
  name: Match
  nameWithType: PagedSearch<T, TProjection>.Match
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Match
  nameWithType.vb: PagedSearch(Of T, TProjection).Match
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Match
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Boolean}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Boolean>>
  nameWithType: Expression<Func<T, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Boolean>>
  nameWithType.vb: Expression(Of Func(Of T, Boolean))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Boolean))
  name.vb: Expression(Of Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: true
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Func{MongoDB.Driver.FilterDefinitionBuilder{{T}},MongoDB.Driver.FilterDefinition{{T}}}
  commentId: T:System.Func{MongoDB.Driver.FilterDefinitionBuilder{`0},MongoDB.Driver.FilterDefinition{`0}}
  parent: System
  definition: System.Func`2
  name: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  nameWithType: Func<FilterDefinitionBuilder<T>, FilterDefinition<T>>
  fullName: System.Func<MongoDB.Driver.FilterDefinitionBuilder<T>, MongoDB.Driver.FilterDefinition<T>>
  nameWithType.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  fullName.vb: System.Func(Of MongoDB.Driver.FilterDefinitionBuilder(Of T), MongoDB.Driver.FilterDefinition(Of T))
  name.vb: Func(Of FilterDefinitionBuilder(Of T), FilterDefinition(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.FilterDefinitionBuilder`1
    name: FilterDefinitionBuilder
    nameWithType: FilterDefinitionBuilder
    fullName: MongoDB.Driver.FilterDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.FilterDefinition{{T}}
  commentId: T:MongoDB.Driver.FilterDefinition{`0}
  parent: MongoDB.Driver
  definition: MongoDB.Driver.FilterDefinition`1
  name: FilterDefinition<T>
  nameWithType: FilterDefinition<T>
  fullName: MongoDB.Driver.FilterDefinition<T>
  nameWithType.vb: FilterDefinition(Of T)
  fullName.vb: MongoDB.Driver.FilterDefinition(Of T)
  name.vb: FilterDefinition(Of T)
  spec.csharp:
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver.FilterDefinition`1
  commentId: T:MongoDB.Driver.FilterDefinition`1
  isExternal: true
  name: FilterDefinition<TDocument>
  nameWithType: FilterDefinition<TDocument>
  fullName: MongoDB.Driver.FilterDefinition<TDocument>
  nameWithType.vb: FilterDefinition(Of TDocument)
  fullName.vb: MongoDB.Driver.FilterDefinition(Of TDocument)
  name.vb: FilterDefinition(Of TDocument)
  spec.csharp:
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDocument
    nameWithType: TDocument
    fullName: TDocument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MongoDB.Driver.FilterDefinition`1
    name: FilterDefinition
    nameWithType: FilterDefinition
    fullName: MongoDB.Driver.FilterDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDocument
    nameWithType: TDocument
    fullName: TDocument
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Driver
  commentId: N:MongoDB.Driver
  isExternal: true
  name: MongoDB.Driver
  nameWithType: MongoDB.Driver
  fullName: MongoDB.Driver
- uid: MongoDB.Entities.Template
  commentId: T:MongoDB.Entities.Template
  parent: MongoDB.Entities
  name: Template
  nameWithType: Template
  fullName: MongoDB.Entities.Template
- uid: MongoDB.Entities.Search
  commentId: T:MongoDB.Entities.Search
  parent: MongoDB.Entities
  name: Search
  nameWithType: Search
  fullName: MongoDB.Entities.Search
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.Expression{System.Func{{T},System.Object}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Object}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, Object>>
  nameWithType: Expression<Func<T, Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, System.Object>>
  nameWithType.vb: Expression(Of Func(Of T, Object))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, System.Object))
  name.vb: Expression(Of Func(Of T, Object))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.Coordinates2D
  commentId: T:MongoDB.Entities.Coordinates2D
  parent: MongoDB.Entities
  name: Coordinates2D
  nameWithType: Coordinates2D
  fullName: MongoDB.Entities.Coordinates2D
- uid: System.Nullable{System.Double}
  commentId: T:System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.MatchString*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.MatchString
  name: MatchString
  nameWithType: PagedSearch<T, TProjection>.MatchString
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.MatchString
  nameWithType.vb: PagedSearch(Of T, TProjection).MatchString
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).MatchString
- uid: MongoDB.Entities.PagedSearch`2.MatchExpression*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.MatchExpression
  name: MatchExpression
  nameWithType: PagedSearch<T, TProjection>.MatchExpression
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.MatchExpression
  nameWithType.vb: PagedSearch(Of T, TProjection).MatchExpression
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).MatchExpression
- uid: MongoDB.Entities.PagedSearch`2.Sort*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.Sort
  name: Sort
  nameWithType: PagedSearch<T, TProjection>.Sort
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Sort
  nameWithType.vb: PagedSearch(Of T, TProjection).Sort
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Sort
- uid: MongoDB.Entities.Order
  commentId: T:MongoDB.Entities.Order
  parent: MongoDB.Entities
  name: Order
  nameWithType: Order
  fullName: MongoDB.Entities.Order
- uid: MongoDB.Entities.PagedSearch`2.SortByTextScore*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.SortByTextScore
  name: SortByTextScore
  nameWithType: PagedSearch<T, TProjection>.SortByTextScore
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.SortByTextScore
  nameWithType.vb: PagedSearch(Of T, TProjection).SortByTextScore
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).SortByTextScore
- uid: System.Func{MongoDB.Driver.SortDefinitionBuilder{{T}},MongoDB.Driver.SortDefinition{{T}}}
  commentId: T:System.Func{MongoDB.Driver.SortDefinitionBuilder{`0},MongoDB.Driver.SortDefinition{`0}}
  parent: System
  definition: System.Func`2
  name: Func<SortDefinitionBuilder<T>, SortDefinition<T>>
  nameWithType: Func<SortDefinitionBuilder<T>, SortDefinition<T>>
  fullName: System.Func<MongoDB.Driver.SortDefinitionBuilder<T>, MongoDB.Driver.SortDefinition<T>>
  nameWithType.vb: Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T))
  fullName.vb: System.Func(Of MongoDB.Driver.SortDefinitionBuilder(Of T), MongoDB.Driver.SortDefinition(Of T))
  name.vb: Func(Of SortDefinitionBuilder(Of T), SortDefinition(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: MongoDB.Driver.SortDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.SortDefinition`1
    name: SortDefinition
    nameWithType: SortDefinition
    fullName: MongoDB.Driver.SortDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.SortDefinitionBuilder`1
    name: SortDefinitionBuilder
    nameWithType: SortDefinitionBuilder
    fullName: MongoDB.Driver.SortDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.SortDefinition`1
    name: SortDefinition
    nameWithType: SortDefinition
    fullName: MongoDB.Driver.SortDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.PageNumber*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.PageNumber
  name: PageNumber
  nameWithType: PagedSearch<T, TProjection>.PageNumber
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.PageNumber
  nameWithType.vb: PagedSearch(Of T, TProjection).PageNumber
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).PageNumber
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MongoDB.Entities.PagedSearch`2.PageSize*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.PageSize
  name: PageSize
  nameWithType: PagedSearch<T, TProjection>.PageSize
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.PageSize
  nameWithType.vb: PagedSearch(Of T, TProjection).PageSize
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).PageSize
- uid: MongoDB.Entities.PagedSearch`2.Project*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.Project
  name: Project
  nameWithType: PagedSearch<T, TProjection>.Project
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Project
  nameWithType.vb: PagedSearch(Of T, TProjection).Project
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Project
- uid: System.Linq.Expressions.Expression{System.Func{{T},{TProjection}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,`1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<T, TProjection>>
  nameWithType: Expression<Func<T, TProjection>>
  fullName: System.Linq.Expressions.Expression<System.Func<T, TProjection>>
  nameWithType.vb: Expression(Of Func(Of T, TProjection))
  fullName.vb: System.Linq.Expressions.Expression(Of System.Func(Of T, TProjection))
  name.vb: Expression(Of Func(Of T, TProjection))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{{T}},MongoDB.Driver.ProjectionDefinition{{T},{TProjection}}}
  commentId: T:System.Func{MongoDB.Driver.ProjectionDefinitionBuilder{`0},MongoDB.Driver.ProjectionDefinition{`0,`1}}
  parent: System
  definition: System.Func`2
  name: Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>
  nameWithType: Func<ProjectionDefinitionBuilder<T>, ProjectionDefinition<T, TProjection>>
  fullName: System.Func<MongoDB.Driver.ProjectionDefinitionBuilder<T>, MongoDB.Driver.ProjectionDefinition<T, TProjection>>
  nameWithType.vb: Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection))
  fullName.vb: System.Func(Of MongoDB.Driver.ProjectionDefinitionBuilder(Of T), MongoDB.Driver.ProjectionDefinition(Of T, TProjection))
  name.vb: Func(Of ProjectionDefinitionBuilder(Of T), ProjectionDefinition(Of T, TProjection))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: MongoDB.Driver.ProjectionDefinitionBuilder
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: MongoDB.Driver.ProjectionDefinition
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.ProjectionDefinitionBuilder`1
    name: ProjectionDefinitionBuilder
    nameWithType: ProjectionDefinitionBuilder
    fullName: MongoDB.Driver.ProjectionDefinitionBuilder
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: MongoDB.Driver.ProjectionDefinition`2
    name: ProjectionDefinition
    nameWithType: ProjectionDefinition
    fullName: MongoDB.Driver.ProjectionDefinition
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.ProjectExcluding*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.ProjectExcluding
  name: ProjectExcluding
  nameWithType: PagedSearch<T, TProjection>.ProjectExcluding
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.ProjectExcluding
  nameWithType.vb: PagedSearch(Of T, TProjection).ProjectExcluding
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).ProjectExcluding
- uid: MongoDB.Entities.PagedSearch`2.Option*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.Option
  name: Option
  nameWithType: PagedSearch<T, TProjection>.Option
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.Option
  nameWithType.vb: PagedSearch(Of T, TProjection).Option
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).Option
- uid: System.Action{MongoDB.Driver.AggregateOptions}
  commentId: T:System.Action{MongoDB.Driver.AggregateOptions}
  parent: System
  definition: System.Action`1
  name: Action<AggregateOptions>
  nameWithType: Action<AggregateOptions>
  fullName: System.Action<MongoDB.Driver.AggregateOptions>
  nameWithType.vb: Action(Of AggregateOptions)
  fullName.vb: System.Action(Of MongoDB.Driver.AggregateOptions)
  name.vb: Action(Of AggregateOptions)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MongoDB.Driver.AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: MongoDB.Driver.AggregateOptions
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MongoDB.Driver.AggregateOptions
    name: AggregateOptions
    nameWithType: AggregateOptions
    fullName: MongoDB.Driver.AggregateOptions
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.IgnoreGlobalFilters
  name: IgnoreGlobalFilters
  nameWithType: PagedSearch<T, TProjection>.IgnoreGlobalFilters
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.IgnoreGlobalFilters
  nameWithType.vb: PagedSearch(Of T, TProjection).IgnoreGlobalFilters
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).IgnoreGlobalFilters
- uid: MongoDB.Entities.PagedSearch`2.ExecuteAsync*
  commentId: Overload:MongoDB.Entities.PagedSearch`2.ExecuteAsync
  name: ExecuteAsync
  nameWithType: PagedSearch<T, TProjection>.ExecuteAsync
  fullName: MongoDB.Entities.PagedSearch<T, TProjection>.ExecuteAsync
  nameWithType.vb: PagedSearch(Of T, TProjection).ExecuteAsync
  fullName.vb: MongoDB.Entities.PagedSearch(Of T, TProjection).ExecuteAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IReadOnlyList{{TProjection}},System.Int64,System.Int32}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{System.Collections.Generic.IReadOnlyList{`1},System.Int64,System.Int32}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<(T1, T2, T3)<IReadOnlyList<TProjection>, Int64, Int32>>
  nameWithType: Task<(T1, T2, T3)<IReadOnlyList<TProjection>, Int64, Int32>>
  fullName: System.Threading.Tasks.Task<System.ValueTuple<System.Collections.Generic.IReadOnlyList<TProjection>, System.Int64, System.Int32>>
  nameWithType.vb: Task(Of (T1, T2, T3)(Of IReadOnlyList(Of TProjection), Int64, Int32))
  fullName.vb: System.Threading.Tasks.Task(Of System.ValueTuple(Of System.Collections.Generic.IReadOnlyList(Of TProjection), System.Int64, System.Int32))
  name.vb: Task(Of (T1, T2, T3)(Of IReadOnlyList(Of TProjection), Int64, Int32))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ValueTuple`3
    name: (T1, T2, T3)
    nameWithType: (T1, T2, T3)
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProjection
    nameWithType: TProjection
    fullName: TProjection
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
